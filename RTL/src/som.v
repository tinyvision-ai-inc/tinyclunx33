// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : som.v
// Device     : build
// LiteX sha1 : cbb1adfa7
// Date       : 2024-10-26 22:23:06
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module som (
    input  wire          framectl0_irq,
    inout  wire          i2c0_scl,
    inout  wire          i2c0_sda,
    input  wire          jtag_reset,
    input  wire          jtag_tck,
    input  wire          jtag_tdi,
    output wire          jtag_tdo,
    input  wire          jtag_tms,
    input  wire          serial_rx,
    output reg           serial_tx,
    output reg           spiflash4x_clk,
    output wire          spiflash4x_cs_n,
    inout  wire    [3:0] spiflash4x_dq,
    input  wire          sys_clk,
    input  wire          sys_rst,
    input  wire          usb230_irq,
    input  wire          wishbone0_ack,
    output wire   [31:0] wishbone0_adr,
    output wire    [1:0] wishbone0_bte,
    output wire    [2:0] wishbone0_cti,
    output wire          wishbone0_cyc,
    input  wire   [31:0] wishbone0_dat_r,
    output wire   [31:0] wishbone0_dat_w,
    input  wire          wishbone0_err,
    output wire    [3:0] wishbone0_sel,
    output wire          wishbone0_stb,
    output wire          wishbone0_we
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
MainSoC
└─── crg (CRG)
└─── bus (SoCBusHandler)
│    └─── _interconnect (Crossbar)
│    │    └─── decoder_0* (Decoder)
│    │    └─── decoder_1* (Decoder)
│    │    └─── arbiter_0* (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── arbiter_1* (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── arbiter_2* (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── arbiter_3* (Arbiter)
│    │    │    └─── rr (RoundRobin)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── i2c0 (RTLI2C)
│    └─── ev (EventManager)
│    │    └─── eventsourcepulse_0* (EventSourcePulse)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    └─── [i2c_controller_byte_ctrl]
└─── spiflash_phy (LiteSPIPHY)
│    └─── spiflash_phy (LiteSPISDRPHYCore)
│    │    └─── resyncreg_0* (ResyncReg)
│    │    └─── clkgen (LiteSPIClkGen)
│    │    └─── waittimer_0* (WaitTimer)
│    │    └─── fsm (FSM)
└─── spiflash_core (LiteSPI)
│    └─── crossbar (LiteSPICrossbar)
│    │    └─── rr (RoundRobin)
│    │    └─── tx_mux (Multiplexer)
│    │    └─── rx_demux (Demultiplexer)
│    └─── mmap (LiteSPIMMAP)
│    │    └─── waittimer_0* (WaitTimer)
│    │    └─── fsm (FSM)
│    └─── master (LiteSPIMaster)
│    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    └─── syncfifo_1* (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
└─── main_ram (NXLRAM)
│    └─── [SP512K]
└─── verilogwbport_0* (VerilogWBPort)
└─── usb23 (USB23)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── framectl (FrameCtl)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_5* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstatus_3* (CSRStatus)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── csrbank_7* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [13:0] adr;
reg           arbiter0_grant = 1'd0;
wire    [1:0] arbiter0_request;
reg           arbiter1_grant = 1'd0;
wire    [1:0] arbiter1_request;
reg           arbiter2_grant = 1'd0;
wire    [1:0] arbiter2_request;
reg           arbiter3_grant = 1'd0;
wire    [1:0] arbiter3_request;
reg    [29:0] array_muxed0 = 30'd0;
reg    [31:0] array_muxed1 = 32'd0;
reg     [3:0] array_muxed10 = 4'd0;
reg           array_muxed11 = 1'd0;
reg           array_muxed12 = 1'd0;
reg           array_muxed13 = 1'd0;
reg     [2:0] array_muxed14 = 3'd0;
reg     [1:0] array_muxed15 = 2'd0;
reg    [29:0] array_muxed16 = 30'd0;
reg    [31:0] array_muxed17 = 32'd0;
reg     [3:0] array_muxed18 = 4'd0;
reg           array_muxed19 = 1'd0;
reg     [3:0] array_muxed2 = 4'd0;
reg           array_muxed20 = 1'd0;
reg           array_muxed21 = 1'd0;
reg     [2:0] array_muxed22 = 3'd0;
reg     [1:0] array_muxed23 = 2'd0;
reg    [29:0] array_muxed24 = 30'd0;
reg    [31:0] array_muxed25 = 32'd0;
reg     [3:0] array_muxed26 = 4'd0;
reg           array_muxed27 = 1'd0;
reg           array_muxed28 = 1'd0;
reg           array_muxed29 = 1'd0;
reg           array_muxed3 = 1'd0;
reg     [2:0] array_muxed30 = 3'd0;
reg     [1:0] array_muxed31 = 2'd0;
reg           array_muxed4 = 1'd0;
reg           array_muxed5 = 1'd0;
reg     [2:0] array_muxed6 = 3'd0;
reg     [1:0] array_muxed7 = 2'd0;
reg    [29:0] array_muxed8 = 30'd0;
reg    [31:0] array_muxed9 = 32'd0;
reg           crossbar_cs = 1'd0;
wire          crossbar_sink_first;
wire          crossbar_sink_last;
wire   [31:0] crossbar_sink_payload_data;
wire          crossbar_sink_ready;
wire          crossbar_sink_valid;
wire          crossbar_source_first;
wire          crossbar_source_last;
wire   [31:0] crossbar_source_payload_data;
wire    [5:0] crossbar_source_payload_len;
wire    [7:0] crossbar_source_payload_mask;
wire    [3:0] crossbar_source_payload_width;
wire          crossbar_source_ready;
wire          crossbar_source_valid;
wire   [31:0] csrbank0_bus_errors_r;
reg           csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csrbank0_bus_errors_w;
reg           csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csrbank0_reset0_r;
reg           csrbank0_reset0_re = 1'd0;
wire    [1:0] csrbank0_reset0_w;
reg           csrbank0_reset0_we = 1'd0;
wire   [31:0] csrbank0_scratch0_r;
reg           csrbank0_scratch0_re = 1'd0;
wire   [31:0] csrbank0_scratch0_w;
reg           csrbank0_scratch0_we = 1'd0;
wire          csrbank0_sel;
wire          csrbank1_ev_enable0_r;
reg           csrbank1_ev_enable0_re = 1'd0;
wire          csrbank1_ev_enable0_w;
reg           csrbank1_ev_enable0_we = 1'd0;
wire          csrbank1_ev_pending_r;
reg           csrbank1_ev_pending_re = 1'd0;
wire          csrbank1_ev_pending_w;
reg           csrbank1_ev_pending_we = 1'd0;
wire          csrbank1_ev_status_r;
reg           csrbank1_ev_status_re = 1'd0;
wire          csrbank1_ev_status_w;
reg           csrbank1_ev_status_we = 1'd0;
wire          csrbank1_sel;
wire    [7:0] csrbank2_command0_r;
reg           csrbank2_command0_re = 1'd0;
wire    [7:0] csrbank2_command0_w;
reg           csrbank2_command0_we = 1'd0;
wire    [7:0] csrbank2_control0_r;
reg           csrbank2_control0_re = 1'd0;
wire    [7:0] csrbank2_control0_w;
reg           csrbank2_control0_we = 1'd0;
wire          csrbank2_core_reset0_r;
reg           csrbank2_core_reset0_re = 1'd0;
wire          csrbank2_core_reset0_w;
reg           csrbank2_core_reset0_we = 1'd0;
wire    [1:0] csrbank2_ev_enable0_r;
reg           csrbank2_ev_enable0_re = 1'd0;
wire    [1:0] csrbank2_ev_enable0_w;
reg           csrbank2_ev_enable0_we = 1'd0;
wire    [1:0] csrbank2_ev_pending_r;
reg           csrbank2_ev_pending_re = 1'd0;
wire    [1:0] csrbank2_ev_pending_w;
reg           csrbank2_ev_pending_we = 1'd0;
wire    [1:0] csrbank2_ev_status_r;
reg           csrbank2_ev_status_re = 1'd0;
wire    [1:0] csrbank2_ev_status_w;
reg           csrbank2_ev_status_we = 1'd0;
wire   [15:0] csrbank2_prescale0_r;
reg           csrbank2_prescale0_re = 1'd0;
wire   [15:0] csrbank2_prescale0_w;
reg           csrbank2_prescale0_we = 1'd0;
wire    [7:0] csrbank2_rxr_r;
reg           csrbank2_rxr_re = 1'd0;
wire    [7:0] csrbank2_rxr_w;
reg           csrbank2_rxr_we = 1'd0;
wire          csrbank2_sel;
wire    [7:0] csrbank2_status_r;
reg           csrbank2_status_re = 1'd0;
wire    [7:0] csrbank2_status_w;
reg           csrbank2_status_we = 1'd0;
wire    [7:0] csrbank2_txr0_r;
reg           csrbank2_txr0_re = 1'd0;
wire    [7:0] csrbank2_txr0_w;
reg           csrbank2_txr0_we = 1'd0;
wire          csrbank3_master_cs0_r;
reg           csrbank3_master_cs0_re = 1'd0;
wire          csrbank3_master_cs0_w;
reg           csrbank3_master_cs0_we = 1'd0;
wire   [23:0] csrbank3_master_phyconfig0_r;
reg           csrbank3_master_phyconfig0_re = 1'd0;
wire   [23:0] csrbank3_master_phyconfig0_w;
reg           csrbank3_master_phyconfig0_we = 1'd0;
wire    [1:0] csrbank3_master_status_r;
reg           csrbank3_master_status_re = 1'd0;
wire    [1:0] csrbank3_master_status_w;
reg           csrbank3_master_status_we = 1'd0;
wire    [7:0] csrbank3_mmap_dummy_bits0_r;
reg           csrbank3_mmap_dummy_bits0_re = 1'd0;
wire    [7:0] csrbank3_mmap_dummy_bits0_w;
reg           csrbank3_mmap_dummy_bits0_we = 1'd0;
wire          csrbank3_sel;
wire    [7:0] csrbank4_clk_divisor0_r;
reg           csrbank4_clk_divisor0_re = 1'd0;
wire    [7:0] csrbank4_clk_divisor0_w;
reg           csrbank4_clk_divisor0_we = 1'd0;
wire          csrbank4_sel;
wire          csrbank5_en0_r;
reg           csrbank5_en0_re = 1'd0;
wire          csrbank5_en0_w;
reg           csrbank5_en0_we = 1'd0;
wire          csrbank5_ev_enable0_r;
reg           csrbank5_ev_enable0_re = 1'd0;
wire          csrbank5_ev_enable0_w;
reg           csrbank5_ev_enable0_we = 1'd0;
wire          csrbank5_ev_pending_r;
reg           csrbank5_ev_pending_re = 1'd0;
wire          csrbank5_ev_pending_w;
reg           csrbank5_ev_pending_we = 1'd0;
wire          csrbank5_ev_status_r;
reg           csrbank5_ev_status_re = 1'd0;
wire          csrbank5_ev_status_w;
reg           csrbank5_ev_status_we = 1'd0;
wire   [31:0] csrbank5_load0_r;
reg           csrbank5_load0_re = 1'd0;
wire   [31:0] csrbank5_load0_w;
reg           csrbank5_load0_we = 1'd0;
wire   [31:0] csrbank5_reload0_r;
reg           csrbank5_reload0_re = 1'd0;
wire   [31:0] csrbank5_reload0_w;
reg           csrbank5_reload0_we = 1'd0;
wire          csrbank5_sel;
wire          csrbank5_update_value0_r;
reg           csrbank5_update_value0_re = 1'd0;
wire          csrbank5_update_value0_w;
reg           csrbank5_update_value0_we = 1'd0;
wire   [31:0] csrbank5_uptime_cycles0_r;
reg           csrbank5_uptime_cycles0_re = 1'd0;
wire   [31:0] csrbank5_uptime_cycles0_w;
reg           csrbank5_uptime_cycles0_we = 1'd0;
wire   [31:0] csrbank5_uptime_cycles1_r;
reg           csrbank5_uptime_cycles1_re = 1'd0;
wire   [31:0] csrbank5_uptime_cycles1_w;
reg           csrbank5_uptime_cycles1_we = 1'd0;
wire          csrbank5_uptime_latch0_r;
reg           csrbank5_uptime_latch0_re = 1'd0;
wire          csrbank5_uptime_latch0_w;
reg           csrbank5_uptime_latch0_we = 1'd0;
wire   [31:0] csrbank5_value_r;
reg           csrbank5_value_re = 1'd0;
wire   [31:0] csrbank5_value_w;
reg           csrbank5_value_we = 1'd0;
wire    [1:0] csrbank6_ev_enable0_r;
reg           csrbank6_ev_enable0_re = 1'd0;
wire    [1:0] csrbank6_ev_enable0_w;
reg           csrbank6_ev_enable0_we = 1'd0;
wire    [1:0] csrbank6_ev_pending_r;
reg           csrbank6_ev_pending_re = 1'd0;
wire    [1:0] csrbank6_ev_pending_w;
reg           csrbank6_ev_pending_we = 1'd0;
wire    [1:0] csrbank6_ev_status_r;
reg           csrbank6_ev_status_re = 1'd0;
wire    [1:0] csrbank6_ev_status_w;
reg           csrbank6_ev_status_we = 1'd0;
wire          csrbank6_rxempty_r;
reg           csrbank6_rxempty_re = 1'd0;
wire          csrbank6_rxempty_w;
reg           csrbank6_rxempty_we = 1'd0;
wire          csrbank6_rxfull_r;
reg           csrbank6_rxfull_re = 1'd0;
wire          csrbank6_rxfull_w;
reg           csrbank6_rxfull_we = 1'd0;
wire          csrbank6_sel;
wire          csrbank6_txempty_r;
reg           csrbank6_txempty_re = 1'd0;
wire          csrbank6_txempty_w;
reg           csrbank6_txempty_we = 1'd0;
wire          csrbank6_txfull_r;
reg           csrbank6_txfull_re = 1'd0;
wire          csrbank6_txfull_w;
reg           csrbank6_txfull_we = 1'd0;
wire          csrbank7_ev_enable0_r;
reg           csrbank7_ev_enable0_re = 1'd0;
wire          csrbank7_ev_enable0_w;
reg           csrbank7_ev_enable0_we = 1'd0;
wire          csrbank7_ev_pending_r;
reg           csrbank7_ev_pending_re = 1'd0;
wire          csrbank7_ev_pending_w;
reg           csrbank7_ev_pending_we = 1'd0;
wire          csrbank7_ev_status_r;
reg           csrbank7_ev_status_re = 1'd0;
wire          csrbank7_ev_status_w;
reg           csrbank7_ev_status_we = 1'd0;
wire          csrbank7_sel;
wire   [31:0] dat_r;
wire   [31:0] dat_w;
reg     [3:0] decoder0_slave_sel = 4'd0;
reg     [3:0] decoder0_slave_sel_r = 4'd0;
reg     [3:0] decoder1_slave_sel = 4'd0;
reg     [3:0] decoder1_slave_sel_r = 4'd0;
reg           framectl_clear = 1'd0;
reg           framectl_enable_re = 1'd0;
reg           framectl_enable_storage = 1'd0;
wire          framectl_frame0;
wire          framectl_frame1;
wire          framectl_frame2;
wire          framectl_irq;
reg           framectl_pending = 1'd0;
reg           framectl_pending_r = 1'd0;
reg           framectl_pending_re = 1'd0;
reg           framectl_pending_status = 1'd0;
wire          framectl_pending_we;
wire          framectl_status;
reg           framectl_status_re = 1'd0;
reg           framectl_status_status = 1'd0;
wire          framectl_status_we;
wire          framectl_trigger;
reg           framectl_trigger_d = 1'd0;
wire          i2c0_ACK;
wire          i2c0_ArbLost;
wire          i2c0_Busy;
wire          i2c0_EN;
reg           i2c0_IACK = 1'd0;
wire          i2c0_IEN;
wire          i2c0_IF;
wire          i2c0_RD;
wire    [5:0] i2c0_Resvd0;
wire    [1:0] i2c0_Resvd1;
reg     [2:0] i2c0_Resvd2 = 3'd0;
wire          i2c0_RxACK;
wire          i2c0_STA;
wire          i2c0_STO;
wire          i2c0_TIP;
wire          i2c0_WR;
wire          i2c0_ack;
reg           i2c0_arb_lost = 1'd0;
wire          i2c0_busy;
reg     [7:0] i2c0_command_dat_w = 8'd0;
reg           i2c0_command_re = 1'd0;
reg     [7:0] i2c0_command_storage = 8'd0;
reg           i2c0_command_we = 1'd0;
reg           i2c0_control_re = 1'd0;
reg     [7:0] i2c0_control_storage = 8'd0;
reg           i2c0_core_reset_re = 1'd0;
reg           i2c0_core_reset_storage = 1'd0;
wire          i2c0_done;
wire          i2c0_ena;
reg           i2c0_enable_re = 1'd0;
reg     [1:0] i2c0_enable_storage = 2'd0;
wire          i2c0_i2c_al;
wire          i2c0_i2c_int0;
wire          i2c0_i2c_int1;
wire          i2c0_i2c_int2;
reg           i2c0_i2c_int_clear = 1'd0;
reg           i2c0_i2c_int_pending = 1'd0;
wire          i2c0_i2c_int_status;
wire          i2c0_i2c_int_trigger;
wire          i2c0_iack;
wire          i2c0_int_ena;
reg           i2c0_intflag = 1'd0;
wire          i2c0_irq;
reg     [1:0] i2c0_pending_r = 2'd0;
reg           i2c0_pending_re = 1'd0;
reg     [1:0] i2c0_pending_status = 2'd0;
wire          i2c0_pending_we;
reg           i2c0_prescale_re = 1'd0;
reg    [15:0] i2c0_prescale_storage = 16'd65535;
wire          i2c0_read;
reg           i2c0_reset = 1'd0;
wire          i2c0_rxack;
reg           i2c0_rxr_re = 1'd0;
wire    [7:0] i2c0_rxr_status;
wire          i2c0_rxr_we;
wire          i2c0_scl_i0;
wire          i2c0_scl_i1;
wire          i2c0_scl_o0;
wire          i2c0_scl_o1;
wire          i2c0_scl_oe;
wire          i2c0_scl_oen;
wire          i2c0_sda_i0;
wire          i2c0_sda_i1;
wire          i2c0_sda_o0;
wire          i2c0_sda_o1;
wire          i2c0_sda_oe;
wire          i2c0_sda_oen;
wire          i2c0_start;
reg           i2c0_status_re0 = 1'd0;
reg           i2c0_status_re1 = 1'd0;
reg     [7:0] i2c0_status_status0 = 8'd0;
reg     [1:0] i2c0_status_status1 = 2'd0;
wire          i2c0_status_we0;
wire          i2c0_status_we1;
wire          i2c0_stop;
reg           i2c0_tip = 1'd0;
reg           i2c0_txr_re = 1'd0;
reg     [7:0] i2c0_txr_storage = 8'd0;
wire          i2c0_txrx_done0;
wire          i2c0_txrx_done1;
wire          i2c0_txrx_done2;
reg           i2c0_txrx_done_clear = 1'd0;
reg           i2c0_txrx_done_pending = 1'd0;
wire          i2c0_txrx_done_status;
wire          i2c0_txrx_done_trigger;
reg           i2c0_txrx_done_trigger_d = 1'd0;
wire          i2c0_write;
wire          inferedsdrtristate0__i;
reg           inferedsdrtristate0__o = 1'd0;
reg           inferedsdrtristate0_oe = 1'd0;
wire          inferedsdrtristate1__i;
reg           inferedsdrtristate1__o = 1'd0;
reg           inferedsdrtristate1_oe = 1'd0;
wire          inferedsdrtristate2__i;
reg           inferedsdrtristate2__o = 1'd0;
reg           inferedsdrtristate2_oe = 1'd0;
wire          inferedsdrtristate3__i;
reg           inferedsdrtristate3__o = 1'd0;
reg           inferedsdrtristate3_oe = 1'd0;
reg           int_rst = 1'd1;
reg           interface0_ack0 = 1'd0;
wire          interface0_ack1;
wire   [29:0] interface0_adr0;
wire   [29:0] interface0_adr1;
wire   [13:0] interface0_bank_bus_adr;
reg    [31:0] interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] interface0_bank_bus_dat_w;
wire          interface0_bank_bus_re;
wire          interface0_bank_bus_we;
wire    [1:0] interface0_bte0;
wire    [1:0] interface0_bte1;
wire    [2:0] interface0_cti0;
wire    [2:0] interface0_cti1;
wire          interface0_cyc0;
wire          interface0_cyc1;
reg    [31:0] interface0_dat_r0 = 32'd0;
wire   [31:0] interface0_dat_r1;
wire   [31:0] interface0_dat_w0;
wire   [31:0] interface0_dat_w1;
reg           interface0_err0 = 1'd0;
wire          interface0_err1;
wire    [3:0] interface0_sel0;
wire    [3:0] interface0_sel1;
wire          interface0_stb0;
wire          interface0_stb1;
wire          interface0_we0;
wire          interface0_we1;
wire          interface1_ack;
reg    [13:0] interface1_adr0 = 14'd0;
wire   [29:0] interface1_adr1;
wire   [13:0] interface1_bank_bus_adr;
reg    [31:0] interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] interface1_bank_bus_dat_w;
wire          interface1_bank_bus_re;
wire          interface1_bank_bus_we;
wire    [1:0] interface1_bte;
wire    [2:0] interface1_cti;
wire          interface1_cyc;
wire   [31:0] interface1_dat_r0;
wire   [31:0] interface1_dat_r1;
reg    [31:0] interface1_dat_w0 = 32'd0;
wire   [31:0] interface1_dat_w1;
wire          interface1_err;
reg           interface1_re = 1'd0;
wire    [3:0] interface1_sel;
wire          interface1_stb;
reg           interface1_we0 = 1'd0;
wire          interface1_we1;
wire          interface2_ack;
wire   [29:0] interface2_adr;
wire   [13:0] interface2_bank_bus_adr;
reg    [31:0] interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] interface2_bank_bus_dat_w;
wire          interface2_bank_bus_re;
wire          interface2_bank_bus_we;
wire    [1:0] interface2_bte;
wire    [2:0] interface2_cti;
wire          interface2_cyc;
wire   [31:0] interface2_dat_r;
wire   [31:0] interface2_dat_w;
wire          interface2_err;
wire    [3:0] interface2_sel;
wire          interface2_stb;
wire          interface2_we;
wire          interface3_ack;
wire   [29:0] interface3_adr;
wire   [13:0] interface3_bank_bus_adr;
reg    [31:0] interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] interface3_bank_bus_dat_w;
wire          interface3_bank_bus_re;
wire          interface3_bank_bus_we;
wire    [1:0] interface3_bte;
wire    [2:0] interface3_cti;
wire          interface3_cyc;
wire   [31:0] interface3_dat_r;
wire   [31:0] interface3_dat_w;
wire          interface3_err;
wire    [3:0] interface3_sel;
wire          interface3_stb;
wire          interface3_we;
wire          interface4_ack;
wire   [29:0] interface4_adr;
wire   [13:0] interface4_bank_bus_adr;
reg    [31:0] interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] interface4_bank_bus_dat_w;
wire          interface4_bank_bus_re;
wire          interface4_bank_bus_we;
wire    [1:0] interface4_bte;
wire    [2:0] interface4_cti;
wire          interface4_cyc;
wire   [31:0] interface4_dat_r;
wire   [31:0] interface4_dat_w;
wire          interface4_err;
wire    [3:0] interface4_sel;
wire          interface4_stb;
wire          interface4_we;
wire          interface5_ack;
wire   [29:0] interface5_adr;
wire   [13:0] interface5_bank_bus_adr;
reg    [31:0] interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] interface5_bank_bus_dat_w;
wire          interface5_bank_bus_re;
wire          interface5_bank_bus_we;
wire    [1:0] interface5_bte;
wire    [2:0] interface5_cti;
wire          interface5_cyc;
wire   [31:0] interface5_dat_r;
wire   [31:0] interface5_dat_w;
wire          interface5_err;
wire    [3:0] interface5_sel;
wire          interface5_stb;
wire          interface5_we;
wire          interface6_ack;
wire   [29:0] interface6_adr;
wire   [13:0] interface6_bank_bus_adr;
reg    [31:0] interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] interface6_bank_bus_dat_w;
wire          interface6_bank_bus_re;
wire          interface6_bank_bus_we;
wire    [1:0] interface6_bte;
wire    [2:0] interface6_cti;
wire          interface6_cyc;
wire   [31:0] interface6_dat_r;
wire   [31:0] interface6_dat_w;
wire          interface6_err;
wire    [3:0] interface6_sel;
wire          interface6_stb;
wire          interface6_we;
wire          interface7_ack;
wire   [29:0] interface7_adr;
wire   [13:0] interface7_bank_bus_adr;
reg    [31:0] interface7_bank_bus_dat_r = 32'd0;
wire   [31:0] interface7_bank_bus_dat_w;
wire          interface7_bank_bus_re;
wire          interface7_bank_bus_we;
wire    [1:0] interface7_bte;
wire    [2:0] interface7_cti;
wire          interface7_cyc;
wire   [31:0] interface7_dat_r;
wire   [31:0] interface7_dat_w;
wire          interface7_err;
wire    [3:0] interface7_sel;
wire          interface7_stb;
wire          interface7_we;
reg           litespi_grant = 1'd0;
reg     [3:0] litespi_next_state = 4'd0;
wire    [1:0] litespi_request;
reg           litespi_rx_demux_endpoint0_source_first = 1'd0;
reg           litespi_rx_demux_endpoint0_source_last = 1'd0;
reg    [31:0] litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
wire          litespi_rx_demux_endpoint0_source_ready;
reg           litespi_rx_demux_endpoint0_source_valid = 1'd0;
reg           litespi_rx_demux_endpoint1_source_first = 1'd0;
reg           litespi_rx_demux_endpoint1_source_last = 1'd0;
reg    [31:0] litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
wire          litespi_rx_demux_endpoint1_source_ready;
reg           litespi_rx_demux_endpoint1_source_valid = 1'd0;
wire          litespi_rx_demux_sel;
wire          litespi_rx_demux_sink_first;
wire          litespi_rx_demux_sink_last;
wire   [31:0] litespi_rx_demux_sink_payload_data;
reg           litespi_rx_demux_sink_ready = 1'd0;
wire          litespi_rx_demux_sink_valid;
reg     [3:0] litespi_state = 4'd0;
wire          litespi_tx_mux_endpoint0_sink_first;
wire          litespi_tx_mux_endpoint0_sink_last;
wire   [31:0] litespi_tx_mux_endpoint0_sink_payload_data;
wire    [5:0] litespi_tx_mux_endpoint0_sink_payload_len;
wire    [7:0] litespi_tx_mux_endpoint0_sink_payload_mask;
wire    [3:0] litespi_tx_mux_endpoint0_sink_payload_width;
reg           litespi_tx_mux_endpoint0_sink_ready = 1'd0;
wire          litespi_tx_mux_endpoint0_sink_valid;
wire          litespi_tx_mux_endpoint1_sink_first;
wire          litespi_tx_mux_endpoint1_sink_last;
wire   [31:0] litespi_tx_mux_endpoint1_sink_payload_data;
wire    [5:0] litespi_tx_mux_endpoint1_sink_payload_len;
wire    [7:0] litespi_tx_mux_endpoint1_sink_payload_mask;
wire    [3:0] litespi_tx_mux_endpoint1_sink_payload_width;
reg           litespi_tx_mux_endpoint1_sink_ready = 1'd0;
wire          litespi_tx_mux_endpoint1_sink_valid;
wire          litespi_tx_mux_sel;
reg           litespi_tx_mux_source_first = 1'd0;
reg           litespi_tx_mux_source_last = 1'd0;
reg    [31:0] litespi_tx_mux_source_payload_data = 32'd0;
reg     [5:0] litespi_tx_mux_source_payload_len = 6'd0;
reg     [7:0] litespi_tx_mux_source_payload_mask = 8'd0;
reg     [3:0] litespi_tx_mux_source_payload_width = 4'd0;
wire          litespi_tx_mux_source_ready;
reg           litespi_tx_mux_source_valid = 1'd0;
reg           litespimmap0 = 1'd0;
reg           litespimmap1 = 1'd0;
reg    [29:0] litespimmap_burst_adr = 30'd0;
reg    [29:0] litespimmap_burst_adr_litespi_f_next_value = 30'd0;
reg           litespimmap_burst_adr_litespi_f_next_value_ce = 1'd0;
reg           litespimmap_burst_cs = 1'd0;
reg           litespimmap_burst_cs_litespi_next_value = 1'd0;
reg           litespimmap_burst_cs_litespi_next_value_ce = 1'd0;
reg           litespimmap_bus_ack = 1'd0;
wire   [29:0] litespimmap_bus_adr;
wire    [1:0] litespimmap_bus_bte;
wire    [2:0] litespimmap_bus_cti;
wire          litespimmap_bus_cyc;
reg    [31:0] litespimmap_bus_dat_r = 32'd0;
wire   [31:0] litespimmap_bus_dat_w;
reg           litespimmap_bus_err = 1'd0;
wire    [3:0] litespimmap_bus_sel;
wire          litespimmap_bus_stb;
wire          litespimmap_bus_we;
reg     [1:0] litespimmap_byte_count = 2'd0;
reg     [1:0] litespimmap_byte_count_litespi_t_next_value = 2'd0;
reg           litespimmap_byte_count_litespi_t_next_value_ce = 1'd0;
reg     [8:0] litespimmap_count = 9'd256;
reg           litespimmap_cs = 1'd0;
reg    [31:0] litespimmap_data_write = 32'd0;
reg    [31:0] litespimmap_data_write_litespi_t_f_next_value1 = 32'd0;
reg           litespimmap_data_write_litespi_t_f_next_value_ce1 = 1'd0;
wire          litespimmap_done;
reg    [31:0] litespimmap_dummy = 32'd57005;
reg    [29:0] litespimmap_offset = 30'd0;
reg           litespimmap_re = 1'd0;
wire          litespimmap_sink_first;
wire          litespimmap_sink_last;
wire   [31:0] litespimmap_sink_payload_data;
reg           litespimmap_sink_ready = 1'd0;
wire          litespimmap_sink_valid;
reg           litespimmap_source_first = 1'd0;
reg           litespimmap_source_last = 1'd0;
reg    [31:0] litespimmap_source_payload_data = 32'd0;
reg     [5:0] litespimmap_source_payload_len = 6'd0;
reg     [7:0] litespimmap_source_payload_mask = 8'd0;
reg     [3:0] litespimmap_source_payload_width = 4'd0;
wire          litespimmap_source_ready;
reg           litespimmap_source_valid = 1'd0;
wire    [7:0] litespimmap_spi_dummy_bits;
reg     [7:0] litespimmap_storage = 8'd8;
reg           litespimmap_wait = 1'd0;
reg           litespimmap_write = 1'd0;
wire          litespimmap_write_enabled;
reg           litespimmap_write_litespi_t_t_next_value = 1'd0;
reg           litespimmap_write_litespi_t_t_next_value_ce = 1'd0;
reg     [3:0] litespimmap_write_mask = 4'd0;
reg     [3:0] litespimmap_write_mask_litespi_t_f_next_value0 = 4'd0;
reg           litespimmap_write_mask_litespi_t_f_next_value_ce0 = 1'd0;
reg     [1:0] litespiphy_next_state = 2'd0;
reg     [1:0] litespiphy_state = 2'd0;
reg           litespisdrphycore0 = 1'd0;
reg     [1:0] litespisdrphycore1 = 2'd0;
reg     [3:0] litespisdrphycore2 = 4'd0;
reg     [7:0] litespisdrphycore3 = 8'd0;
reg           litespisdrphycore_clk = 1'd0;
reg     [7:0] litespisdrphycore_cnt = 8'd0;
reg     [3:0] litespisdrphycore_count = 4'd11;
wire          litespisdrphycore_cs;
wire          litespisdrphycore_cs_enable;
wire    [7:0] litespisdrphycore_div;
wire          litespisdrphycore_done;
reg     [3:0] litespisdrphycore_dq_i = 4'd0;
reg     [3:0] litespisdrphycore_dq_o = 4'd0;
wire    [3:0] litespisdrphycore_dq_oe;
reg           litespisdrphycore_en = 1'd0;
reg           litespisdrphycore_en_int = 1'd0;
wire          litespisdrphycore_negedge;
wire          litespisdrphycore_posedge;
reg           litespisdrphycore_posedge_reg = 1'd0;
reg           litespisdrphycore_posedge_reg2 = 1'd0;
reg           litespisdrphycore_re = 1'd0;
wire          litespisdrphycore_sample;
wire    [7:0] litespisdrphycore_sample_cnt;
wire          litespisdrphycore_sink_first;
wire          litespisdrphycore_sink_last;
wire   [31:0] litespisdrphycore_sink_payload_data;
wire    [5:0] litespisdrphycore_sink_payload_len;
wire    [7:0] litespisdrphycore_sink_payload_mask;
wire    [3:0] litespisdrphycore_sink_payload_width;
reg           litespisdrphycore_sink_ready = 1'd0;
wire          litespisdrphycore_sink_valid;
reg           litespisdrphycore_source_first = 1'd0;
reg           litespisdrphycore_source_last = 1'd0;
wire   [31:0] litespisdrphycore_source_payload_data;
wire          litespisdrphycore_source_ready;
reg           litespisdrphycore_source_valid = 1'd0;
wire    [7:0] litespisdrphycore_spi_clk_divisor;
reg     [7:0] litespisdrphycore_sr_cnt = 8'd0;
reg     [7:0] litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
reg           litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
reg    [31:0] litespisdrphycore_sr_in = 32'd0;
reg           litespisdrphycore_sr_in_shift = 1'd0;
reg    [31:0] litespisdrphycore_sr_out = 32'd0;
reg           litespisdrphycore_sr_out_load = 1'd0;
reg           litespisdrphycore_sr_out_shift = 1'd0;
reg     [7:0] litespisdrphycore_storage = 8'd0;
wire          litespisdrphycore_update;
wire    [7:0] litespisdrphycore_update_cnt;
wire          litespisdrphycore_wait;
reg           main_ram_bus_ack = 1'd0;
wire   [29:0] main_ram_bus_adr;
wire    [1:0] main_ram_bus_bte;
wire    [2:0] main_ram_bus_cti;
wire          main_ram_bus_cyc;
reg    [31:0] main_ram_bus_dat_r = 32'd0;
wire   [31:0] main_ram_bus_dat_w;
reg           main_ram_bus_err = 1'd0;
wire    [3:0] main_ram_bus_sel;
wire          main_ram_bus_stb;
wire          main_ram_bus_we;
reg           main_ram_cs = 1'd0;
wire   [31:0] main_ram_datain;
wire   [31:0] main_ram_dataout;
reg           main_ram_wren = 1'd0;
reg           mainsoc_bus_error = 1'd0;
reg    [31:0] mainsoc_bus_errors = 32'd0;
reg           mainsoc_bus_errors_re = 1'd0;
wire   [31:0] mainsoc_bus_errors_status;
wire          mainsoc_bus_errors_we;
wire          mainsoc_cpu_rst;
wire          mainsoc_dbus_ack;
wire   [29:0] mainsoc_dbus_adr;
wire    [1:0] mainsoc_dbus_bte;
wire    [2:0] mainsoc_dbus_cti;
wire          mainsoc_dbus_cyc;
wire   [31:0] mainsoc_dbus_dat_r;
wire   [31:0] mainsoc_dbus_dat_w;
wire          mainsoc_dbus_err;
wire    [3:0] mainsoc_dbus_sel;
wire          mainsoc_dbus_stb;
wire          mainsoc_dbus_we;
wire          mainsoc_ibus_ack;
wire   [29:0] mainsoc_ibus_adr;
wire    [1:0] mainsoc_ibus_bte;
wire    [2:0] mainsoc_ibus_cti;
wire          mainsoc_ibus_cyc;
wire   [31:0] mainsoc_ibus_dat_r;
wire   [31:0] mainsoc_ibus_dat_w;
wire          mainsoc_ibus_err;
wire    [3:0] mainsoc_ibus_sel;
wire          mainsoc_ibus_stb;
wire          mainsoc_ibus_we;
reg    [31:0] mainsoc_interrupt = 32'd0;
wire          mainsoc_reset;
reg           mainsoc_reset_re = 1'd0;
reg     [1:0] mainsoc_reset_storage = 2'd0;
reg     [3:0] mainsoc_rx_count = 4'd0;
reg     [3:0] mainsoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           mainsoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] mainsoc_rx_data = 8'd0;
reg     [7:0] mainsoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           mainsoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           mainsoc_rx_enable = 1'd0;
reg    [31:0] mainsoc_rx_phase = 32'd0;
wire          mainsoc_rx_rx;
reg           mainsoc_rx_rx_d = 1'd0;
reg           mainsoc_rx_source_first = 1'd0;
reg           mainsoc_rx_source_last = 1'd0;
reg     [7:0] mainsoc_rx_source_payload_data = 8'd0;
wire          mainsoc_rx_source_ready;
reg           mainsoc_rx_source_valid = 1'd0;
reg           mainsoc_rx_tick = 1'd0;
reg           mainsoc_scratch_re = 1'd0;
reg    [31:0] mainsoc_scratch_storage = 32'd305419896;
reg           mainsoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           mainsoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           mainsoc_soc_rst = 1'd0;
reg           mainsoc_timer_en_re = 1'd0;
reg           mainsoc_timer_en_storage = 1'd0;
reg           mainsoc_timer_enable_re = 1'd0;
reg           mainsoc_timer_enable_storage = 1'd0;
wire          mainsoc_timer_irq;
reg           mainsoc_timer_load_re = 1'd0;
reg    [31:0] mainsoc_timer_load_storage = 32'd0;
reg           mainsoc_timer_pending_r = 1'd0;
reg           mainsoc_timer_pending_re = 1'd0;
reg           mainsoc_timer_pending_status = 1'd0;
wire          mainsoc_timer_pending_we;
reg           mainsoc_timer_reload_re = 1'd0;
reg    [31:0] mainsoc_timer_reload_storage = 32'd0;
reg           mainsoc_timer_status_re = 1'd0;
reg           mainsoc_timer_status_status = 1'd0;
wire          mainsoc_timer_status_we;
reg           mainsoc_timer_update_value_re = 1'd0;
reg           mainsoc_timer_update_value_storage = 1'd0;
reg    [31:0] mainsoc_timer_value = 32'd0;
reg           mainsoc_timer_value_re = 1'd0;
reg    [31:0] mainsoc_timer_value_status = 32'd0;
wire          mainsoc_timer_value_we;
wire          mainsoc_timer_zero0;
wire          mainsoc_timer_zero1;
wire          mainsoc_timer_zero2;
reg           mainsoc_timer_zero_clear = 1'd0;
reg           mainsoc_timer_zero_pending = 1'd0;
wire          mainsoc_timer_zero_status;
wire          mainsoc_timer_zero_trigger;
reg           mainsoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] mainsoc_tx_count = 4'd0;
reg     [3:0] mainsoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           mainsoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] mainsoc_tx_data = 8'd0;
reg     [7:0] mainsoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           mainsoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           mainsoc_tx_enable = 1'd0;
reg    [31:0] mainsoc_tx_phase = 32'd0;
wire          mainsoc_tx_sink_first;
wire          mainsoc_tx_sink_last;
wire    [7:0] mainsoc_tx_sink_payload_data;
reg           mainsoc_tx_sink_ready = 1'd0;
wire          mainsoc_tx_sink_valid;
reg           mainsoc_tx_tick = 1'd0;
reg           mainsoc_uart_enable_re = 1'd0;
reg     [1:0] mainsoc_uart_enable_storage = 2'd0;
wire          mainsoc_uart_irq;
reg     [1:0] mainsoc_uart_pending_r = 2'd0;
reg           mainsoc_uart_pending_re = 1'd0;
reg     [1:0] mainsoc_uart_pending_status = 2'd0;
wire          mainsoc_uart_pending_we;
wire          mainsoc_uart_rx0;
wire          mainsoc_uart_rx1;
wire          mainsoc_uart_rx2;
reg           mainsoc_uart_rx_clear = 1'd0;
reg     [3:0] mainsoc_uart_rx_fifo_consume = 4'd0;
wire          mainsoc_uart_rx_fifo_do_read;
wire          mainsoc_uart_rx_fifo_fifo_in_first;
wire          mainsoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] mainsoc_uart_rx_fifo_fifo_in_payload_data;
wire          mainsoc_uart_rx_fifo_fifo_out_first;
wire          mainsoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] mainsoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] mainsoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] mainsoc_uart_rx_fifo_level1;
reg     [3:0] mainsoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] mainsoc_uart_rx_fifo_rdport_adr;
wire    [9:0] mainsoc_uart_rx_fifo_rdport_dat_r;
wire          mainsoc_uart_rx_fifo_rdport_re;
wire          mainsoc_uart_rx_fifo_re;
reg           mainsoc_uart_rx_fifo_readable = 1'd0;
reg           mainsoc_uart_rx_fifo_replace = 1'd0;
wire          mainsoc_uart_rx_fifo_sink_first;
wire          mainsoc_uart_rx_fifo_sink_last;
wire    [7:0] mainsoc_uart_rx_fifo_sink_payload_data;
wire          mainsoc_uart_rx_fifo_sink_ready;
wire          mainsoc_uart_rx_fifo_sink_valid;
wire          mainsoc_uart_rx_fifo_source_first;
wire          mainsoc_uart_rx_fifo_source_last;
wire    [7:0] mainsoc_uart_rx_fifo_source_payload_data;
wire          mainsoc_uart_rx_fifo_source_ready;
wire          mainsoc_uart_rx_fifo_source_valid;
wire    [9:0] mainsoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] mainsoc_uart_rx_fifo_syncfifo_dout;
wire          mainsoc_uart_rx_fifo_syncfifo_re;
wire          mainsoc_uart_rx_fifo_syncfifo_readable;
wire          mainsoc_uart_rx_fifo_syncfifo_we;
wire          mainsoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] mainsoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] mainsoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] mainsoc_uart_rx_fifo_wrport_dat_w;
wire          mainsoc_uart_rx_fifo_wrport_we;
reg           mainsoc_uart_rx_pending = 1'd0;
wire          mainsoc_uart_rx_status;
wire          mainsoc_uart_rx_trigger;
reg           mainsoc_uart_rx_trigger_d = 1'd0;
reg           mainsoc_uart_rxempty_re = 1'd0;
wire          mainsoc_uart_rxempty_status;
wire          mainsoc_uart_rxempty_we;
reg           mainsoc_uart_rxfull_re = 1'd0;
wire          mainsoc_uart_rxfull_status;
wire          mainsoc_uart_rxfull_we;
wire    [7:0] mainsoc_uart_rxtx_r;
reg           mainsoc_uart_rxtx_re = 1'd0;
wire    [7:0] mainsoc_uart_rxtx_w;
reg           mainsoc_uart_rxtx_we = 1'd0;
reg           mainsoc_uart_status_re = 1'd0;
reg     [1:0] mainsoc_uart_status_status = 2'd0;
wire          mainsoc_uart_status_we;
wire          mainsoc_uart_tx0;
wire          mainsoc_uart_tx1;
wire          mainsoc_uart_tx2;
reg           mainsoc_uart_tx_clear = 1'd0;
reg     [3:0] mainsoc_uart_tx_fifo_consume = 4'd0;
wire          mainsoc_uart_tx_fifo_do_read;
wire          mainsoc_uart_tx_fifo_fifo_in_first;
wire          mainsoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] mainsoc_uart_tx_fifo_fifo_in_payload_data;
wire          mainsoc_uart_tx_fifo_fifo_out_first;
wire          mainsoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] mainsoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] mainsoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] mainsoc_uart_tx_fifo_level1;
reg     [3:0] mainsoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] mainsoc_uart_tx_fifo_rdport_adr;
wire    [9:0] mainsoc_uart_tx_fifo_rdport_dat_r;
wire          mainsoc_uart_tx_fifo_rdport_re;
wire          mainsoc_uart_tx_fifo_re;
reg           mainsoc_uart_tx_fifo_readable = 1'd0;
reg           mainsoc_uart_tx_fifo_replace = 1'd0;
reg           mainsoc_uart_tx_fifo_sink_first = 1'd0;
reg           mainsoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] mainsoc_uart_tx_fifo_sink_payload_data;
wire          mainsoc_uart_tx_fifo_sink_ready;
wire          mainsoc_uart_tx_fifo_sink_valid;
wire          mainsoc_uart_tx_fifo_source_first;
wire          mainsoc_uart_tx_fifo_source_last;
wire    [7:0] mainsoc_uart_tx_fifo_source_payload_data;
wire          mainsoc_uart_tx_fifo_source_ready;
wire          mainsoc_uart_tx_fifo_source_valid;
wire    [9:0] mainsoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] mainsoc_uart_tx_fifo_syncfifo_dout;
wire          mainsoc_uart_tx_fifo_syncfifo_re;
wire          mainsoc_uart_tx_fifo_syncfifo_readable;
wire          mainsoc_uart_tx_fifo_syncfifo_we;
wire          mainsoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] mainsoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] mainsoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] mainsoc_uart_tx_fifo_wrport_dat_w;
wire          mainsoc_uart_tx_fifo_wrport_we;
reg           mainsoc_uart_tx_pending = 1'd0;
wire          mainsoc_uart_tx_status;
wire          mainsoc_uart_tx_trigger;
reg           mainsoc_uart_tx_trigger_d = 1'd0;
reg           mainsoc_uart_txempty_re = 1'd0;
wire          mainsoc_uart_txempty_status;
wire          mainsoc_uart_txempty_we;
reg           mainsoc_uart_txfull_re = 1'd0;
wire          mainsoc_uart_txfull_status;
wire          mainsoc_uart_txfull_we;
wire          mainsoc_uart_uart_sink_first;
wire          mainsoc_uart_uart_sink_last;
wire    [7:0] mainsoc_uart_uart_sink_payload_data;
wire          mainsoc_uart_uart_sink_ready;
wire          mainsoc_uart_uart_sink_valid;
wire          mainsoc_uart_uart_source_first;
wire          mainsoc_uart_uart_source_last;
wire    [7:0] mainsoc_uart_uart_source_payload_data;
wire          mainsoc_uart_uart_source_ready;
wire          mainsoc_uart_uart_source_valid;
reg    [31:0] mainsoc_vexriscv = 32'd537919488;
wire          master_cs;
reg           master_cs_re = 1'd0;
reg           master_cs_storage = 1'd0;
wire    [7:0] master_len;
wire    [7:0] master_mask;
reg           master_phyconfig_re = 1'd0;
reg    [23:0] master_phyconfig_storage = 24'd0;
wire          master_rx_fifo_pipe_valid_sink_first;
wire          master_rx_fifo_pipe_valid_sink_last;
wire   [31:0] master_rx_fifo_pipe_valid_sink_payload_data;
wire          master_rx_fifo_pipe_valid_sink_ready;
wire          master_rx_fifo_pipe_valid_sink_valid;
reg           master_rx_fifo_pipe_valid_source_first = 1'd0;
reg           master_rx_fifo_pipe_valid_source_last = 1'd0;
reg    [31:0] master_rx_fifo_pipe_valid_source_payload_data = 32'd0;
wire          master_rx_fifo_pipe_valid_source_ready;
reg           master_rx_fifo_pipe_valid_source_valid = 1'd0;
wire          master_rx_fifo_sink_sink_first;
wire          master_rx_fifo_sink_sink_last;
wire   [31:0] master_rx_fifo_sink_sink_payload_data;
wire          master_rx_fifo_sink_sink_ready;
wire          master_rx_fifo_sink_sink_valid;
wire          master_rx_fifo_source_source_first;
wire          master_rx_fifo_source_source_last;
wire   [31:0] master_rx_fifo_source_source_payload_data;
wire          master_rx_fifo_source_source_ready;
wire          master_rx_fifo_source_source_valid;
wire          master_rx_ready;
wire   [31:0] master_rxtx_r;
reg           master_rxtx_re = 1'd0;
wire   [31:0] master_rxtx_w;
reg           master_rxtx_we = 1'd0;
wire          master_sink_first;
wire          master_sink_last;
wire   [31:0] master_sink_payload_data;
wire          master_sink_ready;
wire          master_sink_valid;
wire          master_source_first;
wire          master_source_last;
wire   [31:0] master_source_payload_data;
wire    [5:0] master_source_payload_len;
wire    [7:0] master_source_payload_mask;
wire    [3:0] master_source_payload_width;
wire          master_source_ready;
wire          master_source_valid;
reg           master_status_re = 1'd0;
reg     [1:0] master_status_status = 2'd0;
wire          master_status_we;
wire          master_tx_fifo_pipe_valid_sink_first;
wire          master_tx_fifo_pipe_valid_sink_last;
wire   [31:0] master_tx_fifo_pipe_valid_sink_payload_data;
wire    [5:0] master_tx_fifo_pipe_valid_sink_payload_len;
wire    [7:0] master_tx_fifo_pipe_valid_sink_payload_mask;
wire    [3:0] master_tx_fifo_pipe_valid_sink_payload_width;
wire          master_tx_fifo_pipe_valid_sink_ready;
wire          master_tx_fifo_pipe_valid_sink_valid;
reg           master_tx_fifo_pipe_valid_source_first = 1'd0;
reg           master_tx_fifo_pipe_valid_source_last = 1'd0;
reg    [31:0] master_tx_fifo_pipe_valid_source_payload_data = 32'd0;
reg     [5:0] master_tx_fifo_pipe_valid_source_payload_len = 6'd0;
reg     [7:0] master_tx_fifo_pipe_valid_source_payload_mask = 8'd0;
reg     [3:0] master_tx_fifo_pipe_valid_source_payload_width = 4'd0;
wire          master_tx_fifo_pipe_valid_source_ready;
reg           master_tx_fifo_pipe_valid_source_valid = 1'd0;
reg           master_tx_fifo_sink_sink_first = 1'd0;
wire          master_tx_fifo_sink_sink_last;
wire   [31:0] master_tx_fifo_sink_sink_payload_data;
wire    [5:0] master_tx_fifo_sink_sink_payload_len;
wire    [7:0] master_tx_fifo_sink_sink_payload_mask;
wire    [3:0] master_tx_fifo_sink_sink_payload_width;
wire          master_tx_fifo_sink_sink_ready;
wire          master_tx_fifo_sink_sink_valid;
wire          master_tx_fifo_source_source_first;
wire          master_tx_fifo_source_source_last;
wire   [31:0] master_tx_fifo_source_source_payload_data;
wire    [5:0] master_tx_fifo_source_source_payload_len;
wire    [7:0] master_tx_fifo_source_source_payload_mask;
wire    [3:0] master_tx_fifo_source_source_payload_width;
wire          master_tx_fifo_source_source_ready;
wire          master_tx_fifo_source_source_valid;
wire          master_tx_ready;
wire    [3:0] master_width;
wire          por_clk;
wire          port_bus_ack;
wire   [29:0] port_bus_adr;
wire    [1:0] port_bus_bte;
wire    [2:0] port_bus_cti;
wire          port_bus_cyc;
wire   [31:0] port_bus_dat_r;
wire   [31:0] port_bus_dat_w;
wire          port_bus_err;
wire    [3:0] port_bus_sel;
wire          port_bus_stb;
wire          port_bus_we;
wire          port_master_internal_port_sink_first;
wire          port_master_internal_port_sink_last;
wire   [31:0] port_master_internal_port_sink_payload_data;
wire    [5:0] port_master_internal_port_sink_payload_len;
wire    [7:0] port_master_internal_port_sink_payload_mask;
wire    [3:0] port_master_internal_port_sink_payload_width;
wire          port_master_internal_port_sink_ready;
wire          port_master_internal_port_sink_valid;
wire          port_master_internal_port_source_first;
wire          port_master_internal_port_source_last;
wire   [31:0] port_master_internal_port_source_payload_data;
wire          port_master_internal_port_source_ready;
wire          port_master_internal_port_source_valid;
wire          port_master_request;
wire          port_master_user_port_sink_first;
wire          port_master_user_port_sink_last;
wire   [31:0] port_master_user_port_sink_payload_data;
wire    [5:0] port_master_user_port_sink_payload_len;
wire    [7:0] port_master_user_port_sink_payload_mask;
wire    [3:0] port_master_user_port_sink_payload_width;
wire          port_master_user_port_sink_ready;
wire          port_master_user_port_sink_valid;
wire          port_master_user_port_source_first;
wire          port_master_user_port_source_last;
wire   [31:0] port_master_user_port_source_payload_data;
wire          port_master_user_port_source_ready;
wire          port_master_user_port_source_valid;
wire          port_mmap_internal_port_sink_first;
wire          port_mmap_internal_port_sink_last;
wire   [31:0] port_mmap_internal_port_sink_payload_data;
wire    [5:0] port_mmap_internal_port_sink_payload_len;
wire    [7:0] port_mmap_internal_port_sink_payload_mask;
wire    [3:0] port_mmap_internal_port_sink_payload_width;
wire          port_mmap_internal_port_sink_ready;
wire          port_mmap_internal_port_sink_valid;
wire          port_mmap_internal_port_source_first;
wire          port_mmap_internal_port_source_last;
wire   [31:0] port_mmap_internal_port_source_payload_data;
wire          port_mmap_internal_port_source_ready;
wire          port_mmap_internal_port_source_valid;
wire          port_mmap_request;
wire          port_mmap_user_port_sink_first;
wire          port_mmap_user_port_sink_last;
wire   [31:0] port_mmap_user_port_sink_payload_data;
wire    [5:0] port_mmap_user_port_sink_payload_len;
wire    [7:0] port_mmap_user_port_sink_payload_mask;
wire    [3:0] port_mmap_user_port_sink_payload_width;
wire          port_mmap_user_port_sink_ready;
wire          port_mmap_user_port_sink_valid;
wire          port_mmap_user_port_source_first;
wire          port_mmap_user_port_source_last;
wire   [31:0] port_mmap_user_port_source_payload_data;
wire          port_mmap_user_port_source_ready;
wire          port_mmap_user_port_source_valid;
wire          re;
reg           regs0 = 1'd0;
reg           regs1 = 1'd0;
reg           rs232phyrx_next_state = 1'd0;
reg           rs232phyrx_state = 1'd0;
reg           rs232phytx_next_state = 1'd0;
reg           rs232phytx_state = 1'd0;
wire          sdrio_clk;
wire          sdrio_clk_1;
wire          sdrio_clk_10;
wire          sdrio_clk_11;
wire          sdrio_clk_12;
wire          sdrio_clk_2;
wire          sdrio_clk_3;
wire          sdrio_clk_4;
wire          sdrio_clk_5;
wire          sdrio_clk_6;
wire          sdrio_clk_7;
wire          sdrio_clk_8;
wire          sdrio_clk_9;
wire          sys_clk_1;
wire          sys_rst_1;
reg    [63:0] uptime_cycles = 64'd0;
reg           uptime_cycles_re = 1'd0;
reg    [63:0] uptime_cycles_status = 64'd0;
wire          uptime_cycles_we;
reg           uptime_latch_re = 1'd0;
reg           uptime_latch_storage = 1'd0;
reg           usb23_clear = 1'd0;
reg           usb23_enable_re = 1'd0;
reg           usb23_enable_storage = 1'd0;
wire          usb23_irq;
reg           usb23_pending = 1'd0;
reg           usb23_pending_r = 1'd0;
reg           usb23_pending_re = 1'd0;
reg           usb23_pending_status = 1'd0;
wire          usb23_pending_we;
wire          usb23_status;
reg           usb23_status_re = 1'd0;
reg           usb23_status_status = 1'd0;
wire          usb23_status_we;
wire          usb23_trigger;
reg           usb23_trigger_d = 1'd0;
wire          usb23_usb0;
wire          usb23_usb1;
wire          usb23_usb2;
wire          we;
reg           wishbone2csr_next_state = 1'd0;
reg           wishbone2csr_state = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign mainsoc_reset = (mainsoc_soc_rst | mainsoc_cpu_rst);
always @(*) begin
    mainsoc_interrupt <= 32'd0;
    mainsoc_interrupt[3] <= (i2c0_i2c_int_trigger | i2c0_txrx_done_trigger);
    mainsoc_interrupt[5] <= framectl_irq;
    mainsoc_interrupt[1] <= mainsoc_timer_irq;
    mainsoc_interrupt[2] <= mainsoc_uart_irq;
    mainsoc_interrupt[0] <= usb23_irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst_1 = int_rst;
always @(*) begin
    decoder0_slave_sel <= 4'd0;
    decoder0_slave_sel[0] <= (mainsoc_ibus_adr[29:22] == 6'd32);
    decoder0_slave_sel[1] <= (mainsoc_ibus_adr[29:14] == 15'd16384);
    decoder0_slave_sel[2] <= (mainsoc_ibus_adr[29:26] == 4'd11);
    decoder0_slave_sel[3] <= (mainsoc_ibus_adr[29:14] == 16'd57344);
end
assign interface0_adr1 = mainsoc_ibus_adr;
assign interface0_dat_w1 = mainsoc_ibus_dat_w;
assign interface0_sel1 = mainsoc_ibus_sel;
assign interface0_stb1 = mainsoc_ibus_stb;
assign interface0_we1 = mainsoc_ibus_we;
assign interface0_cti1 = mainsoc_ibus_cti;
assign interface0_bte1 = mainsoc_ibus_bte;
assign interface1_adr1 = mainsoc_ibus_adr;
assign interface1_dat_w1 = mainsoc_ibus_dat_w;
assign interface1_sel = mainsoc_ibus_sel;
assign interface1_stb = mainsoc_ibus_stb;
assign interface1_we1 = mainsoc_ibus_we;
assign interface1_cti = mainsoc_ibus_cti;
assign interface1_bte = mainsoc_ibus_bte;
assign interface2_adr = mainsoc_ibus_adr;
assign interface2_dat_w = mainsoc_ibus_dat_w;
assign interface2_sel = mainsoc_ibus_sel;
assign interface2_stb = mainsoc_ibus_stb;
assign interface2_we = mainsoc_ibus_we;
assign interface2_cti = mainsoc_ibus_cti;
assign interface2_bte = mainsoc_ibus_bte;
assign interface3_adr = mainsoc_ibus_adr;
assign interface3_dat_w = mainsoc_ibus_dat_w;
assign interface3_sel = mainsoc_ibus_sel;
assign interface3_stb = mainsoc_ibus_stb;
assign interface3_we = mainsoc_ibus_we;
assign interface3_cti = mainsoc_ibus_cti;
assign interface3_bte = mainsoc_ibus_bte;
assign interface0_cyc1 = (mainsoc_ibus_cyc & decoder0_slave_sel[0]);
assign interface1_cyc = (mainsoc_ibus_cyc & decoder0_slave_sel[1]);
assign interface2_cyc = (mainsoc_ibus_cyc & decoder0_slave_sel[2]);
assign interface3_cyc = (mainsoc_ibus_cyc & decoder0_slave_sel[3]);
assign mainsoc_ibus_ack = (((interface0_ack1 | interface1_ack) | interface2_ack) | interface3_ack);
assign mainsoc_ibus_err = (((interface0_err1 | interface1_err) | interface2_err) | interface3_err);
assign mainsoc_ibus_dat_r = (((({32{decoder0_slave_sel_r[0]}} & interface0_dat_r1) | ({32{decoder0_slave_sel_r[1]}} & interface1_dat_r1)) | ({32{decoder0_slave_sel_r[2]}} & interface2_dat_r)) | ({32{decoder0_slave_sel_r[3]}} & interface3_dat_r));
always @(*) begin
    decoder1_slave_sel <= 4'd0;
    decoder1_slave_sel[0] <= (mainsoc_dbus_adr[29:22] == 6'd32);
    decoder1_slave_sel[1] <= (mainsoc_dbus_adr[29:14] == 15'd16384);
    decoder1_slave_sel[2] <= (mainsoc_dbus_adr[29:26] == 4'd11);
    decoder1_slave_sel[3] <= (mainsoc_dbus_adr[29:14] == 16'd57344);
end
assign interface4_adr = mainsoc_dbus_adr;
assign interface4_dat_w = mainsoc_dbus_dat_w;
assign interface4_sel = mainsoc_dbus_sel;
assign interface4_stb = mainsoc_dbus_stb;
assign interface4_we = mainsoc_dbus_we;
assign interface4_cti = mainsoc_dbus_cti;
assign interface4_bte = mainsoc_dbus_bte;
assign interface5_adr = mainsoc_dbus_adr;
assign interface5_dat_w = mainsoc_dbus_dat_w;
assign interface5_sel = mainsoc_dbus_sel;
assign interface5_stb = mainsoc_dbus_stb;
assign interface5_we = mainsoc_dbus_we;
assign interface5_cti = mainsoc_dbus_cti;
assign interface5_bte = mainsoc_dbus_bte;
assign interface6_adr = mainsoc_dbus_adr;
assign interface6_dat_w = mainsoc_dbus_dat_w;
assign interface6_sel = mainsoc_dbus_sel;
assign interface6_stb = mainsoc_dbus_stb;
assign interface6_we = mainsoc_dbus_we;
assign interface6_cti = mainsoc_dbus_cti;
assign interface6_bte = mainsoc_dbus_bte;
assign interface7_adr = mainsoc_dbus_adr;
assign interface7_dat_w = mainsoc_dbus_dat_w;
assign interface7_sel = mainsoc_dbus_sel;
assign interface7_stb = mainsoc_dbus_stb;
assign interface7_we = mainsoc_dbus_we;
assign interface7_cti = mainsoc_dbus_cti;
assign interface7_bte = mainsoc_dbus_bte;
assign interface4_cyc = (mainsoc_dbus_cyc & decoder1_slave_sel[0]);
assign interface5_cyc = (mainsoc_dbus_cyc & decoder1_slave_sel[1]);
assign interface6_cyc = (mainsoc_dbus_cyc & decoder1_slave_sel[2]);
assign interface7_cyc = (mainsoc_dbus_cyc & decoder1_slave_sel[3]);
assign mainsoc_dbus_ack = (((interface4_ack | interface5_ack) | interface6_ack) | interface7_ack);
assign mainsoc_dbus_err = (((interface4_err | interface5_err) | interface6_err) | interface7_err);
assign mainsoc_dbus_dat_r = (((({32{decoder1_slave_sel_r[0]}} & interface4_dat_r) | ({32{decoder1_slave_sel_r[1]}} & interface5_dat_r)) | ({32{decoder1_slave_sel_r[2]}} & interface6_dat_r)) | ({32{decoder1_slave_sel_r[3]}} & interface7_dat_r));
assign litespimmap_bus_adr = array_muxed0;
assign litespimmap_bus_dat_w = array_muxed1;
assign litespimmap_bus_sel = array_muxed2;
assign litespimmap_bus_cyc = array_muxed3;
assign litespimmap_bus_stb = array_muxed4;
assign litespimmap_bus_we = array_muxed5;
assign litespimmap_bus_cti = array_muxed6;
assign litespimmap_bus_bte = array_muxed7;
assign interface0_dat_r1 = litespimmap_bus_dat_r;
assign interface4_dat_r = litespimmap_bus_dat_r;
assign interface0_ack1 = (litespimmap_bus_ack & (arbiter0_grant == 1'd0));
assign interface4_ack = (litespimmap_bus_ack & (arbiter0_grant == 1'd1));
assign interface0_err1 = (litespimmap_bus_err & (arbiter0_grant == 1'd0));
assign interface4_err = (litespimmap_bus_err & (arbiter0_grant == 1'd1));
assign arbiter0_request = {interface4_cyc, interface0_cyc1};
assign main_ram_bus_adr = array_muxed8;
assign main_ram_bus_dat_w = array_muxed9;
assign main_ram_bus_sel = array_muxed10;
assign main_ram_bus_cyc = array_muxed11;
assign main_ram_bus_stb = array_muxed12;
assign main_ram_bus_we = array_muxed13;
assign main_ram_bus_cti = array_muxed14;
assign main_ram_bus_bte = array_muxed15;
assign interface1_dat_r1 = main_ram_bus_dat_r;
assign interface5_dat_r = main_ram_bus_dat_r;
assign interface1_ack = (main_ram_bus_ack & (arbiter1_grant == 1'd0));
assign interface5_ack = (main_ram_bus_ack & (arbiter1_grant == 1'd1));
assign interface1_err = (main_ram_bus_err & (arbiter1_grant == 1'd0));
assign interface5_err = (main_ram_bus_err & (arbiter1_grant == 1'd1));
assign arbiter1_request = {interface5_cyc, interface1_cyc};
assign port_bus_adr = array_muxed16;
assign port_bus_dat_w = array_muxed17;
assign port_bus_sel = array_muxed18;
assign port_bus_cyc = array_muxed19;
assign port_bus_stb = array_muxed20;
assign port_bus_we = array_muxed21;
assign port_bus_cti = array_muxed22;
assign port_bus_bte = array_muxed23;
assign interface2_dat_r = port_bus_dat_r;
assign interface6_dat_r = port_bus_dat_r;
assign interface2_ack = (port_bus_ack & (arbiter2_grant == 1'd0));
assign interface6_ack = (port_bus_ack & (arbiter2_grant == 1'd1));
assign interface2_err = (port_bus_err & (arbiter2_grant == 1'd0));
assign interface6_err = (port_bus_err & (arbiter2_grant == 1'd1));
assign arbiter2_request = {interface6_cyc, interface2_cyc};
assign interface0_adr0 = array_muxed24;
assign interface0_dat_w0 = array_muxed25;
assign interface0_sel0 = array_muxed26;
assign interface0_cyc0 = array_muxed27;
assign interface0_stb0 = array_muxed28;
assign interface0_we0 = array_muxed29;
assign interface0_cti0 = array_muxed30;
assign interface0_bte0 = array_muxed31;
assign interface3_dat_r = interface0_dat_r0;
assign interface7_dat_r = interface0_dat_r0;
assign interface3_ack = (interface0_ack0 & (arbiter3_grant == 1'd0));
assign interface7_ack = (interface0_ack0 & (arbiter3_grant == 1'd1));
assign interface3_err = (interface0_err0 & (arbiter3_grant == 1'd0));
assign interface7_err = (interface0_err0 & (arbiter3_grant == 1'd1));
assign arbiter3_request = {interface7_cyc, interface3_cyc};
assign mainsoc_bus_errors_status = mainsoc_bus_errors;
always @(*) begin
    mainsoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    mainsoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    mainsoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    mainsoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    mainsoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    mainsoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    mainsoc_tx_enable <= 1'd0;
    mainsoc_tx_sink_ready <= 1'd0;
    rs232phytx_next_state <= 1'd0;
    rs232phytx_next_state <= rs232phytx_state;
    case (rs232phytx_state)
        1'd1: begin
            mainsoc_tx_enable <= 1'd1;
            if (mainsoc_tx_tick) begin
                mainsoc_serial_tx_rs232phytx_next_value1 <= mainsoc_tx_data;
                mainsoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                mainsoc_tx_count_rs232phytx_next_value0 <= (mainsoc_tx_count + 1'd1);
                mainsoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                mainsoc_tx_data_rs232phytx_next_value2 <= {1'd1, mainsoc_tx_data[7:1]};
                mainsoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((mainsoc_tx_count == 4'd9)) begin
                    mainsoc_tx_sink_ready <= 1'd1;
                    rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            mainsoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            mainsoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            mainsoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            mainsoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (mainsoc_tx_sink_valid) begin
                mainsoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                mainsoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                mainsoc_tx_data_rs232phytx_next_value2 <= mainsoc_tx_sink_payload_data;
                mainsoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    mainsoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    mainsoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    mainsoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    mainsoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    mainsoc_rx_enable <= 1'd0;
    mainsoc_rx_source_payload_data <= 8'd0;
    mainsoc_rx_source_valid <= 1'd0;
    rs232phyrx_next_state <= 1'd0;
    rs232phyrx_next_state <= rs232phyrx_state;
    case (rs232phyrx_state)
        1'd1: begin
            mainsoc_rx_enable <= 1'd1;
            if (mainsoc_rx_tick) begin
                mainsoc_rx_count_rs232phyrx_next_value0 <= (mainsoc_rx_count + 1'd1);
                mainsoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                mainsoc_rx_data_rs232phyrx_next_value1 <= {mainsoc_rx_rx, mainsoc_rx_data[7:1]};
                mainsoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((mainsoc_rx_count == 4'd9)) begin
                    mainsoc_rx_source_valid <= (mainsoc_rx_rx == 1'd1);
                    mainsoc_rx_source_payload_data <= mainsoc_rx_data;
                    rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            mainsoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            mainsoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((mainsoc_rx_rx == 1'd0) & (mainsoc_rx_rx_d == 1'd1))) begin
                rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign mainsoc_uart_uart_sink_valid = mainsoc_rx_source_valid;
assign mainsoc_rx_source_ready = mainsoc_uart_uart_sink_ready;
assign mainsoc_uart_uart_sink_first = mainsoc_rx_source_first;
assign mainsoc_uart_uart_sink_last = mainsoc_rx_source_last;
assign mainsoc_uart_uart_sink_payload_data = mainsoc_rx_source_payload_data;
assign mainsoc_tx_sink_valid = mainsoc_uart_uart_source_valid;
assign mainsoc_uart_uart_source_ready = mainsoc_tx_sink_ready;
assign mainsoc_tx_sink_first = mainsoc_uart_uart_source_first;
assign mainsoc_tx_sink_last = mainsoc_uart_uart_source_last;
assign mainsoc_tx_sink_payload_data = mainsoc_uart_uart_source_payload_data;
assign mainsoc_uart_tx_fifo_sink_valid = mainsoc_uart_rxtx_re;
assign mainsoc_uart_tx_fifo_sink_payload_data = mainsoc_uart_rxtx_r;
assign mainsoc_uart_uart_source_valid = mainsoc_uart_tx_fifo_source_valid;
assign mainsoc_uart_tx_fifo_source_ready = mainsoc_uart_uart_source_ready;
assign mainsoc_uart_uart_source_first = mainsoc_uart_tx_fifo_source_first;
assign mainsoc_uart_uart_source_last = mainsoc_uart_tx_fifo_source_last;
assign mainsoc_uart_uart_source_payload_data = mainsoc_uart_tx_fifo_source_payload_data;
assign mainsoc_uart_txfull_status = (~mainsoc_uart_tx_fifo_sink_ready);
assign mainsoc_uart_txempty_status = (~mainsoc_uart_tx_fifo_source_valid);
assign mainsoc_uart_tx_trigger = mainsoc_uart_tx_fifo_sink_ready;
assign mainsoc_uart_rx_fifo_sink_valid = mainsoc_uart_uart_sink_valid;
assign mainsoc_uart_uart_sink_ready = mainsoc_uart_rx_fifo_sink_ready;
assign mainsoc_uart_rx_fifo_sink_first = mainsoc_uart_uart_sink_first;
assign mainsoc_uart_rx_fifo_sink_last = mainsoc_uart_uart_sink_last;
assign mainsoc_uart_rx_fifo_sink_payload_data = mainsoc_uart_uart_sink_payload_data;
assign mainsoc_uart_rxtx_w = mainsoc_uart_rx_fifo_source_payload_data;
assign mainsoc_uart_rx_fifo_source_ready = (mainsoc_uart_rx_clear | (1'd0 & mainsoc_uart_rxtx_we));
assign mainsoc_uart_rxempty_status = (~mainsoc_uart_rx_fifo_source_valid);
assign mainsoc_uart_rxfull_status = (~mainsoc_uart_rx_fifo_sink_ready);
assign mainsoc_uart_rx_trigger = mainsoc_uart_rx_fifo_source_valid;
assign mainsoc_uart_tx0 = mainsoc_uart_tx_status;
assign mainsoc_uart_tx1 = mainsoc_uart_tx_pending;
always @(*) begin
    mainsoc_uart_tx_clear <= 1'd0;
    if ((mainsoc_uart_pending_re & mainsoc_uart_pending_r[0])) begin
        mainsoc_uart_tx_clear <= 1'd1;
    end
end
assign mainsoc_uart_rx0 = mainsoc_uart_rx_status;
assign mainsoc_uart_rx1 = mainsoc_uart_rx_pending;
always @(*) begin
    mainsoc_uart_rx_clear <= 1'd0;
    if ((mainsoc_uart_pending_re & mainsoc_uart_pending_r[1])) begin
        mainsoc_uart_rx_clear <= 1'd1;
    end
end
assign mainsoc_uart_irq = ((mainsoc_uart_pending_status[0] & mainsoc_uart_enable_storage[0]) | (mainsoc_uart_pending_status[1] & mainsoc_uart_enable_storage[1]));
assign mainsoc_uart_tx_status = mainsoc_uart_tx_trigger;
assign mainsoc_uart_rx_status = mainsoc_uart_rx_trigger;
assign mainsoc_uart_tx_fifo_syncfifo_din = {mainsoc_uart_tx_fifo_fifo_in_last, mainsoc_uart_tx_fifo_fifo_in_first, mainsoc_uart_tx_fifo_fifo_in_payload_data};
assign {mainsoc_uart_tx_fifo_fifo_out_last, mainsoc_uart_tx_fifo_fifo_out_first, mainsoc_uart_tx_fifo_fifo_out_payload_data} = mainsoc_uart_tx_fifo_syncfifo_dout;
assign mainsoc_uart_tx_fifo_sink_ready = mainsoc_uart_tx_fifo_syncfifo_writable;
assign mainsoc_uart_tx_fifo_syncfifo_we = mainsoc_uart_tx_fifo_sink_valid;
assign mainsoc_uart_tx_fifo_fifo_in_first = mainsoc_uart_tx_fifo_sink_first;
assign mainsoc_uart_tx_fifo_fifo_in_last = mainsoc_uart_tx_fifo_sink_last;
assign mainsoc_uart_tx_fifo_fifo_in_payload_data = mainsoc_uart_tx_fifo_sink_payload_data;
assign mainsoc_uart_tx_fifo_source_valid = mainsoc_uart_tx_fifo_readable;
assign mainsoc_uart_tx_fifo_source_first = mainsoc_uart_tx_fifo_fifo_out_first;
assign mainsoc_uart_tx_fifo_source_last = mainsoc_uart_tx_fifo_fifo_out_last;
assign mainsoc_uart_tx_fifo_source_payload_data = mainsoc_uart_tx_fifo_fifo_out_payload_data;
assign mainsoc_uart_tx_fifo_re = mainsoc_uart_tx_fifo_source_ready;
assign mainsoc_uart_tx_fifo_syncfifo_re = (mainsoc_uart_tx_fifo_syncfifo_readable & ((~mainsoc_uart_tx_fifo_readable) | mainsoc_uart_tx_fifo_re));
assign mainsoc_uart_tx_fifo_level1 = (mainsoc_uart_tx_fifo_level0 + mainsoc_uart_tx_fifo_readable);
always @(*) begin
    mainsoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (mainsoc_uart_tx_fifo_replace) begin
        mainsoc_uart_tx_fifo_wrport_adr <= (mainsoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        mainsoc_uart_tx_fifo_wrport_adr <= mainsoc_uart_tx_fifo_produce;
    end
end
assign mainsoc_uart_tx_fifo_wrport_dat_w = mainsoc_uart_tx_fifo_syncfifo_din;
assign mainsoc_uart_tx_fifo_wrport_we = (mainsoc_uart_tx_fifo_syncfifo_we & (mainsoc_uart_tx_fifo_syncfifo_writable | mainsoc_uart_tx_fifo_replace));
assign mainsoc_uart_tx_fifo_do_read = (mainsoc_uart_tx_fifo_syncfifo_readable & mainsoc_uart_tx_fifo_syncfifo_re);
assign mainsoc_uart_tx_fifo_rdport_adr = mainsoc_uart_tx_fifo_consume;
assign mainsoc_uart_tx_fifo_syncfifo_dout = mainsoc_uart_tx_fifo_rdport_dat_r;
assign mainsoc_uart_tx_fifo_rdport_re = mainsoc_uart_tx_fifo_do_read;
assign mainsoc_uart_tx_fifo_syncfifo_writable = (mainsoc_uart_tx_fifo_level0 != 5'd16);
assign mainsoc_uart_tx_fifo_syncfifo_readable = (mainsoc_uart_tx_fifo_level0 != 1'd0);
assign mainsoc_uart_rx_fifo_syncfifo_din = {mainsoc_uart_rx_fifo_fifo_in_last, mainsoc_uart_rx_fifo_fifo_in_first, mainsoc_uart_rx_fifo_fifo_in_payload_data};
assign {mainsoc_uart_rx_fifo_fifo_out_last, mainsoc_uart_rx_fifo_fifo_out_first, mainsoc_uart_rx_fifo_fifo_out_payload_data} = mainsoc_uart_rx_fifo_syncfifo_dout;
assign mainsoc_uart_rx_fifo_sink_ready = mainsoc_uart_rx_fifo_syncfifo_writable;
assign mainsoc_uart_rx_fifo_syncfifo_we = mainsoc_uart_rx_fifo_sink_valid;
assign mainsoc_uart_rx_fifo_fifo_in_first = mainsoc_uart_rx_fifo_sink_first;
assign mainsoc_uart_rx_fifo_fifo_in_last = mainsoc_uart_rx_fifo_sink_last;
assign mainsoc_uart_rx_fifo_fifo_in_payload_data = mainsoc_uart_rx_fifo_sink_payload_data;
assign mainsoc_uart_rx_fifo_source_valid = mainsoc_uart_rx_fifo_readable;
assign mainsoc_uart_rx_fifo_source_first = mainsoc_uart_rx_fifo_fifo_out_first;
assign mainsoc_uart_rx_fifo_source_last = mainsoc_uart_rx_fifo_fifo_out_last;
assign mainsoc_uart_rx_fifo_source_payload_data = mainsoc_uart_rx_fifo_fifo_out_payload_data;
assign mainsoc_uart_rx_fifo_re = mainsoc_uart_rx_fifo_source_ready;
assign mainsoc_uart_rx_fifo_syncfifo_re = (mainsoc_uart_rx_fifo_syncfifo_readable & ((~mainsoc_uart_rx_fifo_readable) | mainsoc_uart_rx_fifo_re));
assign mainsoc_uart_rx_fifo_level1 = (mainsoc_uart_rx_fifo_level0 + mainsoc_uart_rx_fifo_readable);
always @(*) begin
    mainsoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (mainsoc_uart_rx_fifo_replace) begin
        mainsoc_uart_rx_fifo_wrport_adr <= (mainsoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        mainsoc_uart_rx_fifo_wrport_adr <= mainsoc_uart_rx_fifo_produce;
    end
end
assign mainsoc_uart_rx_fifo_wrport_dat_w = mainsoc_uart_rx_fifo_syncfifo_din;
assign mainsoc_uart_rx_fifo_wrport_we = (mainsoc_uart_rx_fifo_syncfifo_we & (mainsoc_uart_rx_fifo_syncfifo_writable | mainsoc_uart_rx_fifo_replace));
assign mainsoc_uart_rx_fifo_do_read = (mainsoc_uart_rx_fifo_syncfifo_readable & mainsoc_uart_rx_fifo_syncfifo_re);
assign mainsoc_uart_rx_fifo_rdport_adr = mainsoc_uart_rx_fifo_consume;
assign mainsoc_uart_rx_fifo_syncfifo_dout = mainsoc_uart_rx_fifo_rdport_dat_r;
assign mainsoc_uart_rx_fifo_rdport_re = mainsoc_uart_rx_fifo_do_read;
assign mainsoc_uart_rx_fifo_syncfifo_writable = (mainsoc_uart_rx_fifo_level0 != 5'd16);
assign mainsoc_uart_rx_fifo_syncfifo_readable = (mainsoc_uart_rx_fifo_level0 != 1'd0);
assign mainsoc_timer_zero_trigger = (mainsoc_timer_value == 1'd0);
assign mainsoc_timer_zero0 = mainsoc_timer_zero_status;
assign mainsoc_timer_zero1 = mainsoc_timer_zero_pending;
always @(*) begin
    mainsoc_timer_zero_clear <= 1'd0;
    if ((mainsoc_timer_pending_re & mainsoc_timer_pending_r)) begin
        mainsoc_timer_zero_clear <= 1'd1;
    end
end
assign mainsoc_timer_irq = (mainsoc_timer_pending_status & mainsoc_timer_enable_storage);
assign mainsoc_timer_zero_status = mainsoc_timer_zero_trigger;
assign i2c0_ena = i2c0_EN;
assign i2c0_int_ena = i2c0_IEN;
assign i2c0_start = i2c0_STA;
assign i2c0_stop = i2c0_STO;
assign i2c0_read = i2c0_RD;
assign i2c0_write = i2c0_WR;
assign i2c0_ack = i2c0_ACK;
assign i2c0_iack = i2c0_IACK;
assign i2c0_RxACK = i2c0_rxack;
assign i2c0_Busy = i2c0_busy;
assign i2c0_ArbLost = i2c0_arb_lost;
assign i2c0_TIP = i2c0_tip;
assign i2c0_IF = i2c0_intflag;
assign i2c0_sda_o0 = i2c0_sda_o1;
assign i2c0_sda_oe = (~i2c0_sda_oen);
assign i2c0_scl_o0 = i2c0_scl_o1;
assign i2c0_scl_oe = (~i2c0_scl_oen);
assign i2c0_scl_i1 = i2c0_scl_i0;
assign i2c0_sda_i1 = i2c0_sda_i0;
always @(*) begin
    i2c0_command_dat_w <= 8'd0;
    i2c0_command_we <= 1'd0;
    if ((i2c0_done | i2c0_i2c_al)) begin
        i2c0_command_we <= 1'd1;
        i2c0_command_dat_w <= 1'd0;
    end else begin
        i2c0_command_we <= 1'd0;
    end
end
assign i2c0_i2c_int_trigger = (i2c0_intflag & i2c0_int_ena);
assign i2c0_txrx_done_trigger = i2c0_tip;
assign i2c0_i2c_int0 = i2c0_i2c_int_status;
assign i2c0_i2c_int1 = i2c0_i2c_int_pending;
always @(*) begin
    i2c0_i2c_int_clear <= 1'd0;
    if ((i2c0_pending_re & i2c0_pending_r[0])) begin
        i2c0_i2c_int_clear <= 1'd1;
    end
end
assign i2c0_txrx_done0 = i2c0_txrx_done_status;
assign i2c0_txrx_done1 = i2c0_txrx_done_pending;
always @(*) begin
    i2c0_txrx_done_clear <= 1'd0;
    if ((i2c0_pending_re & i2c0_pending_r[1])) begin
        i2c0_txrx_done_clear <= 1'd1;
    end
end
assign i2c0_irq = ((i2c0_pending_status[0] & i2c0_enable_storage[0]) | (i2c0_pending_status[1] & i2c0_enable_storage[1]));
assign i2c0_i2c_int_status = 1'd0;
assign i2c0_txrx_done_status = i2c0_txrx_done_trigger;
assign litespisdrphycore_div = litespisdrphycore_spi_clk_divisor;
assign litespisdrphycore_sample_cnt = 1'd1;
assign litespisdrphycore_update_cnt = 1'd1;
assign litespisdrphycore_wait = litespisdrphycore_cs;
assign litespisdrphycore_cs_enable = litespisdrphycore_done;
assign spiflash4x_cs_n = (~litespisdrphycore_cs_enable);
assign litespisdrphycore_dq_oe = litespisdrphycore_sink_payload_mask;
always @(*) begin
    litespisdrphycore_dq_o <= 4'd0;
    case (litespisdrphycore_sink_payload_width)
        1'd1: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31];
        end
        2'd2: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31:30];
        end
        3'd4: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31:28];
        end
        4'd8: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31:24];
        end
    endcase
end
assign litespisdrphycore_source_payload_data = litespisdrphycore_sr_in;
assign litespisdrphycore_spi_clk_divisor = litespisdrphycore_storage;
assign litespisdrphycore_posedge = ((litespisdrphycore_en & (~litespisdrphycore_clk)) & (litespisdrphycore_cnt == litespisdrphycore_div));
assign litespisdrphycore_negedge = ((litespisdrphycore_en & litespisdrphycore_clk) & (litespisdrphycore_cnt == litespisdrphycore_div));
assign litespisdrphycore_sample = (litespisdrphycore_cnt == litespisdrphycore_sample_cnt);
assign litespisdrphycore_update = (litespisdrphycore_cnt == litespisdrphycore_update_cnt);
assign litespisdrphycore_done = (litespisdrphycore_count == 1'd0);
always @(*) begin
    litespiphy_next_state <= 2'd0;
    litespisdrphycore_en <= 1'd0;
    litespisdrphycore_sink_ready <= 1'd0;
    litespisdrphycore_source_last <= 1'd0;
    litespisdrphycore_source_valid <= 1'd0;
    litespisdrphycore_sr_cnt_litespiphy_next_value <= 8'd0;
    litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd0;
    litespisdrphycore_sr_in_shift <= 1'd0;
    litespisdrphycore_sr_out_load <= 1'd0;
    litespisdrphycore_sr_out_shift <= 1'd0;
    litespiphy_next_state <= litespiphy_state;
    case (litespiphy_state)
        1'd1: begin
            litespisdrphycore_en <= 1'd1;
            if (litespisdrphycore_posedge_reg2) begin
                litespisdrphycore_sr_in_shift <= 1'd1;
            end
            if (litespisdrphycore_negedge) begin
                litespisdrphycore_sr_out_shift <= 1'd1;
            end
            if (litespisdrphycore_negedge) begin
                litespisdrphycore_sr_cnt_litespiphy_next_value <= (litespisdrphycore_sr_cnt - litespisdrphycore_sink_payload_width);
                litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
                if ((litespisdrphycore_sr_cnt == 1'd0)) begin
                    litespiphy_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (((litespisdrphycore_spi_clk_divisor > 1'd0) | litespisdrphycore_posedge_reg2)) begin
                litespisdrphycore_sink_ready <= 1'd1;
                litespisdrphycore_sr_in_shift <= (litespisdrphycore_spi_clk_divisor == 1'd0);
                litespiphy_next_state <= 2'd3;
            end
        end
        2'd3: begin
            litespisdrphycore_source_valid <= 1'd1;
            litespisdrphycore_source_last <= 1'd1;
            if (litespisdrphycore_source_ready) begin
                litespiphy_next_state <= 1'd0;
            end
        end
        default: begin
            if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
                litespisdrphycore_sr_cnt_litespiphy_next_value <= (litespisdrphycore_sink_payload_len - litespisdrphycore_sink_payload_width);
                litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
                litespisdrphycore_sr_out_load <= 1'd1;
                litespiphy_next_state <= 1'd1;
            end
        end
    endcase
end
assign litespisdrphycore_cs = crossbar_cs;
assign litespimmap_sink_valid = port_mmap_user_port_source_valid;
assign port_mmap_user_port_source_ready = litespimmap_sink_ready;
assign litespimmap_sink_first = port_mmap_user_port_source_first;
assign litespimmap_sink_last = port_mmap_user_port_source_last;
assign litespimmap_sink_payload_data = port_mmap_user_port_source_payload_data;
assign port_mmap_user_port_sink_valid = litespimmap_source_valid;
assign litespimmap_source_ready = port_mmap_user_port_sink_ready;
assign port_mmap_user_port_sink_first = litespimmap_source_first;
assign port_mmap_user_port_sink_last = litespimmap_source_last;
assign port_mmap_user_port_sink_payload_data = litespimmap_source_payload_data;
assign port_mmap_user_port_sink_payload_len = litespimmap_source_payload_len;
assign port_mmap_user_port_sink_payload_width = litespimmap_source_payload_width;
assign port_mmap_user_port_sink_payload_mask = litespimmap_source_payload_mask;
assign master_sink_valid = port_master_user_port_source_valid;
assign port_master_user_port_source_ready = master_sink_ready;
assign master_sink_first = port_master_user_port_source_first;
assign master_sink_last = port_master_user_port_source_last;
assign master_sink_payload_data = port_master_user_port_source_payload_data;
assign port_master_user_port_sink_valid = master_source_valid;
assign master_source_ready = port_master_user_port_sink_ready;
assign port_master_user_port_sink_first = master_source_first;
assign port_master_user_port_sink_last = master_source_last;
assign port_master_user_port_sink_payload_data = master_source_payload_data;
assign port_master_user_port_sink_payload_len = master_source_payload_len;
assign port_master_user_port_sink_payload_width = master_source_payload_width;
assign port_master_user_port_sink_payload_mask = master_source_payload_mask;
assign litespisdrphycore_sink_valid = crossbar_source_valid;
assign crossbar_source_ready = litespisdrphycore_sink_ready;
assign litespisdrphycore_sink_first = crossbar_source_first;
assign litespisdrphycore_sink_last = crossbar_source_last;
assign litespisdrphycore_sink_payload_data = crossbar_source_payload_data;
assign litespisdrphycore_sink_payload_len = crossbar_source_payload_len;
assign litespisdrphycore_sink_payload_width = crossbar_source_payload_width;
assign litespisdrphycore_sink_payload_mask = crossbar_source_payload_mask;
assign crossbar_sink_valid = litespisdrphycore_source_valid;
assign litespisdrphycore_source_ready = crossbar_sink_ready;
assign crossbar_sink_first = litespisdrphycore_source_first;
assign crossbar_sink_last = litespisdrphycore_source_last;
assign crossbar_sink_payload_data = litespisdrphycore_source_payload_data;
assign port_mmap_internal_port_sink_valid = port_mmap_user_port_sink_valid;
assign port_mmap_user_port_sink_ready = port_mmap_internal_port_sink_ready;
assign port_mmap_internal_port_sink_first = port_mmap_user_port_sink_first;
assign port_mmap_internal_port_sink_last = port_mmap_user_port_sink_last;
assign port_mmap_internal_port_sink_payload_data = port_mmap_user_port_sink_payload_data;
assign port_mmap_internal_port_sink_payload_len = port_mmap_user_port_sink_payload_len;
assign port_mmap_internal_port_sink_payload_width = port_mmap_user_port_sink_payload_width;
assign port_mmap_internal_port_sink_payload_mask = port_mmap_user_port_sink_payload_mask;
assign port_mmap_user_port_source_valid = port_mmap_internal_port_source_valid;
assign port_mmap_internal_port_source_ready = port_mmap_user_port_source_ready;
assign port_mmap_user_port_source_first = port_mmap_internal_port_source_first;
assign port_mmap_user_port_source_last = port_mmap_internal_port_source_last;
assign port_mmap_user_port_source_payload_data = port_mmap_internal_port_source_payload_data;
assign port_mmap_request = litespimmap_cs;
assign port_master_internal_port_sink_valid = port_master_user_port_sink_valid;
assign port_master_user_port_sink_ready = port_master_internal_port_sink_ready;
assign port_master_internal_port_sink_first = port_master_user_port_sink_first;
assign port_master_internal_port_sink_last = port_master_user_port_sink_last;
assign port_master_internal_port_sink_payload_data = port_master_user_port_sink_payload_data;
assign port_master_internal_port_sink_payload_len = port_master_user_port_sink_payload_len;
assign port_master_internal_port_sink_payload_width = port_master_user_port_sink_payload_width;
assign port_master_internal_port_sink_payload_mask = port_master_user_port_sink_payload_mask;
assign port_master_user_port_source_valid = port_master_internal_port_source_valid;
assign port_master_internal_port_source_ready = port_master_user_port_source_ready;
assign port_master_user_port_source_first = port_master_internal_port_source_first;
assign port_master_user_port_source_last = port_master_internal_port_source_last;
assign port_master_user_port_source_payload_data = port_master_internal_port_source_payload_data;
assign port_master_request = master_cs;
assign litespi_tx_mux_endpoint0_sink_valid = port_mmap_internal_port_sink_valid;
assign port_mmap_internal_port_sink_ready = litespi_tx_mux_endpoint0_sink_ready;
assign litespi_tx_mux_endpoint0_sink_first = port_mmap_internal_port_sink_first;
assign litespi_tx_mux_endpoint0_sink_last = port_mmap_internal_port_sink_last;
assign litespi_tx_mux_endpoint0_sink_payload_data = port_mmap_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint0_sink_payload_len = port_mmap_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint0_sink_payload_width = port_mmap_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint0_sink_payload_mask = port_mmap_internal_port_sink_payload_mask;
assign port_mmap_internal_port_source_valid = litespi_rx_demux_endpoint0_source_valid;
assign litespi_rx_demux_endpoint0_source_ready = port_mmap_internal_port_source_ready;
assign port_mmap_internal_port_source_first = litespi_rx_demux_endpoint0_source_first;
assign port_mmap_internal_port_source_last = litespi_rx_demux_endpoint0_source_last;
assign port_mmap_internal_port_source_payload_data = litespi_rx_demux_endpoint0_source_payload_data;
assign litespi_tx_mux_endpoint1_sink_valid = port_master_internal_port_sink_valid;
assign port_master_internal_port_sink_ready = litespi_tx_mux_endpoint1_sink_ready;
assign litespi_tx_mux_endpoint1_sink_first = port_master_internal_port_sink_first;
assign litespi_tx_mux_endpoint1_sink_last = port_master_internal_port_sink_last;
assign litespi_tx_mux_endpoint1_sink_payload_data = port_master_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint1_sink_payload_len = port_master_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint1_sink_payload_width = port_master_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint1_sink_payload_mask = port_master_internal_port_sink_payload_mask;
assign port_master_internal_port_source_valid = litespi_rx_demux_endpoint1_source_valid;
assign litespi_rx_demux_endpoint1_source_ready = port_master_internal_port_source_ready;
assign port_master_internal_port_source_first = litespi_rx_demux_endpoint1_source_first;
assign port_master_internal_port_source_last = litespi_rx_demux_endpoint1_source_last;
assign port_master_internal_port_source_payload_data = litespi_rx_demux_endpoint1_source_payload_data;
assign litespi_request = {port_master_request, port_mmap_request};
assign crossbar_source_valid = litespi_tx_mux_source_valid;
assign litespi_tx_mux_source_ready = crossbar_source_ready;
assign crossbar_source_first = litespi_tx_mux_source_first;
assign crossbar_source_last = litespi_tx_mux_source_last;
assign crossbar_source_payload_data = litespi_tx_mux_source_payload_data;
assign crossbar_source_payload_len = litespi_tx_mux_source_payload_len;
assign crossbar_source_payload_width = litespi_tx_mux_source_payload_width;
assign crossbar_source_payload_mask = litespi_tx_mux_source_payload_mask;
assign litespi_tx_mux_sel = litespi_grant;
assign litespi_rx_demux_sink_valid = crossbar_sink_valid;
assign crossbar_sink_ready = litespi_rx_demux_sink_ready;
assign litespi_rx_demux_sink_first = crossbar_sink_first;
assign litespi_rx_demux_sink_last = crossbar_sink_last;
assign litespi_rx_demux_sink_payload_data = crossbar_sink_payload_data;
assign litespi_rx_demux_sel = litespi_grant;
always @(*) begin
    crossbar_cs <= 1'd0;
    case (litespi_grant)
        1'd0: begin
            crossbar_cs <= litespimmap_cs;
        end
        1'd1: begin
            crossbar_cs <= master_cs;
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_endpoint0_sink_ready <= 1'd0;
    litespi_tx_mux_endpoint1_sink_ready <= 1'd0;
    litespi_tx_mux_source_first <= 1'd0;
    litespi_tx_mux_source_last <= 1'd0;
    litespi_tx_mux_source_payload_data <= 32'd0;
    litespi_tx_mux_source_payload_len <= 6'd0;
    litespi_tx_mux_source_payload_mask <= 8'd0;
    litespi_tx_mux_source_payload_width <= 4'd0;
    litespi_tx_mux_source_valid <= 1'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_source_valid <= litespi_tx_mux_endpoint0_sink_valid;
            litespi_tx_mux_endpoint0_sink_ready <= litespi_tx_mux_source_ready;
            litespi_tx_mux_source_first <= litespi_tx_mux_endpoint0_sink_first;
            litespi_tx_mux_source_last <= litespi_tx_mux_endpoint0_sink_last;
            litespi_tx_mux_source_payload_data <= litespi_tx_mux_endpoint0_sink_payload_data;
            litespi_tx_mux_source_payload_len <= litespi_tx_mux_endpoint0_sink_payload_len;
            litespi_tx_mux_source_payload_width <= litespi_tx_mux_endpoint0_sink_payload_width;
            litespi_tx_mux_source_payload_mask <= litespi_tx_mux_endpoint0_sink_payload_mask;
        end
        1'd1: begin
            litespi_tx_mux_source_valid <= litespi_tx_mux_endpoint1_sink_valid;
            litespi_tx_mux_endpoint1_sink_ready <= litespi_tx_mux_source_ready;
            litespi_tx_mux_source_first <= litespi_tx_mux_endpoint1_sink_first;
            litespi_tx_mux_source_last <= litespi_tx_mux_endpoint1_sink_last;
            litespi_tx_mux_source_payload_data <= litespi_tx_mux_endpoint1_sink_payload_data;
            litespi_tx_mux_source_payload_len <= litespi_tx_mux_endpoint1_sink_payload_len;
            litespi_tx_mux_source_payload_width <= litespi_tx_mux_endpoint1_sink_payload_width;
            litespi_tx_mux_source_payload_mask <= litespi_tx_mux_endpoint1_sink_payload_mask;
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_endpoint0_source_first <= 1'd0;
    litespi_rx_demux_endpoint0_source_last <= 1'd0;
    litespi_rx_demux_endpoint0_source_payload_data <= 32'd0;
    litespi_rx_demux_endpoint0_source_valid <= 1'd0;
    litespi_rx_demux_endpoint1_source_first <= 1'd0;
    litespi_rx_demux_endpoint1_source_last <= 1'd0;
    litespi_rx_demux_endpoint1_source_payload_data <= 32'd0;
    litespi_rx_demux_endpoint1_source_valid <= 1'd0;
    litespi_rx_demux_sink_ready <= 1'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
            litespi_rx_demux_endpoint0_source_valid <= litespi_rx_demux_sink_valid;
            litespi_rx_demux_sink_ready <= litespi_rx_demux_endpoint0_source_ready;
            litespi_rx_demux_endpoint0_source_first <= litespi_rx_demux_sink_first;
            litespi_rx_demux_endpoint0_source_last <= litespi_rx_demux_sink_last;
            litespi_rx_demux_endpoint0_source_payload_data <= litespi_rx_demux_sink_payload_data;
        end
        1'd1: begin
            litespi_rx_demux_endpoint1_source_valid <= litespi_rx_demux_sink_valid;
            litespi_rx_demux_sink_ready <= litespi_rx_demux_endpoint1_source_ready;
            litespi_rx_demux_endpoint1_source_first <= litespi_rx_demux_sink_first;
            litespi_rx_demux_endpoint1_source_last <= litespi_rx_demux_sink_last;
            litespi_rx_demux_endpoint1_source_payload_data <= litespi_rx_demux_sink_payload_data;
        end
    endcase
end
assign litespimmap_spi_dummy_bits = litespimmap_storage;
assign litespimmap_write_enabled = 1'd0;
assign litespimmap_done = (litespimmap_count == 1'd0);
always @(*) begin
    litespi_next_state <= 4'd0;
    litespimmap_burst_adr_litespi_f_next_value <= 30'd0;
    litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd0;
    litespimmap_burst_cs_litespi_next_value <= 1'd0;
    litespimmap_burst_cs_litespi_next_value_ce <= 1'd0;
    litespimmap_bus_ack <= 1'd0;
    litespimmap_bus_dat_r <= 32'd0;
    litespimmap_byte_count_litespi_t_next_value <= 2'd0;
    litespimmap_byte_count_litespi_t_next_value_ce <= 1'd0;
    litespimmap_cs <= 1'd0;
    litespimmap_data_write_litespi_t_f_next_value1 <= 32'd0;
    litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd0;
    litespimmap_sink_ready <= 1'd0;
    litespimmap_source_last <= 1'd0;
    litespimmap_source_payload_data <= 32'd0;
    litespimmap_source_payload_len <= 6'd0;
    litespimmap_source_payload_mask <= 8'd0;
    litespimmap_source_payload_width <= 4'd0;
    litespimmap_source_valid <= 1'd0;
    litespimmap_wait <= 1'd0;
    litespimmap_write_litespi_t_t_next_value <= 1'd0;
    litespimmap_write_litespi_t_t_next_value_ce <= 1'd0;
    litespimmap_write_mask_litespi_t_f_next_value0 <= 4'd0;
    litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd0;
    litespi_next_state <= litespi_state;
    case (litespi_state)
        1'd1: begin
            litespimmap_cs <= 1'd0;
            if (litespimmap_write_mask[0]) begin
                litespi_next_state <= 2'd2;
                litespimmap_write_litespi_t_t_next_value <= 1'd1;
                litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
            end else begin
                if ((litespimmap_byte_count == 2'd3)) begin
                    litespimmap_bus_ack <= 1'd1;
                    litespimmap_burst_adr_litespi_f_next_value <= (litespimmap_burst_adr + 1'd1);
                    litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                    litespi_next_state <= 1'd0;
                    litespimmap_write_litespi_t_t_next_value <= 1'd0;
                    litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                end else begin
                    litespimmap_byte_count_litespi_t_next_value <= (litespimmap_byte_count + 1'd1);
                    litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                    litespimmap_write_mask_litespi_t_f_next_value0 <= {litespimmap0, litespimmap_write_mask[3:1]};
                    litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            litespimmap_cs <= 1'd1;
            litespimmap_source_valid <= 1'd1;
            if ((litespimmap_write_enabled & litespimmap_write)) begin
                litespimmap_source_payload_data <= 2'd2;
            end else begin
                litespimmap_source_payload_data <= 7'd107;
            end
            litespimmap_source_payload_len <= 4'd8;
            litespimmap_source_payload_width <= 1'd1;
            litespimmap_source_payload_mask <= 1'd1;
            litespimmap_burst_adr_litespi_f_next_value <= litespimmap_bus_adr;
            litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
            if (litespimmap_source_ready) begin
                litespi_next_state <= 2'd3;
            end
        end
        2'd3: begin
            litespimmap_cs <= 1'd1;
            litespimmap_sink_ready <= 1'd1;
            if (litespimmap_sink_valid) begin
                litespi_next_state <= 3'd4;
            end
        end
        3'd4: begin
            litespimmap_cs <= 1'd1;
            litespimmap_source_valid <= 1'd1;
            litespimmap_source_payload_width <= 1'd1;
            litespimmap_source_payload_mask <= 1'd1;
            litespimmap_source_payload_data <= {(litespimmap_bus_adr - litespimmap_offset), litespimmap_byte_count};
            litespimmap_source_payload_len <= 5'd24;
            litespimmap_burst_cs_litespi_next_value <= 1'd1;
            litespimmap_burst_cs_litespi_next_value_ce <= 1'd1;
            litespimmap_burst_adr_litespi_f_next_value <= litespimmap_bus_adr;
            litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
            if (litespimmap_source_ready) begin
                litespi_next_state <= 3'd5;
            end
        end
        3'd5: begin
            litespimmap_cs <= 1'd1;
            litespimmap_sink_ready <= 1'd1;
            if (litespimmap_sink_valid) begin
                if ((litespimmap_write_enabled & litespimmap_write)) begin
                    litespi_next_state <= 4'd10;
                end else begin
                    if ((litespimmap_spi_dummy_bits == 1'd0)) begin
                        litespi_next_state <= 4'd8;
                    end else begin
                        litespi_next_state <= 3'd6;
                    end
                end
            end
        end
        3'd6: begin
            litespimmap_cs <= 1'd1;
            litespimmap_source_valid <= 1'd1;
            litespimmap_source_payload_width <= 1'd1;
            litespimmap_source_payload_mask <= 1'd0;
            litespimmap_source_payload_data <= litespimmap_dummy;
            litespimmap_source_payload_len <= litespimmap_spi_dummy_bits;
            if (litespimmap_source_ready) begin
                litespi_next_state <= 3'd7;
            end
        end
        3'd7: begin
            litespimmap_cs <= 1'd1;
            litespimmap_sink_ready <= 1'd1;
            if (litespimmap_sink_valid) begin
                litespi_next_state <= 4'd8;
            end
        end
        4'd8: begin
            litespimmap_cs <= 1'd1;
            litespimmap_source_valid <= 1'd1;
            litespimmap_source_last <= 1'd1;
            litespimmap_source_payload_width <= 3'd4;
            litespimmap_source_payload_len <= 6'd32;
            litespimmap_source_payload_mask <= 1'd0;
            if (litespimmap_source_ready) begin
                litespi_next_state <= 4'd9;
            end
        end
        4'd9: begin
            litespimmap_cs <= 1'd1;
            litespimmap_sink_ready <= 1'd1;
            litespimmap_bus_dat_r <= {litespimmap_sink_payload_data[7:0], litespimmap_sink_payload_data[15:8], litespimmap_sink_payload_data[23:16], litespimmap_sink_payload_data[31:24]};
            if (litespimmap_sink_valid) begin
                litespimmap_bus_ack <= 1'd1;
                litespimmap_burst_adr_litespi_f_next_value <= (litespimmap_burst_adr + 1'd1);
                litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                litespi_next_state <= 1'd0;
            end
        end
        4'd10: begin
            litespimmap_cs <= 1'd1;
            litespimmap_source_valid <= 1'd1;
            litespimmap_source_payload_width <= 1'd1;
            litespimmap_source_payload_mask <= 4'd15;
            litespimmap_source_payload_data <= litespimmap_data_write;
            litespimmap_source_payload_len <= 4'd8;
            if (litespimmap_source_ready) begin
                litespi_next_state <= 4'd11;
            end
        end
        4'd11: begin
            litespimmap_cs <= 1'd1;
            litespimmap_sink_ready <= 1'd1;
            if (litespimmap_sink_valid) begin
                if ((litespimmap_byte_count != 2'd3)) begin
                    litespimmap_write_mask_litespi_t_f_next_value0 <= {litespimmap1, litespimmap_write_mask[3:1]};
                    litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                    litespimmap_byte_count_litespi_t_next_value <= (litespimmap_byte_count + 1'd1);
                    litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                    litespimmap_data_write_litespi_t_f_next_value1 <= (litespimmap_data_write >>> 4'd8);
                    litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd1;
                    if (litespimmap_write_mask[1]) begin
                        litespi_next_state <= 4'd10;
                    end else begin
                        litespimmap_cs <= 1'd0;
                        litespimmap_write_litespi_t_t_next_value <= 1'd0;
                        litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                        litespi_next_state <= 1'd1;
                    end
                end else begin
                    litespimmap_bus_ack <= 1'd1;
                    litespimmap_burst_adr_litespi_f_next_value <= (litespimmap_burst_adr + 1'd1);
                    litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                    litespi_next_state <= 1'd0;
                end
            end
        end
        default: begin
            litespimmap_wait <= 1'd1;
            litespimmap_burst_cs_litespi_next_value <= (litespimmap_burst_cs & (~litespimmap_done));
            litespimmap_burst_cs_litespi_next_value_ce <= 1'd1;
            litespimmap_cs <= litespimmap_burst_cs;
            if ((litespimmap_bus_cyc & litespimmap_bus_stb)) begin
                litespimmap_byte_count_litespi_t_next_value <= 1'd0;
                litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                if ((~litespimmap_bus_we)) begin
                    if (((litespimmap_burst_cs & (litespimmap_bus_adr == litespimmap_burst_adr)) & ((~litespimmap_write_enabled) | (~litespimmap_write)))) begin
                        litespi_next_state <= 4'd8;
                    end else begin
                        litespimmap_cs <= 1'd0;
                        litespi_next_state <= 2'd2;
                    end
                    litespimmap_write_litespi_t_t_next_value <= 1'd0;
                    litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                end else begin
                    if (litespimmap_write_enabled) begin
                        litespimmap_write_mask_litespi_t_f_next_value0 <= litespimmap_bus_sel;
                        litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                        litespimmap_data_write_litespi_t_f_next_value1 <= litespimmap_bus_dat_w;
                        litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd1;
                        if ((((litespimmap_burst_cs & (litespimmap_bus_adr == litespimmap_burst_adr)) & litespimmap_bus_sel[0]) & litespimmap_write)) begin
                            litespi_next_state <= 4'd10;
                        end else begin
                            litespimmap_cs <= 1'd0;
                            litespi_next_state <= 1'd1;
                        end
                        litespimmap_write_litespi_t_t_next_value <= 1'd1;
                        litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                    end
                end
            end
        end
    endcase
end
assign master_rx_fifo_sink_sink_valid = master_sink_valid;
assign master_sink_ready = master_rx_fifo_sink_sink_ready;
assign master_rx_fifo_sink_sink_first = master_sink_first;
assign master_rx_fifo_sink_sink_last = master_sink_last;
assign master_rx_fifo_sink_sink_payload_data = master_sink_payload_data;
assign master_source_valid = master_tx_fifo_source_source_valid;
assign master_tx_fifo_source_source_ready = master_source_ready;
assign master_source_first = master_tx_fifo_source_source_first;
assign master_source_last = master_tx_fifo_source_source_last;
assign master_source_payload_data = master_tx_fifo_source_source_payload_data;
assign master_source_payload_len = master_tx_fifo_source_source_payload_len;
assign master_source_payload_width = master_tx_fifo_source_source_payload_width;
assign master_source_payload_mask = master_tx_fifo_source_source_payload_mask;
assign master_cs = master_cs_storage;
assign master_tx_fifo_sink_sink_valid = master_rxtx_re;
assign master_tx_ready = master_tx_fifo_sink_sink_ready;
assign master_tx_fifo_sink_sink_payload_data = master_rxtx_r;
assign master_tx_fifo_sink_sink_payload_len = master_len;
assign master_tx_fifo_sink_sink_payload_width = master_width;
assign master_tx_fifo_sink_sink_payload_mask = master_mask;
assign master_tx_fifo_sink_sink_last = 1'd1;
assign master_rx_fifo_source_source_ready = master_rxtx_we;
assign master_rx_ready = master_rx_fifo_source_source_valid;
assign master_rxtx_w = master_rx_fifo_source_source_payload_data;
assign master_tx_fifo_pipe_valid_sink_ready = ((~master_tx_fifo_pipe_valid_source_valid) | master_tx_fifo_pipe_valid_source_ready);
assign master_tx_fifo_pipe_valid_sink_valid = master_tx_fifo_sink_sink_valid;
assign master_tx_fifo_sink_sink_ready = master_tx_fifo_pipe_valid_sink_ready;
assign master_tx_fifo_pipe_valid_sink_first = master_tx_fifo_sink_sink_first;
assign master_tx_fifo_pipe_valid_sink_last = master_tx_fifo_sink_sink_last;
assign master_tx_fifo_pipe_valid_sink_payload_data = master_tx_fifo_sink_sink_payload_data;
assign master_tx_fifo_pipe_valid_sink_payload_len = master_tx_fifo_sink_sink_payload_len;
assign master_tx_fifo_pipe_valid_sink_payload_width = master_tx_fifo_sink_sink_payload_width;
assign master_tx_fifo_pipe_valid_sink_payload_mask = master_tx_fifo_sink_sink_payload_mask;
assign master_tx_fifo_source_source_valid = master_tx_fifo_pipe_valid_source_valid;
assign master_tx_fifo_pipe_valid_source_ready = master_tx_fifo_source_source_ready;
assign master_tx_fifo_source_source_first = master_tx_fifo_pipe_valid_source_first;
assign master_tx_fifo_source_source_last = master_tx_fifo_pipe_valid_source_last;
assign master_tx_fifo_source_source_payload_data = master_tx_fifo_pipe_valid_source_payload_data;
assign master_tx_fifo_source_source_payload_len = master_tx_fifo_pipe_valid_source_payload_len;
assign master_tx_fifo_source_source_payload_width = master_tx_fifo_pipe_valid_source_payload_width;
assign master_tx_fifo_source_source_payload_mask = master_tx_fifo_pipe_valid_source_payload_mask;
assign master_rx_fifo_pipe_valid_sink_ready = ((~master_rx_fifo_pipe_valid_source_valid) | master_rx_fifo_pipe_valid_source_ready);
assign master_rx_fifo_pipe_valid_sink_valid = master_rx_fifo_sink_sink_valid;
assign master_rx_fifo_sink_sink_ready = master_rx_fifo_pipe_valid_sink_ready;
assign master_rx_fifo_pipe_valid_sink_first = master_rx_fifo_sink_sink_first;
assign master_rx_fifo_pipe_valid_sink_last = master_rx_fifo_sink_sink_last;
assign master_rx_fifo_pipe_valid_sink_payload_data = master_rx_fifo_sink_sink_payload_data;
assign master_rx_fifo_source_source_valid = master_rx_fifo_pipe_valid_source_valid;
assign master_rx_fifo_pipe_valid_source_ready = master_rx_fifo_source_source_ready;
assign master_rx_fifo_source_source_first = master_rx_fifo_pipe_valid_source_first;
assign master_rx_fifo_source_source_last = master_rx_fifo_pipe_valid_source_last;
assign master_rx_fifo_source_source_payload_data = master_rx_fifo_pipe_valid_source_payload_data;
assign main_ram_datain = main_ram_bus_dat_w[31:0];
always @(*) begin
    main_ram_bus_dat_r <= 32'd0;
    main_ram_cs <= 1'd0;
    main_ram_wren <= 1'd0;
    if ((main_ram_bus_adr[14] == 1'd0)) begin
        main_ram_cs <= 1'd1;
        main_ram_wren <= ((main_ram_bus_we & main_ram_bus_stb) & main_ram_bus_cyc);
        main_ram_bus_dat_r[31:0] <= main_ram_dataout;
    end
end
assign wishbone0_adr = port_bus_adr;
assign wishbone0_dat_w = port_bus_dat_w;
assign port_bus_dat_r = wishbone0_dat_r;
assign wishbone0_sel = port_bus_sel;
assign wishbone0_cyc = port_bus_cyc;
assign wishbone0_stb = port_bus_stb;
assign port_bus_ack = wishbone0_ack;
assign wishbone0_we = port_bus_we;
assign wishbone0_cti = port_bus_cti;
assign wishbone0_bte = port_bus_bte;
assign port_bus_err = wishbone0_err;
assign usb23_trigger = usb230_irq;
assign usb23_usb0 = usb23_status;
assign usb23_usb1 = usb23_pending;
always @(*) begin
    usb23_clear <= 1'd0;
    if ((usb23_pending_re & usb23_pending_r)) begin
        usb23_clear <= 1'd1;
    end
end
assign usb23_irq = (usb23_pending_status & usb23_enable_storage);
assign usb23_status = usb23_trigger;
assign framectl_trigger = framectl0_irq;
assign framectl_frame0 = framectl_status;
assign framectl_frame1 = framectl_pending;
always @(*) begin
    framectl_clear <= 1'd0;
    if ((framectl_pending_re & framectl_pending_r)) begin
        framectl_clear <= 1'd1;
    end
end
assign framectl_irq = (framectl_pending_status & framectl_enable_storage);
assign framectl_status = framectl_trigger;
always @(*) begin
    interface0_ack0 <= 1'd0;
    interface0_dat_r0 <= 32'd0;
    interface1_adr0 <= 14'd0;
    interface1_dat_w0 <= 32'd0;
    interface1_re <= 1'd0;
    interface1_we0 <= 1'd0;
    wishbone2csr_next_state <= 1'd0;
    wishbone2csr_next_state <= wishbone2csr_state;
    case (wishbone2csr_state)
        1'd1: begin
            interface0_ack0 <= 1'd1;
            interface0_dat_r0 <= interface1_dat_r0;
            wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            interface1_dat_w0 <= interface0_dat_w0;
            if ((interface0_cyc0 & interface0_stb0)) begin
                interface1_adr0 <= interface0_adr0[29:0];
                interface1_re <= ((~interface0_we0) & (interface0_sel0 != 1'd0));
                interface1_we0 <= (interface0_we0 & (interface0_sel0 != 1'd0));
                wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank0_reset0_re <= 1'd0;
    csrbank0_reset0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_reset0_re <= interface0_bank_bus_we;
        csrbank0_reset0_we <= interface0_bank_bus_re;
    end
end
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank0_scratch0_re <= 1'd0;
    csrbank0_scratch0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_scratch0_re <= interface0_bank_bus_we;
        csrbank0_scratch0_we <= interface0_bank_bus_re;
    end
end
assign csrbank0_bus_errors_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank0_bus_errors_re <= 1'd0;
    csrbank0_bus_errors_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank0_bus_errors_re <= interface0_bank_bus_we;
        csrbank0_bus_errors_we <= interface0_bank_bus_re;
    end
end
always @(*) begin
    mainsoc_soc_rst <= 1'd0;
    if (mainsoc_reset_re) begin
        mainsoc_soc_rst <= mainsoc_reset_storage[0];
    end
end
assign mainsoc_cpu_rst = mainsoc_reset_storage[1];
assign csrbank0_reset0_w = mainsoc_reset_storage[1:0];
assign csrbank0_scratch0_w = mainsoc_scratch_storage[31:0];
assign csrbank0_bus_errors_w = mainsoc_bus_errors_status[31:0];
assign mainsoc_bus_errors_we = csrbank0_bus_errors_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_ev_status_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_ev_status_re <= 1'd0;
    csrbank1_ev_status_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_ev_status_re <= interface1_bank_bus_we;
        csrbank1_ev_status_we <= interface1_bank_bus_re;
    end
end
assign csrbank1_ev_pending_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_ev_pending_re <= 1'd0;
    csrbank1_ev_pending_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_ev_pending_re <= interface1_bank_bus_we;
        csrbank1_ev_pending_we <= interface1_bank_bus_re;
    end
end
assign csrbank1_ev_enable0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_ev_enable0_re <= 1'd0;
    csrbank1_ev_enable0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank1_ev_enable0_re <= interface1_bank_bus_we;
        csrbank1_ev_enable0_we <= interface1_bank_bus_re;
    end
end
always @(*) begin
    framectl_status_status <= 1'd0;
    framectl_status_status <= framectl_frame0;
end
assign csrbank1_ev_status_w = framectl_status_status;
assign framectl_status_we = csrbank1_ev_status_we;
always @(*) begin
    framectl_pending_status <= 1'd0;
    framectl_pending_status <= framectl_frame1;
end
assign csrbank1_ev_pending_w = framectl_pending_status;
assign framectl_pending_we = csrbank1_ev_pending_we;
assign framectl_frame2 = framectl_enable_storage;
assign csrbank1_ev_enable0_w = framectl_enable_storage;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 4'd10);
assign csrbank2_prescale0_r = interface2_bank_bus_dat_w[15:0];
always @(*) begin
    csrbank2_prescale0_re <= 1'd0;
    csrbank2_prescale0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_prescale0_re <= interface2_bank_bus_we;
        csrbank2_prescale0_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_control0_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_control0_re <= 1'd0;
    csrbank2_control0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank2_control0_re <= interface2_bank_bus_we;
        csrbank2_control0_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_txr0_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_txr0_re <= 1'd0;
    csrbank2_txr0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank2_txr0_re <= interface2_bank_bus_we;
        csrbank2_txr0_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_rxr_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_rxr_re <= 1'd0;
    csrbank2_rxr_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank2_rxr_re <= interface2_bank_bus_we;
        csrbank2_rxr_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_command0_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_command0_re <= 1'd0;
    csrbank2_command0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank2_command0_re <= interface2_bank_bus_we;
        csrbank2_command0_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_status_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_status_re <= 1'd0;
    csrbank2_status_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank2_status_re <= interface2_bank_bus_we;
        csrbank2_status_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_core_reset0_r = interface2_bank_bus_dat_w[0];
always @(*) begin
    csrbank2_core_reset0_re <= 1'd0;
    csrbank2_core_reset0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank2_core_reset0_re <= interface2_bank_bus_we;
        csrbank2_core_reset0_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_ev_status_r = interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank2_ev_status_re <= 1'd0;
    csrbank2_ev_status_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank2_ev_status_re <= interface2_bank_bus_we;
        csrbank2_ev_status_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_ev_pending_r = interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank2_ev_pending_re <= 1'd0;
    csrbank2_ev_pending_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd8))) begin
        csrbank2_ev_pending_re <= interface2_bank_bus_we;
        csrbank2_ev_pending_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_ev_enable0_r = interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank2_ev_enable0_re <= 1'd0;
    csrbank2_ev_enable0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd9))) begin
        csrbank2_ev_enable0_re <= interface2_bank_bus_we;
        csrbank2_ev_enable0_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_prescale0_w = i2c0_prescale_storage[15:0];
assign i2c0_Resvd0 = i2c0_control_storage[5:0];
assign i2c0_IEN = i2c0_control_storage[6];
assign i2c0_EN = i2c0_control_storage[7];
assign csrbank2_control0_w = i2c0_control_storage[7:0];
assign csrbank2_txr0_w = i2c0_txr_storage[7:0];
assign csrbank2_rxr_w = i2c0_rxr_status[7:0];
assign i2c0_rxr_we = csrbank2_rxr_we;
always @(*) begin
    i2c0_IACK <= 1'd0;
    if (i2c0_command_re) begin
        i2c0_IACK <= i2c0_command_storage[0];
    end
end
assign i2c0_Resvd1 = i2c0_command_storage[2:1];
assign i2c0_ACK = i2c0_command_storage[3];
assign i2c0_WR = i2c0_command_storage[4];
assign i2c0_RD = i2c0_command_storage[5];
assign i2c0_STO = i2c0_command_storage[6];
assign i2c0_STA = i2c0_command_storage[7];
assign csrbank2_command0_w = i2c0_command_storage[7:0];
always @(*) begin
    i2c0_status_status0 <= 8'd0;
    i2c0_status_status0[0] <= i2c0_IF;
    i2c0_status_status0[1] <= i2c0_TIP;
    i2c0_status_status0[4:2] <= i2c0_Resvd2;
    i2c0_status_status0[5] <= i2c0_ArbLost;
    i2c0_status_status0[6] <= i2c0_Busy;
    i2c0_status_status0[7] <= i2c0_RxACK;
end
assign csrbank2_status_w = i2c0_status_status0[7:0];
assign i2c0_status_we0 = csrbank2_status_we;
always @(*) begin
    i2c0_reset <= 1'd0;
    if (i2c0_core_reset_re) begin
        i2c0_reset <= i2c0_core_reset_storage;
    end
end
assign csrbank2_core_reset0_w = i2c0_core_reset_storage;
always @(*) begin
    i2c0_status_status1 <= 2'd0;
    i2c0_status_status1[0] <= i2c0_i2c_int0;
    i2c0_status_status1[1] <= i2c0_txrx_done0;
end
assign csrbank2_ev_status_w = i2c0_status_status1[1:0];
assign i2c0_status_we1 = csrbank2_ev_status_we;
always @(*) begin
    i2c0_pending_status <= 2'd0;
    i2c0_pending_status[0] <= i2c0_i2c_int1;
    i2c0_pending_status[1] <= i2c0_txrx_done1;
end
assign csrbank2_ev_pending_w = i2c0_pending_status[1:0];
assign i2c0_pending_we = csrbank2_ev_pending_we;
assign i2c0_i2c_int2 = i2c0_enable_storage[0];
assign i2c0_txrx_done2 = i2c0_enable_storage[1];
assign csrbank2_ev_enable0_w = i2c0_enable_storage[1:0];
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 2'd2);
assign csrbank3_mmap_dummy_bits0_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank3_mmap_dummy_bits0_re <= 1'd0;
    csrbank3_mmap_dummy_bits0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank3_mmap_dummy_bits0_re <= interface3_bank_bus_we;
        csrbank3_mmap_dummy_bits0_we <= interface3_bank_bus_re;
    end
end
assign csrbank3_master_cs0_r = interface3_bank_bus_dat_w[0];
always @(*) begin
    csrbank3_master_cs0_re <= 1'd0;
    csrbank3_master_cs0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank3_master_cs0_re <= interface3_bank_bus_we;
        csrbank3_master_cs0_we <= interface3_bank_bus_re;
    end
end
assign csrbank3_master_phyconfig0_r = interface3_bank_bus_dat_w[23:0];
always @(*) begin
    csrbank3_master_phyconfig0_re <= 1'd0;
    csrbank3_master_phyconfig0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank3_master_phyconfig0_re <= interface3_bank_bus_we;
        csrbank3_master_phyconfig0_we <= interface3_bank_bus_re;
    end
end
assign master_rxtx_r = interface3_bank_bus_dat_w[31:0];
always @(*) begin
    master_rxtx_re <= 1'd0;
    master_rxtx_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
        master_rxtx_re <= interface3_bank_bus_we;
        master_rxtx_we <= interface3_bank_bus_re;
    end
end
assign csrbank3_master_status_r = interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank3_master_status_re <= 1'd0;
    csrbank3_master_status_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank3_master_status_re <= interface3_bank_bus_we;
        csrbank3_master_status_we <= interface3_bank_bus_re;
    end
end
assign csrbank3_mmap_dummy_bits0_w = litespimmap_storage[7:0];
assign csrbank3_master_cs0_w = master_cs_storage;
assign master_len = master_phyconfig_storage[7:0];
assign master_width = master_phyconfig_storage[11:8];
assign master_mask = master_phyconfig_storage[23:16];
assign csrbank3_master_phyconfig0_w = master_phyconfig_storage[23:0];
always @(*) begin
    master_status_status <= 2'd0;
    master_status_status[0] <= master_tx_ready;
    master_status_status[1] <= master_rx_ready;
end
assign csrbank3_master_status_w = master_status_status[1:0];
assign master_status_we = csrbank3_master_status_we;
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 4'd8);
assign csrbank4_clk_divisor0_r = interface4_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank4_clk_divisor0_re <= 1'd0;
    csrbank4_clk_divisor0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank4_clk_divisor0_re <= interface4_bank_bus_we;
        csrbank4_clk_divisor0_we <= interface4_bank_bus_re;
    end
end
assign csrbank4_clk_divisor0_w = litespisdrphycore_storage[7:0];
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 3'd5);
assign csrbank5_load0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_load0_re <= 1'd0;
    csrbank5_load0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank5_load0_re <= interface5_bank_bus_we;
        csrbank5_load0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_reload0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_reload0_re <= 1'd0;
    csrbank5_reload0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank5_reload0_re <= interface5_bank_bus_we;
        csrbank5_reload0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_en0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_en0_re <= 1'd0;
    csrbank5_en0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank5_en0_re <= interface5_bank_bus_we;
        csrbank5_en0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_update_value0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_update_value0_re <= 1'd0;
    csrbank5_update_value0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank5_update_value0_re <= interface5_bank_bus_we;
        csrbank5_update_value0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_value_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_value_re <= 1'd0;
    csrbank5_value_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank5_value_re <= interface5_bank_bus_we;
        csrbank5_value_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_ev_status_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_ev_status_re <= 1'd0;
    csrbank5_ev_status_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank5_ev_status_re <= interface5_bank_bus_we;
        csrbank5_ev_status_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_ev_pending_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_ev_pending_re <= 1'd0;
    csrbank5_ev_pending_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank5_ev_pending_re <= interface5_bank_bus_we;
        csrbank5_ev_pending_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_ev_enable0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_ev_enable0_re <= 1'd0;
    csrbank5_ev_enable0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank5_ev_enable0_re <= interface5_bank_bus_we;
        csrbank5_ev_enable0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_uptime_latch0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_uptime_latch0_re <= 1'd0;
    csrbank5_uptime_latch0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 4'd8))) begin
        csrbank5_uptime_latch0_re <= interface5_bank_bus_we;
        csrbank5_uptime_latch0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_uptime_cycles1_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_uptime_cycles1_re <= 1'd0;
    csrbank5_uptime_cycles1_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 4'd9))) begin
        csrbank5_uptime_cycles1_re <= interface5_bank_bus_we;
        csrbank5_uptime_cycles1_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_uptime_cycles0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_uptime_cycles0_re <= 1'd0;
    csrbank5_uptime_cycles0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 4'd10))) begin
        csrbank5_uptime_cycles0_re <= interface5_bank_bus_we;
        csrbank5_uptime_cycles0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_load0_w = mainsoc_timer_load_storage[31:0];
assign csrbank5_reload0_w = mainsoc_timer_reload_storage[31:0];
assign csrbank5_en0_w = mainsoc_timer_en_storage;
assign csrbank5_update_value0_w = mainsoc_timer_update_value_storage;
assign csrbank5_value_w = mainsoc_timer_value_status[31:0];
assign mainsoc_timer_value_we = csrbank5_value_we;
always @(*) begin
    mainsoc_timer_status_status <= 1'd0;
    mainsoc_timer_status_status <= mainsoc_timer_zero0;
end
assign csrbank5_ev_status_w = mainsoc_timer_status_status;
assign mainsoc_timer_status_we = csrbank5_ev_status_we;
always @(*) begin
    mainsoc_timer_pending_status <= 1'd0;
    mainsoc_timer_pending_status <= mainsoc_timer_zero1;
end
assign csrbank5_ev_pending_w = mainsoc_timer_pending_status;
assign mainsoc_timer_pending_we = csrbank5_ev_pending_we;
assign mainsoc_timer_zero2 = mainsoc_timer_enable_storage;
assign csrbank5_ev_enable0_w = mainsoc_timer_enable_storage;
assign csrbank5_uptime_latch0_w = uptime_latch_storage;
assign csrbank5_uptime_cycles1_w = uptime_cycles_status[63:32];
assign csrbank5_uptime_cycles0_w = uptime_cycles_status[31:0];
assign uptime_cycles_we = csrbank5_uptime_cycles0_we;
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 2'd3);
assign mainsoc_uart_rxtx_r = interface6_bank_bus_dat_w[7:0];
always @(*) begin
    mainsoc_uart_rxtx_re <= 1'd0;
    mainsoc_uart_rxtx_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
        mainsoc_uart_rxtx_re <= interface6_bank_bus_we;
        mainsoc_uart_rxtx_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_txfull_r = interface6_bank_bus_dat_w[0];
always @(*) begin
    csrbank6_txfull_re <= 1'd0;
    csrbank6_txfull_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank6_txfull_re <= interface6_bank_bus_we;
        csrbank6_txfull_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_rxempty_r = interface6_bank_bus_dat_w[0];
always @(*) begin
    csrbank6_rxempty_re <= 1'd0;
    csrbank6_rxempty_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank6_rxempty_re <= interface6_bank_bus_we;
        csrbank6_rxempty_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_ev_status_r = interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank6_ev_status_re <= 1'd0;
    csrbank6_ev_status_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank6_ev_status_re <= interface6_bank_bus_we;
        csrbank6_ev_status_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_ev_pending_r = interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank6_ev_pending_re <= 1'd0;
    csrbank6_ev_pending_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank6_ev_pending_re <= interface6_bank_bus_we;
        csrbank6_ev_pending_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_ev_enable0_r = interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank6_ev_enable0_re <= 1'd0;
    csrbank6_ev_enable0_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank6_ev_enable0_re <= interface6_bank_bus_we;
        csrbank6_ev_enable0_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_txempty_r = interface6_bank_bus_dat_w[0];
always @(*) begin
    csrbank6_txempty_re <= 1'd0;
    csrbank6_txempty_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank6_txempty_re <= interface6_bank_bus_we;
        csrbank6_txempty_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_rxfull_r = interface6_bank_bus_dat_w[0];
always @(*) begin
    csrbank6_rxfull_re <= 1'd0;
    csrbank6_rxfull_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank6_rxfull_re <= interface6_bank_bus_we;
        csrbank6_rxfull_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_txfull_w = mainsoc_uart_txfull_status;
assign mainsoc_uart_txfull_we = csrbank6_txfull_we;
assign csrbank6_rxempty_w = mainsoc_uart_rxempty_status;
assign mainsoc_uart_rxempty_we = csrbank6_rxempty_we;
always @(*) begin
    mainsoc_uart_status_status <= 2'd0;
    mainsoc_uart_status_status[0] <= mainsoc_uart_tx0;
    mainsoc_uart_status_status[1] <= mainsoc_uart_rx0;
end
assign csrbank6_ev_status_w = mainsoc_uart_status_status[1:0];
assign mainsoc_uart_status_we = csrbank6_ev_status_we;
always @(*) begin
    mainsoc_uart_pending_status <= 2'd0;
    mainsoc_uart_pending_status[0] <= mainsoc_uart_tx1;
    mainsoc_uart_pending_status[1] <= mainsoc_uart_rx1;
end
assign csrbank6_ev_pending_w = mainsoc_uart_pending_status[1:0];
assign mainsoc_uart_pending_we = csrbank6_ev_pending_we;
assign mainsoc_uart_tx2 = mainsoc_uart_enable_storage[0];
assign mainsoc_uart_rx2 = mainsoc_uart_enable_storage[1];
assign csrbank6_ev_enable0_w = mainsoc_uart_enable_storage[1:0];
assign csrbank6_txempty_w = mainsoc_uart_txempty_status;
assign mainsoc_uart_txempty_we = csrbank6_txempty_we;
assign csrbank6_rxfull_w = mainsoc_uart_rxfull_status;
assign mainsoc_uart_rxfull_we = csrbank6_rxfull_we;
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 4'd11);
assign csrbank7_ev_status_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_ev_status_re <= 1'd0;
    csrbank7_ev_status_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank7_ev_status_re <= interface7_bank_bus_we;
        csrbank7_ev_status_we <= interface7_bank_bus_re;
    end
end
assign csrbank7_ev_pending_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_ev_pending_re <= 1'd0;
    csrbank7_ev_pending_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank7_ev_pending_re <= interface7_bank_bus_we;
        csrbank7_ev_pending_we <= interface7_bank_bus_re;
    end
end
assign csrbank7_ev_enable0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_ev_enable0_re <= 1'd0;
    csrbank7_ev_enable0_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank7_ev_enable0_re <= interface7_bank_bus_we;
        csrbank7_ev_enable0_we <= interface7_bank_bus_re;
    end
end
always @(*) begin
    usb23_status_status <= 1'd0;
    usb23_status_status <= usb23_usb0;
end
assign csrbank7_ev_status_w = usb23_status_status;
assign usb23_status_we = csrbank7_ev_status_we;
always @(*) begin
    usb23_pending_status <= 1'd0;
    usb23_pending_status <= usb23_usb1;
end
assign csrbank7_ev_pending_w = usb23_pending_status;
assign usb23_pending_we = csrbank7_ev_pending_we;
assign usb23_usb2 = usb23_enable_storage;
assign csrbank7_ev_enable0_w = usb23_enable_storage;
assign adr = interface1_adr0;
assign re = interface1_re;
assign we = interface1_we0;
assign dat_w = interface1_dat_w0;
assign interface1_dat_r0 = dat_r;
assign interface0_bank_bus_adr = adr;
assign interface1_bank_bus_adr = adr;
assign interface2_bank_bus_adr = adr;
assign interface3_bank_bus_adr = adr;
assign interface4_bank_bus_adr = adr;
assign interface5_bank_bus_adr = adr;
assign interface6_bank_bus_adr = adr;
assign interface7_bank_bus_adr = adr;
assign interface0_bank_bus_re = re;
assign interface1_bank_bus_re = re;
assign interface2_bank_bus_re = re;
assign interface3_bank_bus_re = re;
assign interface4_bank_bus_re = re;
assign interface5_bank_bus_re = re;
assign interface6_bank_bus_re = re;
assign interface7_bank_bus_re = re;
assign interface0_bank_bus_we = we;
assign interface1_bank_bus_we = we;
assign interface2_bank_bus_we = we;
assign interface3_bank_bus_we = we;
assign interface4_bank_bus_we = we;
assign interface5_bank_bus_we = we;
assign interface6_bank_bus_we = we;
assign interface7_bank_bus_we = we;
assign interface0_bank_bus_dat_w = dat_w;
assign interface1_bank_bus_dat_w = dat_w;
assign interface2_bank_bus_dat_w = dat_w;
assign interface3_bank_bus_dat_w = dat_w;
assign interface4_bank_bus_dat_w = dat_w;
assign interface5_bank_bus_dat_w = dat_w;
assign interface6_bank_bus_dat_w = dat_w;
assign interface7_bank_bus_dat_w = dat_w;
assign dat_r = (((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r);
always @(*) begin
    array_muxed0 <= 30'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed0 <= interface0_adr1;
        end
        default: begin
            array_muxed0 <= interface4_adr;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 32'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed1 <= interface0_dat_w1;
        end
        default: begin
            array_muxed1 <= interface4_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 4'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed2 <= interface0_sel1;
        end
        default: begin
            array_muxed2 <= interface4_sel;
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 1'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed3 <= interface0_cyc1;
        end
        default: begin
            array_muxed3 <= interface4_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 1'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed4 <= interface0_stb1;
        end
        default: begin
            array_muxed4 <= interface4_stb;
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 1'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed5 <= interface0_we1;
        end
        default: begin
            array_muxed5 <= interface4_we;
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 3'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed6 <= interface0_cti1;
        end
        default: begin
            array_muxed6 <= interface4_cti;
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 2'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed7 <= interface0_bte1;
        end
        default: begin
            array_muxed7 <= interface4_bte;
        end
    endcase
end
always @(*) begin
    array_muxed8 <= 30'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed8 <= interface1_adr1;
        end
        default: begin
            array_muxed8 <= interface5_adr;
        end
    endcase
end
always @(*) begin
    array_muxed9 <= 32'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed9 <= interface1_dat_w1;
        end
        default: begin
            array_muxed9 <= interface5_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed10 <= 4'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed10 <= interface1_sel;
        end
        default: begin
            array_muxed10 <= interface5_sel;
        end
    endcase
end
always @(*) begin
    array_muxed11 <= 1'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed11 <= interface1_cyc;
        end
        default: begin
            array_muxed11 <= interface5_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed12 <= 1'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed12 <= interface1_stb;
        end
        default: begin
            array_muxed12 <= interface5_stb;
        end
    endcase
end
always @(*) begin
    array_muxed13 <= 1'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed13 <= interface1_we1;
        end
        default: begin
            array_muxed13 <= interface5_we;
        end
    endcase
end
always @(*) begin
    array_muxed14 <= 3'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed14 <= interface1_cti;
        end
        default: begin
            array_muxed14 <= interface5_cti;
        end
    endcase
end
always @(*) begin
    array_muxed15 <= 2'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed15 <= interface1_bte;
        end
        default: begin
            array_muxed15 <= interface5_bte;
        end
    endcase
end
always @(*) begin
    array_muxed16 <= 30'd0;
    case (arbiter2_grant)
        1'd0: begin
            array_muxed16 <= interface2_adr;
        end
        default: begin
            array_muxed16 <= interface6_adr;
        end
    endcase
end
always @(*) begin
    array_muxed17 <= 32'd0;
    case (arbiter2_grant)
        1'd0: begin
            array_muxed17 <= interface2_dat_w;
        end
        default: begin
            array_muxed17 <= interface6_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed18 <= 4'd0;
    case (arbiter2_grant)
        1'd0: begin
            array_muxed18 <= interface2_sel;
        end
        default: begin
            array_muxed18 <= interface6_sel;
        end
    endcase
end
always @(*) begin
    array_muxed19 <= 1'd0;
    case (arbiter2_grant)
        1'd0: begin
            array_muxed19 <= interface2_cyc;
        end
        default: begin
            array_muxed19 <= interface6_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed20 <= 1'd0;
    case (arbiter2_grant)
        1'd0: begin
            array_muxed20 <= interface2_stb;
        end
        default: begin
            array_muxed20 <= interface6_stb;
        end
    endcase
end
always @(*) begin
    array_muxed21 <= 1'd0;
    case (arbiter2_grant)
        1'd0: begin
            array_muxed21 <= interface2_we;
        end
        default: begin
            array_muxed21 <= interface6_we;
        end
    endcase
end
always @(*) begin
    array_muxed22 <= 3'd0;
    case (arbiter2_grant)
        1'd0: begin
            array_muxed22 <= interface2_cti;
        end
        default: begin
            array_muxed22 <= interface6_cti;
        end
    endcase
end
always @(*) begin
    array_muxed23 <= 2'd0;
    case (arbiter2_grant)
        1'd0: begin
            array_muxed23 <= interface2_bte;
        end
        default: begin
            array_muxed23 <= interface6_bte;
        end
    endcase
end
always @(*) begin
    array_muxed24 <= 30'd0;
    case (arbiter3_grant)
        1'd0: begin
            array_muxed24 <= interface3_adr;
        end
        default: begin
            array_muxed24 <= interface7_adr;
        end
    endcase
end
always @(*) begin
    array_muxed25 <= 32'd0;
    case (arbiter3_grant)
        1'd0: begin
            array_muxed25 <= interface3_dat_w;
        end
        default: begin
            array_muxed25 <= interface7_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed26 <= 4'd0;
    case (arbiter3_grant)
        1'd0: begin
            array_muxed26 <= interface3_sel;
        end
        default: begin
            array_muxed26 <= interface7_sel;
        end
    endcase
end
always @(*) begin
    array_muxed27 <= 1'd0;
    case (arbiter3_grant)
        1'd0: begin
            array_muxed27 <= interface3_cyc;
        end
        default: begin
            array_muxed27 <= interface7_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed28 <= 1'd0;
    case (arbiter3_grant)
        1'd0: begin
            array_muxed28 <= interface3_stb;
        end
        default: begin
            array_muxed28 <= interface7_stb;
        end
    endcase
end
always @(*) begin
    array_muxed29 <= 1'd0;
    case (arbiter3_grant)
        1'd0: begin
            array_muxed29 <= interface3_we;
        end
        default: begin
            array_muxed29 <= interface7_we;
        end
    endcase
end
always @(*) begin
    array_muxed30 <= 3'd0;
    case (arbiter3_grant)
        1'd0: begin
            array_muxed30 <= interface3_cti;
        end
        default: begin
            array_muxed30 <= interface7_cti;
        end
    endcase
end
always @(*) begin
    array_muxed31 <= 2'd0;
    case (arbiter3_grant)
        1'd0: begin
            array_muxed31 <= interface3_bte;
        end
        default: begin
            array_muxed31 <= interface7_bte;
        end
    endcase
end
assign mainsoc_rx_rx = regs1;
assign sdrio_clk = sys_clk_1;
assign sdrio_clk_1 = sys_clk_1;
assign sdrio_clk_2 = sys_clk_1;
assign sdrio_clk_3 = sys_clk_1;
assign sdrio_clk_4 = sys_clk_1;
assign sdrio_clk_5 = sys_clk_1;
assign sdrio_clk_6 = sys_clk_1;
assign sdrio_clk_7 = sys_clk_1;
assign sdrio_clk_8 = sys_clk_1;
assign sdrio_clk_9 = sys_clk_1;
assign sdrio_clk_10 = sys_clk_1;
assign sdrio_clk_11 = sys_clk_1;
assign sdrio_clk_12 = sys_clk_1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= sys_rst;
end

always @(posedge sdrio_clk) begin
    spiflash4x_clk <= litespisdrphycore_clk;
    inferedsdrtristate0_oe <= litespisdrphycore_dq_oe[0];
    inferedsdrtristate1_oe <= litespisdrphycore_dq_oe[1];
    inferedsdrtristate2_oe <= litespisdrphycore_dq_oe[2];
    inferedsdrtristate3_oe <= litespisdrphycore_dq_oe[3];
    inferedsdrtristate0__o <= litespisdrphycore_dq_o[0];
    litespisdrphycore_dq_i[0] <= inferedsdrtristate0__i;
    inferedsdrtristate1__o <= litespisdrphycore_dq_o[1];
    litespisdrphycore_dq_i[1] <= inferedsdrtristate1__i;
    inferedsdrtristate2__o <= litespisdrphycore_dq_o[2];
    litespisdrphycore_dq_i[2] <= inferedsdrtristate2__i;
    inferedsdrtristate3__o <= litespisdrphycore_dq_o[3];
    litespisdrphycore_dq_i[3] <= inferedsdrtristate3__i;
end

always @(posedge sys_clk_1) begin
    decoder0_slave_sel_r <= decoder0_slave_sel;
    decoder1_slave_sel_r <= decoder1_slave_sel;
    case (arbiter0_grant)
        1'd0: begin
            if ((~arbiter0_request[0])) begin
                if (arbiter0_request[1]) begin
                    arbiter0_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~arbiter0_request[1])) begin
                if (arbiter0_request[0]) begin
                    arbiter0_grant <= 1'd0;
                end
            end
        end
    endcase
    case (arbiter1_grant)
        1'd0: begin
            if ((~arbiter1_request[0])) begin
                if (arbiter1_request[1]) begin
                    arbiter1_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~arbiter1_request[1])) begin
                if (arbiter1_request[0]) begin
                    arbiter1_grant <= 1'd0;
                end
            end
        end
    endcase
    case (arbiter2_grant)
        1'd0: begin
            if ((~arbiter2_request[0])) begin
                if (arbiter2_request[1]) begin
                    arbiter2_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~arbiter2_request[1])) begin
                if (arbiter2_request[0]) begin
                    arbiter2_grant <= 1'd0;
                end
            end
        end
    endcase
    case (arbiter3_grant)
        1'd0: begin
            if ((~arbiter3_request[0])) begin
                if (arbiter3_request[1]) begin
                    arbiter3_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~arbiter3_request[1])) begin
                if (arbiter3_request[0]) begin
                    arbiter3_grant <= 1'd0;
                end
            end
        end
    endcase
    if ((mainsoc_bus_errors != 32'd4294967295)) begin
        if (mainsoc_bus_error) begin
            mainsoc_bus_errors <= (mainsoc_bus_errors + 1'd1);
        end
    end
    {mainsoc_tx_tick, mainsoc_tx_phase} <= 23'd8246337;
    if (mainsoc_tx_enable) begin
        {mainsoc_tx_tick, mainsoc_tx_phase} <= (mainsoc_tx_phase + 23'd8246337);
    end
    rs232phytx_state <= rs232phytx_next_state;
    if (mainsoc_tx_count_rs232phytx_next_value_ce0) begin
        mainsoc_tx_count <= mainsoc_tx_count_rs232phytx_next_value0;
    end
    if (mainsoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= mainsoc_serial_tx_rs232phytx_next_value1;
    end
    if (mainsoc_tx_data_rs232phytx_next_value_ce2) begin
        mainsoc_tx_data <= mainsoc_tx_data_rs232phytx_next_value2;
    end
    mainsoc_rx_rx_d <= mainsoc_rx_rx;
    {mainsoc_rx_tick, mainsoc_rx_phase} <= 32'd2147483648;
    if (mainsoc_rx_enable) begin
        {mainsoc_rx_tick, mainsoc_rx_phase} <= (mainsoc_rx_phase + 23'd8246337);
    end
    rs232phyrx_state <= rs232phyrx_next_state;
    if (mainsoc_rx_count_rs232phyrx_next_value_ce0) begin
        mainsoc_rx_count <= mainsoc_rx_count_rs232phyrx_next_value0;
    end
    if (mainsoc_rx_data_rs232phyrx_next_value_ce1) begin
        mainsoc_rx_data <= mainsoc_rx_data_rs232phyrx_next_value1;
    end
    if (mainsoc_uart_tx_clear) begin
        mainsoc_uart_tx_pending <= 1'd0;
    end
    mainsoc_uart_tx_trigger_d <= mainsoc_uart_tx_trigger;
    if ((mainsoc_uart_tx_trigger & (~mainsoc_uart_tx_trigger_d))) begin
        mainsoc_uart_tx_pending <= 1'd1;
    end
    if (mainsoc_uart_rx_clear) begin
        mainsoc_uart_rx_pending <= 1'd0;
    end
    mainsoc_uart_rx_trigger_d <= mainsoc_uart_rx_trigger;
    if ((mainsoc_uart_rx_trigger & (~mainsoc_uart_rx_trigger_d))) begin
        mainsoc_uart_rx_pending <= 1'd1;
    end
    if (mainsoc_uart_tx_fifo_syncfifo_re) begin
        mainsoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (mainsoc_uart_tx_fifo_re) begin
            mainsoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((mainsoc_uart_tx_fifo_syncfifo_we & mainsoc_uart_tx_fifo_syncfifo_writable) & (~mainsoc_uart_tx_fifo_replace))) begin
        mainsoc_uart_tx_fifo_produce <= (mainsoc_uart_tx_fifo_produce + 1'd1);
    end
    if (mainsoc_uart_tx_fifo_do_read) begin
        mainsoc_uart_tx_fifo_consume <= (mainsoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((mainsoc_uart_tx_fifo_syncfifo_we & mainsoc_uart_tx_fifo_syncfifo_writable) & (~mainsoc_uart_tx_fifo_replace))) begin
        if ((~mainsoc_uart_tx_fifo_do_read)) begin
            mainsoc_uart_tx_fifo_level0 <= (mainsoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (mainsoc_uart_tx_fifo_do_read) begin
            mainsoc_uart_tx_fifo_level0 <= (mainsoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (mainsoc_uart_rx_fifo_syncfifo_re) begin
        mainsoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (mainsoc_uart_rx_fifo_re) begin
            mainsoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((mainsoc_uart_rx_fifo_syncfifo_we & mainsoc_uart_rx_fifo_syncfifo_writable) & (~mainsoc_uart_rx_fifo_replace))) begin
        mainsoc_uart_rx_fifo_produce <= (mainsoc_uart_rx_fifo_produce + 1'd1);
    end
    if (mainsoc_uart_rx_fifo_do_read) begin
        mainsoc_uart_rx_fifo_consume <= (mainsoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((mainsoc_uart_rx_fifo_syncfifo_we & mainsoc_uart_rx_fifo_syncfifo_writable) & (~mainsoc_uart_rx_fifo_replace))) begin
        if ((~mainsoc_uart_rx_fifo_do_read)) begin
            mainsoc_uart_rx_fifo_level0 <= (mainsoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (mainsoc_uart_rx_fifo_do_read) begin
            mainsoc_uart_rx_fifo_level0 <= (mainsoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (mainsoc_timer_en_storage) begin
        if ((mainsoc_timer_value == 1'd0)) begin
            mainsoc_timer_value <= mainsoc_timer_reload_storage;
        end else begin
            mainsoc_timer_value <= (mainsoc_timer_value - 1'd1);
        end
    end else begin
        mainsoc_timer_value <= mainsoc_timer_load_storage;
    end
    if (mainsoc_timer_update_value_re) begin
        mainsoc_timer_value_status <= mainsoc_timer_value;
    end
    uptime_cycles <= (uptime_cycles + 1'd1);
    if (uptime_latch_re) begin
        uptime_cycles_status <= uptime_cycles;
    end
    if (mainsoc_timer_zero_clear) begin
        mainsoc_timer_zero_pending <= 1'd0;
    end
    mainsoc_timer_zero_trigger_d <= mainsoc_timer_zero_trigger;
    if ((mainsoc_timer_zero_trigger & (~mainsoc_timer_zero_trigger_d))) begin
        mainsoc_timer_zero_pending <= 1'd1;
    end
    i2c0_tip <= (i2c0_read | i2c0_write);
    i2c0_intflag <= (((i2c0_done | i2c0_i2c_al) | i2c0_intflag) & (~i2c0_iack));
    i2c0_arb_lost <= (i2c0_i2c_al | (i2c0_arb_lost & (~i2c0_start)));
    if (i2c0_i2c_int_clear) begin
        i2c0_i2c_int_pending <= 1'd0;
    end
    if (i2c0_i2c_int_trigger) begin
        i2c0_i2c_int_pending <= 1'd1;
    end
    if (i2c0_txrx_done_clear) begin
        i2c0_txrx_done_pending <= 1'd0;
    end
    i2c0_txrx_done_trigger_d <= i2c0_txrx_done_trigger;
    if (((~i2c0_txrx_done_trigger) & i2c0_txrx_done_trigger_d)) begin
        i2c0_txrx_done_pending <= 1'd1;
    end
    if (litespisdrphycore_sr_out_load) begin
        litespisdrphycore_sr_out <= (litespisdrphycore_sink_payload_data <<< (6'd32 - litespisdrphycore_sink_payload_len));
    end
    if (litespisdrphycore_sr_out_shift) begin
        case (litespisdrphycore_sink_payload_width)
            1'd1: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore0};
            end
            2'd2: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore1};
            end
            3'd4: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore2};
            end
            4'd8: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore3};
            end
        endcase
    end
    if (litespisdrphycore_sr_in_shift) begin
        case (litespisdrphycore_sink_payload_width)
            1'd1: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1]};
            end
            2'd2: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1:0]};
            end
            3'd4: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[3:0]};
            end
            4'd8: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[3:0]};
            end
        endcase
    end
    litespisdrphycore_posedge_reg <= litespisdrphycore_posedge;
    litespisdrphycore_posedge_reg2 <= litespisdrphycore_posedge_reg;
    if ((litespisdrphycore_en | litespisdrphycore_en_int)) begin
        if ((litespisdrphycore_cnt < litespisdrphycore_div)) begin
            litespisdrphycore_cnt <= (litespisdrphycore_cnt + 1'd1);
        end else begin
            litespisdrphycore_cnt <= 1'd0;
            litespisdrphycore_clk <= (~litespisdrphycore_clk);
        end
    end else begin
        litespisdrphycore_clk <= 1'd0;
        litespisdrphycore_cnt <= 1'd0;
    end
    if (litespisdrphycore_wait) begin
        if ((~litespisdrphycore_done)) begin
            litespisdrphycore_count <= (litespisdrphycore_count - 1'd1);
        end
    end else begin
        litespisdrphycore_count <= 4'd11;
    end
    litespiphy_state <= litespiphy_next_state;
    if (litespisdrphycore_sr_cnt_litespiphy_next_value_ce) begin
        litespisdrphycore_sr_cnt <= litespisdrphycore_sr_cnt_litespiphy_next_value;
    end
    case (litespi_grant)
        1'd0: begin
            if ((~litespi_request[0])) begin
                if (litespi_request[1]) begin
                    litespi_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~litespi_request[1])) begin
                if (litespi_request[0]) begin
                    litespi_grant <= 1'd0;
                end
            end
        end
    endcase
    if (litespimmap_wait) begin
        if ((~litespimmap_done)) begin
            litespimmap_count <= (litespimmap_count - 1'd1);
        end
    end else begin
        litespimmap_count <= 9'd256;
    end
    litespi_state <= litespi_next_state;
    if (litespimmap_burst_cs_litespi_next_value_ce) begin
        litespimmap_burst_cs <= litespimmap_burst_cs_litespi_next_value;
    end
    if (litespimmap_byte_count_litespi_t_next_value_ce) begin
        litespimmap_byte_count <= litespimmap_byte_count_litespi_t_next_value;
    end
    if (litespimmap_write_litespi_t_t_next_value_ce) begin
        litespimmap_write <= litespimmap_write_litespi_t_t_next_value;
    end
    if (litespimmap_write_mask_litespi_t_f_next_value_ce0) begin
        litespimmap_write_mask <= litespimmap_write_mask_litespi_t_f_next_value0;
    end
    if (litespimmap_data_write_litespi_t_f_next_value_ce1) begin
        litespimmap_data_write <= litespimmap_data_write_litespi_t_f_next_value1;
    end
    if (litespimmap_burst_adr_litespi_f_next_value_ce) begin
        litespimmap_burst_adr <= litespimmap_burst_adr_litespi_f_next_value;
    end
    if (((~master_tx_fifo_pipe_valid_source_valid) | master_tx_fifo_pipe_valid_source_ready)) begin
        master_tx_fifo_pipe_valid_source_valid <= master_tx_fifo_pipe_valid_sink_valid;
        master_tx_fifo_pipe_valid_source_first <= master_tx_fifo_pipe_valid_sink_first;
        master_tx_fifo_pipe_valid_source_last <= master_tx_fifo_pipe_valid_sink_last;
        master_tx_fifo_pipe_valid_source_payload_data <= master_tx_fifo_pipe_valid_sink_payload_data;
        master_tx_fifo_pipe_valid_source_payload_len <= master_tx_fifo_pipe_valid_sink_payload_len;
        master_tx_fifo_pipe_valid_source_payload_width <= master_tx_fifo_pipe_valid_sink_payload_width;
        master_tx_fifo_pipe_valid_source_payload_mask <= master_tx_fifo_pipe_valid_sink_payload_mask;
    end
    if (((~master_rx_fifo_pipe_valid_source_valid) | master_rx_fifo_pipe_valid_source_ready)) begin
        master_rx_fifo_pipe_valid_source_valid <= master_rx_fifo_pipe_valid_sink_valid;
        master_rx_fifo_pipe_valid_source_first <= master_rx_fifo_pipe_valid_sink_first;
        master_rx_fifo_pipe_valid_source_last <= master_rx_fifo_pipe_valid_sink_last;
        master_rx_fifo_pipe_valid_source_payload_data <= master_rx_fifo_pipe_valid_sink_payload_data;
    end
    main_ram_bus_ack <= ((main_ram_bus_stb & main_ram_bus_cyc) & (~main_ram_bus_ack));
    if (usb23_clear) begin
        usb23_pending <= 1'd0;
    end
    usb23_trigger_d <= usb23_trigger;
    if ((usb23_trigger & (~usb23_trigger_d))) begin
        usb23_pending <= 1'd1;
    end
    if (framectl_clear) begin
        framectl_pending <= 1'd0;
    end
    framectl_trigger_d <= framectl_trigger;
    if ((framectl_trigger & (~framectl_trigger_d))) begin
        framectl_pending <= 1'd1;
    end
    wishbone2csr_state <= wishbone2csr_next_state;
    interface0_bank_bus_dat_r <= 1'd0;
    if (csrbank0_sel) begin
        case (interface0_bank_bus_adr[8:0])
            1'd0: begin
                interface0_bank_bus_dat_r <= csrbank0_reset0_w;
            end
            1'd1: begin
                interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
            end
            2'd2: begin
                interface0_bank_bus_dat_r <= csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csrbank0_reset0_re) begin
        mainsoc_reset_storage[1:0] <= csrbank0_reset0_r;
    end
    mainsoc_reset_re <= csrbank0_reset0_re;
    if (csrbank0_scratch0_re) begin
        mainsoc_scratch_storage[31:0] <= csrbank0_scratch0_r;
    end
    mainsoc_scratch_re <= csrbank0_scratch0_re;
    mainsoc_bus_errors_re <= csrbank0_bus_errors_re;
    interface1_bank_bus_dat_r <= 1'd0;
    if (csrbank1_sel) begin
        case (interface1_bank_bus_adr[8:0])
            1'd0: begin
                interface1_bank_bus_dat_r <= csrbank1_ev_status_w;
            end
            1'd1: begin
                interface1_bank_bus_dat_r <= csrbank1_ev_pending_w;
            end
            2'd2: begin
                interface1_bank_bus_dat_r <= csrbank1_ev_enable0_w;
            end
        endcase
    end
    framectl_status_re <= csrbank1_ev_status_re;
    if (csrbank1_ev_pending_re) begin
        framectl_pending_r <= csrbank1_ev_pending_r;
    end
    framectl_pending_re <= csrbank1_ev_pending_re;
    if (csrbank1_ev_enable0_re) begin
        framectl_enable_storage <= csrbank1_ev_enable0_r;
    end
    framectl_enable_re <= csrbank1_ev_enable0_re;
    interface2_bank_bus_dat_r <= 1'd0;
    if (csrbank2_sel) begin
        case (interface2_bank_bus_adr[8:0])
            1'd0: begin
                interface2_bank_bus_dat_r <= csrbank2_prescale0_w;
            end
            1'd1: begin
                interface2_bank_bus_dat_r <= csrbank2_control0_w;
            end
            2'd2: begin
                interface2_bank_bus_dat_r <= csrbank2_txr0_w;
            end
            2'd3: begin
                interface2_bank_bus_dat_r <= csrbank2_rxr_w;
            end
            3'd4: begin
                interface2_bank_bus_dat_r <= csrbank2_command0_w;
            end
            3'd5: begin
                interface2_bank_bus_dat_r <= csrbank2_status_w;
            end
            3'd6: begin
                interface2_bank_bus_dat_r <= csrbank2_core_reset0_w;
            end
            3'd7: begin
                interface2_bank_bus_dat_r <= csrbank2_ev_status_w;
            end
            4'd8: begin
                interface2_bank_bus_dat_r <= csrbank2_ev_pending_w;
            end
            4'd9: begin
                interface2_bank_bus_dat_r <= csrbank2_ev_enable0_w;
            end
        endcase
    end
    if (csrbank2_prescale0_re) begin
        i2c0_prescale_storage[15:0] <= csrbank2_prescale0_r;
    end
    i2c0_prescale_re <= csrbank2_prescale0_re;
    if (csrbank2_control0_re) begin
        i2c0_control_storage[7:0] <= csrbank2_control0_r;
    end
    i2c0_control_re <= csrbank2_control0_re;
    if (csrbank2_txr0_re) begin
        i2c0_txr_storage[7:0] <= csrbank2_txr0_r;
    end
    i2c0_txr_re <= csrbank2_txr0_re;
    i2c0_rxr_re <= csrbank2_rxr_re;
    if (i2c0_command_we) begin
        i2c0_command_storage <= i2c0_command_dat_w;
    end
    if (csrbank2_command0_re) begin
        i2c0_command_storage[7:0] <= csrbank2_command0_r;
    end
    i2c0_command_re <= csrbank2_command0_re;
    i2c0_status_re0 <= csrbank2_status_re;
    if (csrbank2_core_reset0_re) begin
        i2c0_core_reset_storage <= csrbank2_core_reset0_r;
    end
    i2c0_core_reset_re <= csrbank2_core_reset0_re;
    i2c0_status_re1 <= csrbank2_ev_status_re;
    if (csrbank2_ev_pending_re) begin
        i2c0_pending_r[1:0] <= csrbank2_ev_pending_r;
    end
    i2c0_pending_re <= csrbank2_ev_pending_re;
    if (csrbank2_ev_enable0_re) begin
        i2c0_enable_storage[1:0] <= csrbank2_ev_enable0_r;
    end
    i2c0_enable_re <= csrbank2_ev_enable0_re;
    interface3_bank_bus_dat_r <= 1'd0;
    if (csrbank3_sel) begin
        case (interface3_bank_bus_adr[8:0])
            1'd0: begin
                interface3_bank_bus_dat_r <= csrbank3_mmap_dummy_bits0_w;
            end
            1'd1: begin
                interface3_bank_bus_dat_r <= csrbank3_master_cs0_w;
            end
            2'd2: begin
                interface3_bank_bus_dat_r <= csrbank3_master_phyconfig0_w;
            end
            2'd3: begin
                interface3_bank_bus_dat_r <= master_rxtx_w;
            end
            3'd4: begin
                interface3_bank_bus_dat_r <= csrbank3_master_status_w;
            end
        endcase
    end
    if (csrbank3_mmap_dummy_bits0_re) begin
        litespimmap_storage[7:0] <= csrbank3_mmap_dummy_bits0_r;
    end
    litespimmap_re <= csrbank3_mmap_dummy_bits0_re;
    if (csrbank3_master_cs0_re) begin
        master_cs_storage <= csrbank3_master_cs0_r;
    end
    master_cs_re <= csrbank3_master_cs0_re;
    if (csrbank3_master_phyconfig0_re) begin
        master_phyconfig_storage[23:0] <= csrbank3_master_phyconfig0_r;
    end
    master_phyconfig_re <= csrbank3_master_phyconfig0_re;
    master_status_re <= csrbank3_master_status_re;
    interface4_bank_bus_dat_r <= 1'd0;
    if (csrbank4_sel) begin
        case (interface4_bank_bus_adr[8:0])
            1'd0: begin
                interface4_bank_bus_dat_r <= csrbank4_clk_divisor0_w;
            end
        endcase
    end
    if (csrbank4_clk_divisor0_re) begin
        litespisdrphycore_storage[7:0] <= csrbank4_clk_divisor0_r;
    end
    litespisdrphycore_re <= csrbank4_clk_divisor0_re;
    interface5_bank_bus_dat_r <= 1'd0;
    if (csrbank5_sel) begin
        case (interface5_bank_bus_adr[8:0])
            1'd0: begin
                interface5_bank_bus_dat_r <= csrbank5_load0_w;
            end
            1'd1: begin
                interface5_bank_bus_dat_r <= csrbank5_reload0_w;
            end
            2'd2: begin
                interface5_bank_bus_dat_r <= csrbank5_en0_w;
            end
            2'd3: begin
                interface5_bank_bus_dat_r <= csrbank5_update_value0_w;
            end
            3'd4: begin
                interface5_bank_bus_dat_r <= csrbank5_value_w;
            end
            3'd5: begin
                interface5_bank_bus_dat_r <= csrbank5_ev_status_w;
            end
            3'd6: begin
                interface5_bank_bus_dat_r <= csrbank5_ev_pending_w;
            end
            3'd7: begin
                interface5_bank_bus_dat_r <= csrbank5_ev_enable0_w;
            end
            4'd8: begin
                interface5_bank_bus_dat_r <= csrbank5_uptime_latch0_w;
            end
            4'd9: begin
                interface5_bank_bus_dat_r <= csrbank5_uptime_cycles1_w;
            end
            4'd10: begin
                interface5_bank_bus_dat_r <= csrbank5_uptime_cycles0_w;
            end
        endcase
    end
    if (csrbank5_load0_re) begin
        mainsoc_timer_load_storage[31:0] <= csrbank5_load0_r;
    end
    mainsoc_timer_load_re <= csrbank5_load0_re;
    if (csrbank5_reload0_re) begin
        mainsoc_timer_reload_storage[31:0] <= csrbank5_reload0_r;
    end
    mainsoc_timer_reload_re <= csrbank5_reload0_re;
    if (csrbank5_en0_re) begin
        mainsoc_timer_en_storage <= csrbank5_en0_r;
    end
    mainsoc_timer_en_re <= csrbank5_en0_re;
    if (csrbank5_update_value0_re) begin
        mainsoc_timer_update_value_storage <= csrbank5_update_value0_r;
    end
    mainsoc_timer_update_value_re <= csrbank5_update_value0_re;
    mainsoc_timer_value_re <= csrbank5_value_re;
    mainsoc_timer_status_re <= csrbank5_ev_status_re;
    if (csrbank5_ev_pending_re) begin
        mainsoc_timer_pending_r <= csrbank5_ev_pending_r;
    end
    mainsoc_timer_pending_re <= csrbank5_ev_pending_re;
    if (csrbank5_ev_enable0_re) begin
        mainsoc_timer_enable_storage <= csrbank5_ev_enable0_r;
    end
    mainsoc_timer_enable_re <= csrbank5_ev_enable0_re;
    if (csrbank5_uptime_latch0_re) begin
        uptime_latch_storage <= csrbank5_uptime_latch0_r;
    end
    uptime_latch_re <= csrbank5_uptime_latch0_re;
    uptime_cycles_re <= csrbank5_uptime_cycles0_re;
    interface6_bank_bus_dat_r <= 1'd0;
    if (csrbank6_sel) begin
        case (interface6_bank_bus_adr[8:0])
            1'd0: begin
                interface6_bank_bus_dat_r <= mainsoc_uart_rxtx_w;
            end
            1'd1: begin
                interface6_bank_bus_dat_r <= csrbank6_txfull_w;
            end
            2'd2: begin
                interface6_bank_bus_dat_r <= csrbank6_rxempty_w;
            end
            2'd3: begin
                interface6_bank_bus_dat_r <= csrbank6_ev_status_w;
            end
            3'd4: begin
                interface6_bank_bus_dat_r <= csrbank6_ev_pending_w;
            end
            3'd5: begin
                interface6_bank_bus_dat_r <= csrbank6_ev_enable0_w;
            end
            3'd6: begin
                interface6_bank_bus_dat_r <= csrbank6_txempty_w;
            end
            3'd7: begin
                interface6_bank_bus_dat_r <= csrbank6_rxfull_w;
            end
        endcase
    end
    mainsoc_uart_txfull_re <= csrbank6_txfull_re;
    mainsoc_uart_rxempty_re <= csrbank6_rxempty_re;
    mainsoc_uart_status_re <= csrbank6_ev_status_re;
    if (csrbank6_ev_pending_re) begin
        mainsoc_uart_pending_r[1:0] <= csrbank6_ev_pending_r;
    end
    mainsoc_uart_pending_re <= csrbank6_ev_pending_re;
    if (csrbank6_ev_enable0_re) begin
        mainsoc_uart_enable_storage[1:0] <= csrbank6_ev_enable0_r;
    end
    mainsoc_uart_enable_re <= csrbank6_ev_enable0_re;
    mainsoc_uart_txempty_re <= csrbank6_txempty_re;
    mainsoc_uart_rxfull_re <= csrbank6_rxfull_re;
    interface7_bank_bus_dat_r <= 1'd0;
    if (csrbank7_sel) begin
        case (interface7_bank_bus_adr[8:0])
            1'd0: begin
                interface7_bank_bus_dat_r <= csrbank7_ev_status_w;
            end
            1'd1: begin
                interface7_bank_bus_dat_r <= csrbank7_ev_pending_w;
            end
            2'd2: begin
                interface7_bank_bus_dat_r <= csrbank7_ev_enable0_w;
            end
        endcase
    end
    usb23_status_re <= csrbank7_ev_status_re;
    if (csrbank7_ev_pending_re) begin
        usb23_pending_r <= csrbank7_ev_pending_r;
    end
    usb23_pending_re <= csrbank7_ev_pending_re;
    if (csrbank7_ev_enable0_re) begin
        usb23_enable_storage <= csrbank7_ev_enable0_r;
    end
    usb23_enable_re <= csrbank7_ev_enable0_re;
    if (sys_rst_1) begin
        mainsoc_reset_storage <= 2'd0;
        mainsoc_reset_re <= 1'd0;
        mainsoc_scratch_storage <= 32'd305419896;
        mainsoc_scratch_re <= 1'd0;
        mainsoc_bus_errors_re <= 1'd0;
        mainsoc_bus_errors <= 32'd0;
        serial_tx <= 1'd1;
        mainsoc_tx_tick <= 1'd0;
        mainsoc_rx_tick <= 1'd0;
        mainsoc_rx_rx_d <= 1'd0;
        mainsoc_uart_txfull_re <= 1'd0;
        mainsoc_uart_rxempty_re <= 1'd0;
        mainsoc_uart_tx_pending <= 1'd0;
        mainsoc_uart_tx_trigger_d <= 1'd0;
        mainsoc_uart_rx_pending <= 1'd0;
        mainsoc_uart_rx_trigger_d <= 1'd0;
        mainsoc_uart_status_re <= 1'd0;
        mainsoc_uart_pending_re <= 1'd0;
        mainsoc_uart_pending_r <= 2'd0;
        mainsoc_uart_enable_storage <= 2'd0;
        mainsoc_uart_enable_re <= 1'd0;
        mainsoc_uart_txempty_re <= 1'd0;
        mainsoc_uart_rxfull_re <= 1'd0;
        mainsoc_uart_tx_fifo_readable <= 1'd0;
        mainsoc_uart_tx_fifo_level0 <= 5'd0;
        mainsoc_uart_tx_fifo_produce <= 4'd0;
        mainsoc_uart_tx_fifo_consume <= 4'd0;
        mainsoc_uart_rx_fifo_readable <= 1'd0;
        mainsoc_uart_rx_fifo_level0 <= 5'd0;
        mainsoc_uart_rx_fifo_produce <= 4'd0;
        mainsoc_uart_rx_fifo_consume <= 4'd0;
        mainsoc_timer_load_storage <= 32'd0;
        mainsoc_timer_load_re <= 1'd0;
        mainsoc_timer_reload_storage <= 32'd0;
        mainsoc_timer_reload_re <= 1'd0;
        mainsoc_timer_en_storage <= 1'd0;
        mainsoc_timer_en_re <= 1'd0;
        mainsoc_timer_update_value_storage <= 1'd0;
        mainsoc_timer_update_value_re <= 1'd0;
        mainsoc_timer_value_status <= 32'd0;
        mainsoc_timer_value_re <= 1'd0;
        mainsoc_timer_zero_pending <= 1'd0;
        mainsoc_timer_zero_trigger_d <= 1'd0;
        mainsoc_timer_status_re <= 1'd0;
        mainsoc_timer_pending_re <= 1'd0;
        mainsoc_timer_pending_r <= 1'd0;
        mainsoc_timer_enable_storage <= 1'd0;
        mainsoc_timer_enable_re <= 1'd0;
        mainsoc_timer_value <= 32'd0;
        uptime_latch_storage <= 1'd0;
        uptime_latch_re <= 1'd0;
        uptime_cycles_status <= 64'd0;
        uptime_cycles_re <= 1'd0;
        i2c0_prescale_storage <= 16'd65535;
        i2c0_prescale_re <= 1'd0;
        i2c0_control_storage <= 8'd0;
        i2c0_control_re <= 1'd0;
        i2c0_txr_storage <= 8'd0;
        i2c0_txr_re <= 1'd0;
        i2c0_rxr_re <= 1'd0;
        i2c0_command_storage <= 8'd0;
        i2c0_command_re <= 1'd0;
        i2c0_status_re0 <= 1'd0;
        i2c0_core_reset_storage <= 1'd0;
        i2c0_core_reset_re <= 1'd0;
        i2c0_i2c_int_pending <= 1'd0;
        i2c0_txrx_done_pending <= 1'd0;
        i2c0_txrx_done_trigger_d <= 1'd0;
        i2c0_status_re1 <= 1'd0;
        i2c0_pending_re <= 1'd0;
        i2c0_pending_r <= 2'd0;
        i2c0_enable_storage <= 2'd0;
        i2c0_enable_re <= 1'd0;
        i2c0_arb_lost <= 1'd0;
        i2c0_tip <= 1'd0;
        i2c0_intflag <= 1'd0;
        litespisdrphycore_storage <= 8'd0;
        litespisdrphycore_re <= 1'd0;
        litespisdrphycore_cnt <= 8'd0;
        litespisdrphycore_clk <= 1'd0;
        litespisdrphycore_posedge_reg <= 1'd0;
        litespisdrphycore_posedge_reg2 <= 1'd0;
        litespisdrphycore_count <= 4'd11;
        litespimmap_burst_cs <= 1'd0;
        litespimmap_count <= 9'd256;
        litespimmap_write <= 1'd0;
        litespimmap_write_mask <= 4'd0;
        litespimmap_storage <= 8'd8;
        litespimmap_re <= 1'd0;
        litespimmap_data_write <= 32'd0;
        master_cs_storage <= 1'd0;
        master_cs_re <= 1'd0;
        master_phyconfig_storage <= 24'd0;
        master_phyconfig_re <= 1'd0;
        master_status_re <= 1'd0;
        master_tx_fifo_pipe_valid_source_valid <= 1'd0;
        master_tx_fifo_pipe_valid_source_payload_data <= 32'd0;
        master_tx_fifo_pipe_valid_source_payload_len <= 6'd0;
        master_tx_fifo_pipe_valid_source_payload_width <= 4'd0;
        master_tx_fifo_pipe_valid_source_payload_mask <= 8'd0;
        master_rx_fifo_pipe_valid_source_valid <= 1'd0;
        master_rx_fifo_pipe_valid_source_payload_data <= 32'd0;
        main_ram_bus_ack <= 1'd0;
        usb23_pending <= 1'd0;
        usb23_trigger_d <= 1'd0;
        usb23_status_re <= 1'd0;
        usb23_pending_re <= 1'd0;
        usb23_pending_r <= 1'd0;
        usb23_enable_storage <= 1'd0;
        usb23_enable_re <= 1'd0;
        framectl_pending <= 1'd0;
        framectl_trigger_d <= 1'd0;
        framectl_status_re <= 1'd0;
        framectl_pending_re <= 1'd0;
        framectl_pending_r <= 1'd0;
        framectl_enable_storage <= 1'd0;
        framectl_enable_re <= 1'd0;
        decoder0_slave_sel_r <= 4'd0;
        decoder1_slave_sel_r <= 4'd0;
        arbiter0_grant <= 1'd0;
        arbiter1_grant <= 1'd0;
        arbiter2_grant <= 1'd0;
        arbiter3_grant <= 1'd0;
        rs232phytx_state <= 1'd0;
        rs232phyrx_state <= 1'd0;
        litespiphy_state <= 2'd0;
        litespi_grant <= 1'd0;
        litespi_state <= 4'd0;
        wishbone2csr_state <= 1'd0;
    end
    regs0 <= serial_rx;
    regs1 <= regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (mainsoc_uart_tx_fifo_wrport_we)
		storage[mainsoc_uart_tx_fifo_wrport_adr] <= mainsoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[mainsoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (mainsoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[mainsoc_uart_tx_fifo_rdport_adr];
end
assign mainsoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign mainsoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (mainsoc_uart_rx_fifo_wrport_we)
		storage_1[mainsoc_uart_rx_fifo_wrport_adr] <= mainsoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[mainsoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (mainsoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[mainsoc_uart_rx_fifo_rdport_adr];
end
assign mainsoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign mainsoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


assign i2c0_scl = i2c0_scl_oe ? i2c0_scl_o0 : 1'bz;
assign i2c0_scl_i0 = i2c0_scl;

assign i2c0_sda = i2c0_sda_oe ? i2c0_sda_o0 : 1'bz;
assign i2c0_sda_i0 = i2c0_sda;

//------------------------------------------------------------------------------
// Instance i2c_controller_byte_ctrl of i2c_controller_byte_ctrl Module.
//------------------------------------------------------------------------------
i2c_controller_byte_ctrl i2c_controller_byte_ctrl(
	// Inputs.
	.ack_in   (i2c0_ack),
	.clk      (sys_clk_1),
	.clk_cnt  (i2c0_prescale_storage),
	.din      (i2c0_txr_storage),
	.ena      (i2c0_ena),
	.nReset   (1'd1),
	.read     ((i2c0_read & (~i2c0_done))),
	.rst      ((sys_rst_1 | i2c0_reset)),
	.scl_i    (i2c0_scl_i1),
	.sda_i    (i2c0_sda_i1),
	.start    (i2c0_start),
	.stop     ((i2c0_stop & (~i2c0_done))),
	.write    ((i2c0_write & (~i2c0_done))),

	// Outputs.
	.ack_out  (i2c0_rxack),
	.cmd_ack  (i2c0_done),
	.dout     (i2c0_rxr_status),
	.i2c_al   (i2c0_i2c_al),
	.i2c_busy (i2c0_busy),
	.scl_o    (i2c0_scl_o1),
	.scl_oen  (i2c0_scl_oen),
	.sda_o    (i2c0_sda_o1),
	.sda_oen  (i2c0_sda_oen)
);

//------------------------------------------------------------------------------
// Instance SP512K of SP512K Module.
//------------------------------------------------------------------------------
SP512K #(
	// Parameters.
	.ECC_BYTE_SEL ("BYTE_EN")
) SP512K (
	// Inputs.
	.AD       (main_ram_bus_adr[13:0]),
	.BYTEEN_N ((~main_ram_bus_sel[3:0])),
	.CE       (1'd1),
	.CEOUT    (1'd0),
	.CLK      (sys_clk_1),
	.CS       (main_ram_cs),
	.DI       (main_ram_datain),
	.RSTOUT   (1'd0),
	.WE       (main_ram_wren),

	// Outputs.
	.DO       (main_ram_dataout)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk_1),
	.dBusWishbone_ACK       (mainsoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (mainsoc_dbus_dat_r),
	.dBusWishbone_ERR       (mainsoc_dbus_err),
	.debugReset             (jtag_reset),
	.externalInterruptArray (mainsoc_interrupt),
	.externalResetVector    (mainsoc_vexriscv),
	.iBusWishbone_ACK       (mainsoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (mainsoc_ibus_dat_r),
	.iBusWishbone_ERR       (mainsoc_ibus_err),
	.jtag_tck               (jtag_tck),
	.jtag_tdi               (jtag_tdi),
	.jtag_tms               (jtag_tms),
	.reset                  ((sys_rst_1 | mainsoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (mainsoc_dbus_adr),
	.dBusWishbone_BTE       (mainsoc_dbus_bte),
	.dBusWishbone_CTI       (mainsoc_dbus_cti),
	.dBusWishbone_CYC       (mainsoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (mainsoc_dbus_dat_w),
	.dBusWishbone_SEL       (mainsoc_dbus_sel),
	.dBusWishbone_STB       (mainsoc_dbus_stb),
	.dBusWishbone_WE        (mainsoc_dbus_we),
	.iBusWishbone_ADR       (mainsoc_ibus_adr),
	.iBusWishbone_BTE       (mainsoc_ibus_bte),
	.iBusWishbone_CTI       (mainsoc_ibus_cti),
	.iBusWishbone_CYC       (mainsoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (mainsoc_ibus_dat_w),
	.iBusWishbone_SEL       (mainsoc_ibus_sel),
	.iBusWishbone_STB       (mainsoc_ibus_stb),
	.iBusWishbone_WE        (mainsoc_ibus_we),
	.jtag_tdo               (jtag_tdo)
);

assign spiflash4x_dq[0] = inferedsdrtristate0_oe ? inferedsdrtristate0__o : 1'bz;
assign inferedsdrtristate0__i = spiflash4x_dq[0];

assign spiflash4x_dq[1] = inferedsdrtristate1_oe ? inferedsdrtristate1__o : 1'bz;
assign inferedsdrtristate1__i = spiflash4x_dq[1];

assign spiflash4x_dq[2] = inferedsdrtristate2_oe ? inferedsdrtristate2__o : 1'bz;
assign inferedsdrtristate2__i = spiflash4x_dq[2];

assign spiflash4x_dq[3] = inferedsdrtristate3_oe ? inferedsdrtristate3__o : 1'bz;
assign inferedsdrtristate3__i = spiflash4x_dq[3];

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-10-26 22:23:07.
//------------------------------------------------------------------------------
