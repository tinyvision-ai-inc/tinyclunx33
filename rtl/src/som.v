// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : som.v
// Device     : build
// LiteX sha1 : ac871c690
// Date       : 2024-08-26 16:40:06
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module som (
    input  wire          framectl0_irq,
    inout  wire          i2c0_scl,
    inout  wire          i2c0_sda,
    input  wire          jtag_reset,
    input  wire          jtag_tck,
    input  wire          jtag_tdi,
    output wire          jtag_tdo,
    input  wire          jtag_tms,
    input  wire          serial_rx,
    output reg           serial_tx,
    output reg           spiflash4x_clk,
    output wire          spiflash4x_cs_n,
    inout  wire    [3:0] spiflash4x_dq,
    input  wire          sys_clk,
    input  wire          sys_rst,
    input  wire          usb230_irq,
    input  wire          wishbone0_ack,
    output wire   [31:0] wishbone0_adr,
    output wire    [1:0] wishbone0_bte,
    output wire    [2:0] wishbone0_cti,
    output wire          wishbone0_cyc,
    input  wire   [31:0] wishbone0_dat_r,
    output wire   [31:0] wishbone0_dat_w,
    input  wire          wishbone0_err,
    output wire    [3:0] wishbone0_sel,
    output wire          wishbone0_stb,
    output wire          wishbone0_we
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
MainSoC
└─── crg (CRG)
└─── bus (SoCBusHandler)
│    └─── _interconnect (Crossbar)
│    │    └─── decoder_0* (Decoder)
│    │    └─── timeout_0* (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
│    │    └─── decoder_1* (Decoder)
│    │    └─── timeout_1* (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
│    │    └─── arbiter_0* (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── arbiter_1* (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── arbiter_2* (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── arbiter_3* (Arbiter)
│    │    │    └─── rr (RoundRobin)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── i2c0 (I2CMaster)
└─── spiflash_phy (LiteSPIPHY)
│    └─── spiflash_phy (LiteSPISDRPHYCore)
│    │    └─── resyncreg_0* (ResyncReg)
│    │    └─── clkgen (LiteSPIClkGen)
│    │    └─── waittimer_0* (WaitTimer)
│    │    └─── fsm (FSM)
└─── spiflash_core (LiteSPI)
│    └─── crossbar (LiteSPICrossbar)
│    │    └─── rr (RoundRobin)
│    │    └─── tx_mux (Multiplexer)
│    │    └─── rx_demux (Demultiplexer)
│    └─── mmap (LiteSPIMMAP)
│    │    └─── waittimer_0* (WaitTimer)
│    │    └─── fsm (FSM)
└─── main_ram (NXLRAM)
│    └─── [SP512K]
└─── verilogwbport_0* (VerilogWBPort)
└─── usb23 (USB23)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── framectl (FrameCtl)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstatus_3* (CSRStatus)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── csrbank_7* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg           _r_re = 1'd0;
reg           _r_status = 1'd0;
wire          _r_we;
reg           _w_re = 1'd0;
reg     [2:0] _w_storage = 3'd5;
wire   [13:0] adr;
reg           arbiter0_grant = 1'd0;
wire    [1:0] arbiter0_request;
reg           arbiter1_grant = 1'd0;
wire    [1:0] arbiter1_request;
wire          arbiter2_grant;
wire          arbiter2_request;
wire          arbiter3_grant;
wire          arbiter3_request;
reg    [29:0] array_muxed0 = 30'd0;
reg    [31:0] array_muxed1 = 32'd0;
reg     [3:0] array_muxed10 = 4'd0;
reg           array_muxed11 = 1'd0;
reg           array_muxed12 = 1'd0;
reg           array_muxed13 = 1'd0;
reg     [2:0] array_muxed14 = 3'd0;
reg     [1:0] array_muxed15 = 2'd0;
reg    [29:0] array_muxed16 = 30'd0;
reg    [31:0] array_muxed17 = 32'd0;
reg     [3:0] array_muxed18 = 4'd0;
reg           array_muxed19 = 1'd0;
reg     [3:0] array_muxed2 = 4'd0;
reg           array_muxed20 = 1'd0;
reg           array_muxed21 = 1'd0;
reg     [2:0] array_muxed22 = 3'd0;
reg     [1:0] array_muxed23 = 2'd0;
reg    [29:0] array_muxed24 = 30'd0;
reg    [31:0] array_muxed25 = 32'd0;
reg     [3:0] array_muxed26 = 4'd0;
reg           array_muxed27 = 1'd0;
reg           array_muxed28 = 1'd0;
reg           array_muxed29 = 1'd0;
reg           array_muxed3 = 1'd0;
reg     [2:0] array_muxed30 = 3'd0;
reg     [1:0] array_muxed31 = 2'd0;
reg           array_muxed4 = 1'd0;
reg           array_muxed5 = 1'd0;
reg     [2:0] array_muxed6 = 3'd0;
reg     [1:0] array_muxed7 = 2'd0;
reg    [29:0] array_muxed8 = 30'd0;
reg    [31:0] array_muxed9 = 32'd0;
reg           bus_error = 1'd0;
reg    [31:0] bus_errors = 32'd0;
reg           bus_errors_re = 1'd0;
wire   [31:0] bus_errors_status;
wire          bus_errors_we;
wire          cpu_rst;
wire   [31:0] csrbank0_bus_errors_r;
reg           csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csrbank0_bus_errors_w;
reg           csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csrbank0_reset0_r;
reg           csrbank0_reset0_re = 1'd0;
wire    [1:0] csrbank0_reset0_w;
reg           csrbank0_reset0_we = 1'd0;
wire   [31:0] csrbank0_scratch0_r;
reg           csrbank0_scratch0_re = 1'd0;
wire   [31:0] csrbank0_scratch0_w;
reg           csrbank0_scratch0_we = 1'd0;
wire          csrbank0_sel;
wire          csrbank1_ev_enable0_r;
reg           csrbank1_ev_enable0_re = 1'd0;
wire          csrbank1_ev_enable0_w;
reg           csrbank1_ev_enable0_we = 1'd0;
wire          csrbank1_ev_pending_r;
reg           csrbank1_ev_pending_re = 1'd0;
wire          csrbank1_ev_pending_w;
reg           csrbank1_ev_pending_we = 1'd0;
wire          csrbank1_ev_status_r;
reg           csrbank1_ev_status_re = 1'd0;
wire          csrbank1_ev_status_w;
reg           csrbank1_ev_status_we = 1'd0;
wire          csrbank1_sel;
wire          csrbank2_r_r;
reg           csrbank2_r_re = 1'd0;
wire          csrbank2_r_w;
reg           csrbank2_r_we = 1'd0;
wire          csrbank2_sel;
wire    [2:0] csrbank2_w0_r;
reg           csrbank2_w0_re = 1'd0;
wire    [2:0] csrbank2_w0_w;
reg           csrbank2_w0_we = 1'd0;
wire    [7:0] csrbank3_mmap_dummy_bits0_r;
reg           csrbank3_mmap_dummy_bits0_re = 1'd0;
wire    [7:0] csrbank3_mmap_dummy_bits0_w;
reg           csrbank3_mmap_dummy_bits0_we = 1'd0;
wire          csrbank3_sel;
wire    [7:0] csrbank4_clk_divisor0_r;
reg           csrbank4_clk_divisor0_re = 1'd0;
wire    [7:0] csrbank4_clk_divisor0_w;
reg           csrbank4_clk_divisor0_we = 1'd0;
wire          csrbank4_sel;
wire          csrbank5_en0_r;
reg           csrbank5_en0_re = 1'd0;
wire          csrbank5_en0_w;
reg           csrbank5_en0_we = 1'd0;
wire          csrbank5_ev_enable0_r;
reg           csrbank5_ev_enable0_re = 1'd0;
wire          csrbank5_ev_enable0_w;
reg           csrbank5_ev_enable0_we = 1'd0;
wire          csrbank5_ev_pending_r;
reg           csrbank5_ev_pending_re = 1'd0;
wire          csrbank5_ev_pending_w;
reg           csrbank5_ev_pending_we = 1'd0;
wire          csrbank5_ev_status_r;
reg           csrbank5_ev_status_re = 1'd0;
wire          csrbank5_ev_status_w;
reg           csrbank5_ev_status_we = 1'd0;
wire   [31:0] csrbank5_load0_r;
reg           csrbank5_load0_re = 1'd0;
wire   [31:0] csrbank5_load0_w;
reg           csrbank5_load0_we = 1'd0;
wire   [31:0] csrbank5_reload0_r;
reg           csrbank5_reload0_re = 1'd0;
wire   [31:0] csrbank5_reload0_w;
reg           csrbank5_reload0_we = 1'd0;
wire          csrbank5_sel;
wire          csrbank5_update_value0_r;
reg           csrbank5_update_value0_re = 1'd0;
wire          csrbank5_update_value0_w;
reg           csrbank5_update_value0_we = 1'd0;
wire   [31:0] csrbank5_uptime_cycles0_r;
reg           csrbank5_uptime_cycles0_re = 1'd0;
wire   [31:0] csrbank5_uptime_cycles0_w;
reg           csrbank5_uptime_cycles0_we = 1'd0;
wire   [31:0] csrbank5_uptime_cycles1_r;
reg           csrbank5_uptime_cycles1_re = 1'd0;
wire   [31:0] csrbank5_uptime_cycles1_w;
reg           csrbank5_uptime_cycles1_we = 1'd0;
wire          csrbank5_uptime_latch0_r;
reg           csrbank5_uptime_latch0_re = 1'd0;
wire          csrbank5_uptime_latch0_w;
reg           csrbank5_uptime_latch0_we = 1'd0;
wire   [31:0] csrbank5_value_r;
reg           csrbank5_value_re = 1'd0;
wire   [31:0] csrbank5_value_w;
reg           csrbank5_value_we = 1'd0;
wire    [1:0] csrbank6_ev_enable0_r;
reg           csrbank6_ev_enable0_re = 1'd0;
wire    [1:0] csrbank6_ev_enable0_w;
reg           csrbank6_ev_enable0_we = 1'd0;
wire    [1:0] csrbank6_ev_pending_r;
reg           csrbank6_ev_pending_re = 1'd0;
wire    [1:0] csrbank6_ev_pending_w;
reg           csrbank6_ev_pending_we = 1'd0;
wire    [1:0] csrbank6_ev_status_r;
reg           csrbank6_ev_status_re = 1'd0;
wire    [1:0] csrbank6_ev_status_w;
reg           csrbank6_ev_status_we = 1'd0;
wire          csrbank6_rxempty_r;
reg           csrbank6_rxempty_re = 1'd0;
wire          csrbank6_rxempty_w;
reg           csrbank6_rxempty_we = 1'd0;
wire          csrbank6_rxfull_r;
reg           csrbank6_rxfull_re = 1'd0;
wire          csrbank6_rxfull_w;
reg           csrbank6_rxfull_we = 1'd0;
wire          csrbank6_sel;
wire          csrbank6_txempty_r;
reg           csrbank6_txempty_re = 1'd0;
wire          csrbank6_txempty_w;
reg           csrbank6_txempty_we = 1'd0;
wire          csrbank6_txfull_r;
reg           csrbank6_txfull_re = 1'd0;
wire          csrbank6_txfull_w;
reg           csrbank6_txfull_we = 1'd0;
wire          csrbank7_ev_enable0_r;
reg           csrbank7_ev_enable0_re = 1'd0;
wire          csrbank7_ev_enable0_w;
reg           csrbank7_ev_enable0_we = 1'd0;
wire          csrbank7_ev_pending_r;
reg           csrbank7_ev_pending_re = 1'd0;
wire          csrbank7_ev_pending_w;
reg           csrbank7_ev_pending_we = 1'd0;
wire          csrbank7_ev_status_r;
reg           csrbank7_ev_status_re = 1'd0;
wire          csrbank7_ev_status_w;
reg           csrbank7_ev_status_we = 1'd0;
wire          csrbank7_sel;
wire   [31:0] dat_r;
wire   [31:0] dat_w;
reg           dbus_ack = 1'd0;
wire   [29:0] dbus_adr;
wire    [1:0] dbus_bte;
wire    [2:0] dbus_cti;
wire          dbus_cyc;
reg    [31:0] dbus_dat_r = 32'd0;
wire   [31:0] dbus_dat_w;
wire          dbus_err;
wire    [3:0] dbus_sel;
wire          dbus_stb;
wire          dbus_we;
reg     [1:0] decoder0_slave_sel = 2'd0;
reg     [1:0] decoder0_slave_sel_r = 2'd0;
reg     [3:0] decoder1_slave_sel = 4'd0;
reg     [3:0] decoder1_slave_sel_r = 4'd0;
reg           framectl_clear = 1'd0;
reg           framectl_enable_re = 1'd0;
reg           framectl_enable_storage = 1'd0;
wire          framectl_frame0;
wire          framectl_frame1;
wire          framectl_frame2;
wire          framectl_irq;
reg           framectl_pending = 1'd0;
reg           framectl_pending_r = 1'd0;
reg           framectl_pending_re = 1'd0;
reg           framectl_pending_status = 1'd0;
wire          framectl_pending_we;
wire          framectl_status;
reg           framectl_status_re = 1'd0;
reg           framectl_status_status = 1'd0;
wire          framectl_status_we;
wire          framectl_trigger;
reg           framectl_trigger_d = 1'd0;
reg           ibus_ack = 1'd0;
wire   [29:0] ibus_adr;
wire    [1:0] ibus_bte;
wire    [2:0] ibus_cti;
wire          ibus_cyc;
reg    [31:0] ibus_dat_r = 32'd0;
wire   [31:0] ibus_dat_w;
wire          ibus_err;
wire    [3:0] ibus_sel;
wire          ibus_stb;
wire          ibus_we;
wire          inferedsdrtristate0__i;
reg           inferedsdrtristate0__o = 1'd0;
reg           inferedsdrtristate0_oe = 1'd0;
wire          inferedsdrtristate1__i;
reg           inferedsdrtristate1__o = 1'd0;
reg           inferedsdrtristate1_oe = 1'd0;
wire          inferedsdrtristate2__i;
reg           inferedsdrtristate2__o = 1'd0;
reg           inferedsdrtristate2_oe = 1'd0;
wire          inferedsdrtristate3__i;
reg           inferedsdrtristate3__o = 1'd0;
reg           inferedsdrtristate3_oe = 1'd0;
reg           int_rst = 1'd1;
reg           interface0_ack = 1'd0;
wire   [29:0] interface0_adr;
wire   [13:0] interface0_bank_bus_adr;
reg    [31:0] interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] interface0_bank_bus_dat_w;
wire          interface0_bank_bus_re;
wire          interface0_bank_bus_we;
wire    [1:0] interface0_bte;
wire    [2:0] interface0_cti;
wire          interface0_cyc;
reg    [31:0] interface0_dat_r = 32'd0;
wire   [31:0] interface0_dat_w;
reg           interface0_err = 1'd0;
wire          interface0_interface_ack;
wire   [29:0] interface0_interface_adr;
wire    [1:0] interface0_interface_bte;
wire    [2:0] interface0_interface_cti;
wire          interface0_interface_cyc;
wire   [31:0] interface0_interface_dat_r;
wire   [31:0] interface0_interface_dat_w;
wire          interface0_interface_err;
wire    [3:0] interface0_interface_sel;
wire          interface0_interface_stb;
wire          interface0_interface_we;
wire    [3:0] interface0_sel;
wire          interface0_stb;
wire          interface0_we;
reg    [13:0] interface1_adr = 14'd0;
wire   [13:0] interface1_bank_bus_adr;
reg    [31:0] interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] interface1_bank_bus_dat_w;
wire          interface1_bank_bus_re;
wire          interface1_bank_bus_we;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
wire          interface1_interface_ack;
wire   [29:0] interface1_interface_adr;
wire    [1:0] interface1_interface_bte;
wire    [2:0] interface1_interface_cti;
wire          interface1_interface_cyc;
wire   [31:0] interface1_interface_dat_r;
wire   [31:0] interface1_interface_dat_w;
wire          interface1_interface_err;
wire    [3:0] interface1_interface_sel;
wire          interface1_interface_stb;
wire          interface1_interface_we;
reg           interface1_re = 1'd0;
reg           interface1_we = 1'd0;
wire   [13:0] interface2_bank_bus_adr;
reg    [31:0] interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] interface2_bank_bus_dat_w;
wire          interface2_bank_bus_re;
wire          interface2_bank_bus_we;
wire          interface2_interface_ack;
wire   [29:0] interface2_interface_adr;
wire    [1:0] interface2_interface_bte;
wire    [2:0] interface2_interface_cti;
wire          interface2_interface_cyc;
wire   [31:0] interface2_interface_dat_r;
wire   [31:0] interface2_interface_dat_w;
wire          interface2_interface_err;
wire    [3:0] interface2_interface_sel;
wire          interface2_interface_stb;
wire          interface2_interface_we;
wire   [13:0] interface3_bank_bus_adr;
reg    [31:0] interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] interface3_bank_bus_dat_w;
wire          interface3_bank_bus_re;
wire          interface3_bank_bus_we;
wire          interface3_interface_ack;
wire   [29:0] interface3_interface_adr;
wire    [1:0] interface3_interface_bte;
wire    [2:0] interface3_interface_cti;
wire          interface3_interface_cyc;
wire   [31:0] interface3_interface_dat_r;
wire   [31:0] interface3_interface_dat_w;
wire          interface3_interface_err;
wire    [3:0] interface3_interface_sel;
wire          interface3_interface_stb;
wire          interface3_interface_we;
wire   [13:0] interface4_bank_bus_adr;
reg    [31:0] interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] interface4_bank_bus_dat_w;
wire          interface4_bank_bus_re;
wire          interface4_bank_bus_we;
wire          interface4_interface_ack;
wire   [29:0] interface4_interface_adr;
wire    [1:0] interface4_interface_bte;
wire    [2:0] interface4_interface_cti;
wire          interface4_interface_cyc;
wire   [31:0] interface4_interface_dat_r;
wire   [31:0] interface4_interface_dat_w;
wire          interface4_interface_err;
wire    [3:0] interface4_interface_sel;
wire          interface4_interface_stb;
wire          interface4_interface_we;
wire   [13:0] interface5_bank_bus_adr;
reg    [31:0] interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] interface5_bank_bus_dat_w;
wire          interface5_bank_bus_re;
wire          interface5_bank_bus_we;
wire          interface5_interface_ack;
wire   [29:0] interface5_interface_adr;
wire    [1:0] interface5_interface_bte;
wire    [2:0] interface5_interface_cti;
wire          interface5_interface_cyc;
wire   [31:0] interface5_interface_dat_r;
wire   [31:0] interface5_interface_dat_w;
wire          interface5_interface_err;
wire    [3:0] interface5_interface_sel;
wire          interface5_interface_stb;
wire          interface5_interface_we;
wire   [13:0] interface6_bank_bus_adr;
reg    [31:0] interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] interface6_bank_bus_dat_w;
wire          interface6_bank_bus_re;
wire          interface6_bank_bus_we;
wire   [13:0] interface7_bank_bus_adr;
reg    [31:0] interface7_bank_bus_dat_r = 32'd0;
wire   [31:0] interface7_bank_bus_dat_w;
wire          interface7_bank_bus_re;
wire          interface7_bank_bus_we;
reg    [31:0] interrupt = 32'd0;
wire          litespi_grant;
reg     [3:0] litespi_next_state = 4'd0;
wire          litespi_request;
wire          litespi_rx_demux_sel;
wire          litespi_rx_demux_sink_first;
wire          litespi_rx_demux_sink_last;
wire   [31:0] litespi_rx_demux_sink_payload_data;
reg           litespi_rx_demux_sink_ready = 1'd0;
wire          litespi_rx_demux_sink_valid;
reg           litespi_rx_demux_source_first = 1'd0;
reg           litespi_rx_demux_source_last = 1'd0;
reg    [31:0] litespi_rx_demux_source_payload_data = 32'd0;
wire          litespi_rx_demux_source_ready;
reg           litespi_rx_demux_source_valid = 1'd0;
reg     [3:0] litespi_state = 4'd0;
wire          litespi_tx_mux_sel;
wire          litespi_tx_mux_sink_first;
wire          litespi_tx_mux_sink_last;
wire   [31:0] litespi_tx_mux_sink_payload_data;
wire    [5:0] litespi_tx_mux_sink_payload_len;
wire    [7:0] litespi_tx_mux_sink_payload_mask;
wire    [3:0] litespi_tx_mux_sink_payload_width;
reg           litespi_tx_mux_sink_ready = 1'd0;
wire          litespi_tx_mux_sink_valid;
reg           litespi_tx_mux_source_first = 1'd0;
reg           litespi_tx_mux_source_last = 1'd0;
reg    [31:0] litespi_tx_mux_source_payload_data = 32'd0;
reg     [5:0] litespi_tx_mux_source_payload_len = 6'd0;
reg     [7:0] litespi_tx_mux_source_payload_mask = 8'd0;
reg     [3:0] litespi_tx_mux_source_payload_width = 4'd0;
wire          litespi_tx_mux_source_ready;
reg           litespi_tx_mux_source_valid = 1'd0;
reg     [1:0] litespiphy_next_state = 2'd0;
reg     [1:0] litespiphy_state = 2'd0;
reg           litespisdrphycore0 = 1'd0;
reg     [1:0] litespisdrphycore1 = 2'd0;
reg     [3:0] litespisdrphycore2 = 4'd0;
reg     [7:0] litespisdrphycore3 = 8'd0;
reg           litespisdrphycore_clk = 1'd0;
reg     [7:0] litespisdrphycore_cnt = 8'd0;
reg     [3:0] litespisdrphycore_count = 4'd11;
wire          litespisdrphycore_cs;
wire          litespisdrphycore_cs_enable;
wire    [7:0] litespisdrphycore_div;
wire          litespisdrphycore_done;
reg     [3:0] litespisdrphycore_dq_i = 4'd0;
reg     [3:0] litespisdrphycore_dq_o = 4'd0;
wire    [3:0] litespisdrphycore_dq_oe;
reg           litespisdrphycore_en = 1'd0;
reg           litespisdrphycore_en_int = 1'd0;
wire          litespisdrphycore_negedge;
wire          litespisdrphycore_posedge;
reg           litespisdrphycore_posedge_reg = 1'd0;
reg           litespisdrphycore_posedge_reg2 = 1'd0;
reg           litespisdrphycore_re = 1'd0;
wire          litespisdrphycore_sample;
wire    [7:0] litespisdrphycore_sample_cnt;
wire          litespisdrphycore_sink_first;
wire          litespisdrphycore_sink_last;
wire   [31:0] litespisdrphycore_sink_payload_data;
wire    [5:0] litespisdrphycore_sink_payload_len;
wire    [7:0] litespisdrphycore_sink_payload_mask;
wire    [3:0] litespisdrphycore_sink_payload_width;
reg           litespisdrphycore_sink_ready = 1'd0;
wire          litespisdrphycore_sink_valid;
reg           litespisdrphycore_source_first = 1'd0;
reg           litespisdrphycore_source_last = 1'd0;
wire   [31:0] litespisdrphycore_source_payload_data;
wire          litespisdrphycore_source_ready;
reg           litespisdrphycore_source_valid = 1'd0;
wire    [7:0] litespisdrphycore_spi_clk_divisor;
reg     [7:0] litespisdrphycore_sr_cnt = 8'd0;
reg     [7:0] litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
reg           litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
reg    [31:0] litespisdrphycore_sr_in = 32'd0;
reg           litespisdrphycore_sr_in_shift = 1'd0;
reg    [31:0] litespisdrphycore_sr_out = 32'd0;
reg           litespisdrphycore_sr_out_load = 1'd0;
reg           litespisdrphycore_sr_out_shift = 1'd0;
reg     [7:0] litespisdrphycore_storage = 8'd0;
wire          litespisdrphycore_update;
wire    [7:0] litespisdrphycore_update_cnt;
wire          litespisdrphycore_wait;
reg           main_ram_bus_ack = 1'd0;
wire   [29:0] main_ram_bus_adr;
wire    [1:0] main_ram_bus_bte;
wire    [2:0] main_ram_bus_cti;
wire          main_ram_bus_cyc;
reg    [31:0] main_ram_bus_dat_r = 32'd0;
wire   [31:0] main_ram_bus_dat_w;
reg           main_ram_bus_err = 1'd0;
wire    [3:0] main_ram_bus_sel;
wire          main_ram_bus_stb;
wire          main_ram_bus_we;
reg           main_ram_cs = 1'd0;
wire   [31:0] main_ram_datain;
wire   [31:0] main_ram_dataout;
reg           main_ram_wren = 1'd0;
wire          oe;
wire          por_clk;
wire          port_bus_ack;
wire   [29:0] port_bus_adr;
wire    [1:0] port_bus_bte;
wire    [2:0] port_bus_cti;
wire          port_bus_cyc;
wire   [31:0] port_bus_dat_r;
wire   [31:0] port_bus_dat_w;
wire          port_bus_err;
wire    [3:0] port_bus_sel;
wire          port_bus_stb;
wire          port_bus_we;
wire          re;
reg           regs0 = 1'd0;
reg           regs1 = 1'd0;
wire          reset;
reg           reset_re = 1'd0;
reg     [1:0] reset_storage = 2'd0;
reg           rs232phyrx_next_state = 1'd0;
reg           rs232phyrx_state = 1'd0;
reg           rs232phytx_next_state = 1'd0;
reg           rs232phytx_state = 1'd0;
reg     [3:0] rx_count = 4'd0;
reg     [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg           rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] rx_data = 8'd0;
reg     [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg           rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           rx_enable = 1'd0;
reg    [31:0] rx_phase = 32'd0;
wire          rx_rx;
reg           rx_rx_d = 1'd0;
reg           rx_source_first = 1'd0;
reg           rx_source_last = 1'd0;
reg     [7:0] rx_source_payload_data = 8'd0;
wire          rx_source_ready;
reg           rx_source_valid = 1'd0;
reg           rx_tick = 1'd0;
wire          scl;
reg           scratch_re = 1'd0;
reg    [31:0] scratch_storage = 32'd305419896;
wire          sda0;
wire          sda1;
wire          sdrio_clk;
wire          sdrio_clk_1;
wire          sdrio_clk_10;
wire          sdrio_clk_11;
wire          sdrio_clk_12;
wire          sdrio_clk_2;
wire          sdrio_clk_3;
wire          sdrio_clk_4;
wire          sdrio_clk_5;
wire          sdrio_clk_6;
wire          sdrio_clk_7;
wire          sdrio_clk_8;
wire          sdrio_clk_9;
reg           serial_tx_rs232phytx_next_value1 = 1'd0;
reg           serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           soc_rst = 1'd0;
reg           spiflash_core_cs = 1'd0;
wire          spiflash_core_internal_port_sink_first;
wire          spiflash_core_internal_port_sink_last;
wire   [31:0] spiflash_core_internal_port_sink_payload_data;
wire    [5:0] spiflash_core_internal_port_sink_payload_len;
wire    [7:0] spiflash_core_internal_port_sink_payload_mask;
wire    [3:0] spiflash_core_internal_port_sink_payload_width;
wire          spiflash_core_internal_port_sink_ready;
wire          spiflash_core_internal_port_sink_valid;
wire          spiflash_core_internal_port_source_first;
wire          spiflash_core_internal_port_source_last;
wire   [31:0] spiflash_core_internal_port_source_payload_data;
wire          spiflash_core_internal_port_source_ready;
wire          spiflash_core_internal_port_source_valid;
reg           spiflash_core_litespimmap0 = 1'd0;
reg           spiflash_core_litespimmap1 = 1'd0;
reg    [29:0] spiflash_core_litespimmap_burst_adr = 30'd0;
reg    [29:0] spiflash_core_litespimmap_burst_adr_litespi_f_next_value = 30'd0;
reg           spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce = 1'd0;
reg           spiflash_core_litespimmap_burst_cs = 1'd0;
reg           spiflash_core_litespimmap_burst_cs_litespi_next_value = 1'd0;
reg           spiflash_core_litespimmap_burst_cs_litespi_next_value_ce = 1'd0;
reg           spiflash_core_litespimmap_bus_ack = 1'd0;
wire   [29:0] spiflash_core_litespimmap_bus_adr;
wire    [1:0] spiflash_core_litespimmap_bus_bte;
wire    [2:0] spiflash_core_litespimmap_bus_cti;
wire          spiflash_core_litespimmap_bus_cyc;
reg    [31:0] spiflash_core_litespimmap_bus_dat_r = 32'd0;
wire   [31:0] spiflash_core_litespimmap_bus_dat_w;
reg           spiflash_core_litespimmap_bus_err = 1'd0;
wire    [3:0] spiflash_core_litespimmap_bus_sel;
wire          spiflash_core_litespimmap_bus_stb;
wire          spiflash_core_litespimmap_bus_we;
reg     [1:0] spiflash_core_litespimmap_byte_count = 2'd0;
reg     [1:0] spiflash_core_litespimmap_byte_count_litespi_t_next_value = 2'd0;
reg           spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce = 1'd0;
reg     [8:0] spiflash_core_litespimmap_count = 9'd256;
reg           spiflash_core_litespimmap_cs = 1'd0;
reg    [31:0] spiflash_core_litespimmap_data_write = 32'd0;
reg    [31:0] spiflash_core_litespimmap_data_write_litespi_t_f_next_value1 = 32'd0;
reg           spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1 = 1'd0;
wire          spiflash_core_litespimmap_done;
reg    [31:0] spiflash_core_litespimmap_dummy = 32'd57005;
wire   [29:0] spiflash_core_litespimmap_offset;
reg           spiflash_core_litespimmap_re = 1'd0;
wire          spiflash_core_litespimmap_sink_first;
wire          spiflash_core_litespimmap_sink_last;
wire   [31:0] spiflash_core_litespimmap_sink_payload_data;
reg           spiflash_core_litespimmap_sink_ready = 1'd0;
wire          spiflash_core_litespimmap_sink_valid;
reg           spiflash_core_litespimmap_source_first = 1'd0;
reg           spiflash_core_litespimmap_source_last = 1'd0;
reg    [31:0] spiflash_core_litespimmap_source_payload_data = 32'd0;
reg     [5:0] spiflash_core_litespimmap_source_payload_len = 6'd0;
reg     [7:0] spiflash_core_litespimmap_source_payload_mask = 8'd0;
reg     [3:0] spiflash_core_litespimmap_source_payload_width = 4'd0;
wire          spiflash_core_litespimmap_source_ready;
reg           spiflash_core_litespimmap_source_valid = 1'd0;
wire    [7:0] spiflash_core_litespimmap_spi_dummy_bits;
reg     [7:0] spiflash_core_litespimmap_storage = 8'd8;
reg           spiflash_core_litespimmap_wait = 1'd0;
reg           spiflash_core_litespimmap_write = 1'd0;
wire          spiflash_core_litespimmap_write_enabled;
reg           spiflash_core_litespimmap_write_litespi_t_t_next_value = 1'd0;
reg           spiflash_core_litespimmap_write_litespi_t_t_next_value_ce = 1'd0;
reg     [3:0] spiflash_core_litespimmap_write_mask = 4'd0;
reg     [3:0] spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 = 4'd0;
reg           spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 = 1'd0;
wire          spiflash_core_request;
wire          spiflash_core_sink_first;
wire          spiflash_core_sink_last;
wire   [31:0] spiflash_core_sink_payload_data;
wire          spiflash_core_sink_ready;
wire          spiflash_core_sink_valid;
wire          spiflash_core_source_first;
wire          spiflash_core_source_last;
wire   [31:0] spiflash_core_source_payload_data;
wire    [5:0] spiflash_core_source_payload_len;
wire    [7:0] spiflash_core_source_payload_mask;
wire    [3:0] spiflash_core_source_payload_width;
wire          spiflash_core_source_ready;
wire          spiflash_core_source_valid;
wire          spiflash_core_user_port_sink_first;
wire          spiflash_core_user_port_sink_last;
wire   [31:0] spiflash_core_user_port_sink_payload_data;
wire    [5:0] spiflash_core_user_port_sink_payload_len;
wire    [7:0] spiflash_core_user_port_sink_payload_mask;
wire    [3:0] spiflash_core_user_port_sink_payload_width;
wire          spiflash_core_user_port_sink_ready;
wire          spiflash_core_user_port_sink_valid;
wire          spiflash_core_user_port_source_first;
wire          spiflash_core_user_port_source_last;
wire   [31:0] spiflash_core_user_port_source_payload_data;
wire          spiflash_core_user_port_source_ready;
wire          spiflash_core_user_port_source_valid;
wire          sys_clk_1;
wire          sys_rst_1;
reg    [19:0] timeout0_count = 20'd1000000;
wire          timeout0_done;
reg           timeout0_error = 1'd0;
wire          timeout0_wait;
reg    [19:0] timeout1_count = 20'd1000000;
wire          timeout1_done;
reg           timeout1_error = 1'd0;
wire          timeout1_wait;
reg           timer_en_re = 1'd0;
reg           timer_en_storage = 1'd0;
reg           timer_enable_re = 1'd0;
reg           timer_enable_storage = 1'd0;
wire          timer_irq;
reg           timer_load_re = 1'd0;
reg    [31:0] timer_load_storage = 32'd0;
reg           timer_pending_r = 1'd0;
reg           timer_pending_re = 1'd0;
reg           timer_pending_status = 1'd0;
wire          timer_pending_we;
reg           timer_reload_re = 1'd0;
reg    [31:0] timer_reload_storage = 32'd0;
reg           timer_status_re = 1'd0;
reg           timer_status_status = 1'd0;
wire          timer_status_we;
reg           timer_update_value_re = 1'd0;
reg           timer_update_value_storage = 1'd0;
reg    [31:0] timer_value = 32'd0;
reg           timer_value_re = 1'd0;
reg    [31:0] timer_value_status = 32'd0;
wire          timer_value_we;
wire          timer_zero0;
wire          timer_zero1;
wire          timer_zero2;
reg           timer_zero_clear = 1'd0;
reg           timer_zero_pending = 1'd0;
wire          timer_zero_status;
wire          timer_zero_trigger;
reg           timer_zero_trigger_d = 1'd0;
reg     [3:0] tx_count = 4'd0;
reg     [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg           tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] tx_data = 8'd0;
reg     [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg           tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           tx_enable = 1'd0;
reg    [31:0] tx_phase = 32'd0;
wire          tx_sink_first;
wire          tx_sink_last;
wire    [7:0] tx_sink_payload_data;
reg           tx_sink_ready = 1'd0;
wire          tx_sink_valid;
reg           tx_tick = 1'd0;
reg           uart_enable_re = 1'd0;
reg     [1:0] uart_enable_storage = 2'd0;
wire          uart_irq;
reg     [1:0] uart_pending_r = 2'd0;
reg           uart_pending_re = 1'd0;
reg     [1:0] uart_pending_status = 2'd0;
wire          uart_pending_we;
wire          uart_rx0;
wire          uart_rx1;
wire          uart_rx2;
reg           uart_rx_clear = 1'd0;
reg     [3:0] uart_rx_fifo_consume = 4'd0;
wire          uart_rx_fifo_do_read;
wire          uart_rx_fifo_fifo_in_first;
wire          uart_rx_fifo_fifo_in_last;
wire    [7:0] uart_rx_fifo_fifo_in_payload_data;
wire          uart_rx_fifo_fifo_out_first;
wire          uart_rx_fifo_fifo_out_last;
wire    [7:0] uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] uart_rx_fifo_level0 = 5'd0;
wire    [4:0] uart_rx_fifo_level1;
reg     [3:0] uart_rx_fifo_produce = 4'd0;
wire    [3:0] uart_rx_fifo_rdport_adr;
wire    [9:0] uart_rx_fifo_rdport_dat_r;
wire          uart_rx_fifo_rdport_re;
wire          uart_rx_fifo_re;
reg           uart_rx_fifo_readable = 1'd0;
reg           uart_rx_fifo_replace = 1'd0;
wire          uart_rx_fifo_sink_first;
wire          uart_rx_fifo_sink_last;
wire    [7:0] uart_rx_fifo_sink_payload_data;
wire          uart_rx_fifo_sink_ready;
wire          uart_rx_fifo_sink_valid;
wire          uart_rx_fifo_source_first;
wire          uart_rx_fifo_source_last;
wire    [7:0] uart_rx_fifo_source_payload_data;
wire          uart_rx_fifo_source_ready;
wire          uart_rx_fifo_source_valid;
wire    [9:0] uart_rx_fifo_syncfifo_din;
wire    [9:0] uart_rx_fifo_syncfifo_dout;
wire          uart_rx_fifo_syncfifo_re;
wire          uart_rx_fifo_syncfifo_readable;
wire          uart_rx_fifo_syncfifo_we;
wire          uart_rx_fifo_syncfifo_writable;
reg     [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_rx_fifo_wrport_dat_r;
wire    [9:0] uart_rx_fifo_wrport_dat_w;
wire          uart_rx_fifo_wrport_we;
reg           uart_rx_pending = 1'd0;
wire          uart_rx_status;
wire          uart_rx_trigger;
reg           uart_rx_trigger_d = 1'd0;
reg           uart_rxempty_re = 1'd0;
wire          uart_rxempty_status;
wire          uart_rxempty_we;
reg           uart_rxfull_re = 1'd0;
wire          uart_rxfull_status;
wire          uart_rxfull_we;
wire    [7:0] uart_rxtx_r;
reg           uart_rxtx_re = 1'd0;
wire    [7:0] uart_rxtx_w;
reg           uart_rxtx_we = 1'd0;
reg           uart_status_re = 1'd0;
reg     [1:0] uart_status_status = 2'd0;
wire          uart_status_we;
wire          uart_tx0;
wire          uart_tx1;
wire          uart_tx2;
reg           uart_tx_clear = 1'd0;
reg     [3:0] uart_tx_fifo_consume = 4'd0;
wire          uart_tx_fifo_do_read;
wire          uart_tx_fifo_fifo_in_first;
wire          uart_tx_fifo_fifo_in_last;
wire    [7:0] uart_tx_fifo_fifo_in_payload_data;
wire          uart_tx_fifo_fifo_out_first;
wire          uart_tx_fifo_fifo_out_last;
wire    [7:0] uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] uart_tx_fifo_level0 = 5'd0;
wire    [4:0] uart_tx_fifo_level1;
reg     [3:0] uart_tx_fifo_produce = 4'd0;
wire    [3:0] uart_tx_fifo_rdport_adr;
wire    [9:0] uart_tx_fifo_rdport_dat_r;
wire          uart_tx_fifo_rdport_re;
wire          uart_tx_fifo_re;
reg           uart_tx_fifo_readable = 1'd0;
reg           uart_tx_fifo_replace = 1'd0;
reg           uart_tx_fifo_sink_first = 1'd0;
reg           uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] uart_tx_fifo_sink_payload_data;
wire          uart_tx_fifo_sink_ready;
wire          uart_tx_fifo_sink_valid;
wire          uart_tx_fifo_source_first;
wire          uart_tx_fifo_source_last;
wire    [7:0] uart_tx_fifo_source_payload_data;
wire          uart_tx_fifo_source_ready;
wire          uart_tx_fifo_source_valid;
wire    [9:0] uart_tx_fifo_syncfifo_din;
wire    [9:0] uart_tx_fifo_syncfifo_dout;
wire          uart_tx_fifo_syncfifo_re;
wire          uart_tx_fifo_syncfifo_readable;
wire          uart_tx_fifo_syncfifo_we;
wire          uart_tx_fifo_syncfifo_writable;
reg     [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_tx_fifo_wrport_dat_r;
wire    [9:0] uart_tx_fifo_wrport_dat_w;
wire          uart_tx_fifo_wrport_we;
reg           uart_tx_pending = 1'd0;
wire          uart_tx_status;
wire          uart_tx_trigger;
reg           uart_tx_trigger_d = 1'd0;
reg           uart_txempty_re = 1'd0;
wire          uart_txempty_status;
wire          uart_txempty_we;
reg           uart_txfull_re = 1'd0;
wire          uart_txfull_status;
wire          uart_txfull_we;
wire          uart_uart_sink_first;
wire          uart_uart_sink_last;
wire    [7:0] uart_uart_sink_payload_data;
wire          uart_uart_sink_ready;
wire          uart_uart_sink_valid;
wire          uart_uart_source_first;
wire          uart_uart_source_last;
wire    [7:0] uart_uart_source_payload_data;
wire          uart_uart_source_ready;
wire          uart_uart_source_valid;
reg    [63:0] uptime_cycles = 64'd0;
reg           uptime_cycles_re = 1'd0;
reg    [63:0] uptime_cycles_status = 64'd0;
wire          uptime_cycles_we;
reg           uptime_latch_re = 1'd0;
reg           uptime_latch_storage = 1'd0;
reg           usb23_clear = 1'd0;
reg           usb23_enable_re = 1'd0;
reg           usb23_enable_storage = 1'd0;
wire          usb23_irq;
reg           usb23_pending = 1'd0;
reg           usb23_pending_r = 1'd0;
reg           usb23_pending_re = 1'd0;
reg           usb23_pending_status = 1'd0;
wire          usb23_pending_we;
wire          usb23_status;
reg           usb23_status_re = 1'd0;
reg           usb23_status_status = 1'd0;
wire          usb23_status_we;
wire          usb23_trigger;
reg           usb23_trigger_d = 1'd0;
wire          usb23_usb0;
wire          usb23_usb1;
wire          usb23_usb2;
reg    [31:0] vexriscv = 32'd537919488;
wire          we;
reg           wishbone2csr_next_state = 1'd0;
reg           wishbone2csr_state = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign spiflash_core_litespimmap_offset = 30'd536870912;
always @(*) begin
    interrupt <= 32'd0;
    interrupt[4] <= framectl_irq;
    interrupt[1] <= timer_irq;
    interrupt[2] <= uart_irq;
    interrupt[0] <= usb23_irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst_1 = int_rst;
always @(*) begin
    decoder0_slave_sel <= 2'd0;
    decoder0_slave_sel[0] <= (ibus_adr[29:22] == 6'd32);
    decoder0_slave_sel[1] <= (ibus_adr[29:14] == 15'd16384);
end
assign interface0_interface_adr = ibus_adr;
assign interface0_interface_dat_w = ibus_dat_w;
assign interface0_interface_sel = ibus_sel;
assign interface0_interface_stb = ibus_stb;
assign interface0_interface_we = ibus_we;
assign interface0_interface_cti = ibus_cti;
assign interface0_interface_bte = ibus_bte;
assign interface1_interface_adr = ibus_adr;
assign interface1_interface_dat_w = ibus_dat_w;
assign interface1_interface_sel = ibus_sel;
assign interface1_interface_stb = ibus_stb;
assign interface1_interface_we = ibus_we;
assign interface1_interface_cti = ibus_cti;
assign interface1_interface_bte = ibus_bte;
assign interface0_interface_cyc = (ibus_cyc & decoder0_slave_sel[0]);
assign interface1_interface_cyc = (ibus_cyc & decoder0_slave_sel[1]);
assign ibus_err = (interface0_interface_err | interface1_interface_err);
assign timeout0_wait = ((ibus_stb & ibus_cyc) & (~ibus_ack));
always @(*) begin
    ibus_ack <= 1'd0;
    ibus_dat_r <= 32'd0;
    timeout0_error <= 1'd0;
    ibus_ack <= (interface0_interface_ack | interface1_interface_ack);
    ibus_dat_r <= (({32{decoder0_slave_sel_r[0]}} & interface0_interface_dat_r) | ({32{decoder0_slave_sel_r[1]}} & interface1_interface_dat_r));
    if (timeout0_done) begin
        ibus_dat_r <= 32'd4294967295;
        ibus_ack <= 1'd1;
        timeout0_error <= 1'd1;
    end
end
assign timeout0_done = (timeout0_count == 1'd0);
always @(*) begin
    decoder1_slave_sel <= 4'd0;
    decoder1_slave_sel[0] <= (dbus_adr[29:22] == 6'd32);
    decoder1_slave_sel[1] <= (dbus_adr[29:14] == 15'd16384);
    decoder1_slave_sel[2] <= (dbus_adr[29:26] == 4'd11);
    decoder1_slave_sel[3] <= (dbus_adr[29:14] == 16'd57344);
end
assign interface2_interface_adr = dbus_adr;
assign interface2_interface_dat_w = dbus_dat_w;
assign interface2_interface_sel = dbus_sel;
assign interface2_interface_stb = dbus_stb;
assign interface2_interface_we = dbus_we;
assign interface2_interface_cti = dbus_cti;
assign interface2_interface_bte = dbus_bte;
assign interface3_interface_adr = dbus_adr;
assign interface3_interface_dat_w = dbus_dat_w;
assign interface3_interface_sel = dbus_sel;
assign interface3_interface_stb = dbus_stb;
assign interface3_interface_we = dbus_we;
assign interface3_interface_cti = dbus_cti;
assign interface3_interface_bte = dbus_bte;
assign interface4_interface_adr = dbus_adr;
assign interface4_interface_dat_w = dbus_dat_w;
assign interface4_interface_sel = dbus_sel;
assign interface4_interface_stb = dbus_stb;
assign interface4_interface_we = dbus_we;
assign interface4_interface_cti = dbus_cti;
assign interface4_interface_bte = dbus_bte;
assign interface5_interface_adr = dbus_adr;
assign interface5_interface_dat_w = dbus_dat_w;
assign interface5_interface_sel = dbus_sel;
assign interface5_interface_stb = dbus_stb;
assign interface5_interface_we = dbus_we;
assign interface5_interface_cti = dbus_cti;
assign interface5_interface_bte = dbus_bte;
assign interface2_interface_cyc = (dbus_cyc & decoder1_slave_sel[0]);
assign interface3_interface_cyc = (dbus_cyc & decoder1_slave_sel[1]);
assign interface4_interface_cyc = (dbus_cyc & decoder1_slave_sel[2]);
assign interface5_interface_cyc = (dbus_cyc & decoder1_slave_sel[3]);
assign dbus_err = (((interface2_interface_err | interface3_interface_err) | interface4_interface_err) | interface5_interface_err);
assign timeout1_wait = ((dbus_stb & dbus_cyc) & (~dbus_ack));
always @(*) begin
    dbus_ack <= 1'd0;
    dbus_dat_r <= 32'd0;
    timeout1_error <= 1'd0;
    dbus_ack <= (((interface2_interface_ack | interface3_interface_ack) | interface4_interface_ack) | interface5_interface_ack);
    dbus_dat_r <= (((({32{decoder1_slave_sel_r[0]}} & interface2_interface_dat_r) | ({32{decoder1_slave_sel_r[1]}} & interface3_interface_dat_r)) | ({32{decoder1_slave_sel_r[2]}} & interface4_interface_dat_r)) | ({32{decoder1_slave_sel_r[3]}} & interface5_interface_dat_r));
    if (timeout1_done) begin
        dbus_dat_r <= 32'd4294967295;
        dbus_ack <= 1'd1;
        timeout1_error <= 1'd1;
    end
end
assign timeout1_done = (timeout1_count == 1'd0);
assign spiflash_core_litespimmap_bus_adr = array_muxed0;
assign spiflash_core_litespimmap_bus_dat_w = array_muxed1;
assign spiflash_core_litespimmap_bus_sel = array_muxed2;
assign spiflash_core_litespimmap_bus_cyc = array_muxed3;
assign spiflash_core_litespimmap_bus_stb = array_muxed4;
assign spiflash_core_litespimmap_bus_we = array_muxed5;
assign spiflash_core_litespimmap_bus_cti = array_muxed6;
assign spiflash_core_litespimmap_bus_bte = array_muxed7;
assign interface0_interface_dat_r = spiflash_core_litespimmap_bus_dat_r;
assign interface2_interface_dat_r = spiflash_core_litespimmap_bus_dat_r;
assign interface0_interface_ack = (spiflash_core_litespimmap_bus_ack & (arbiter0_grant == 1'd0));
assign interface2_interface_ack = (spiflash_core_litespimmap_bus_ack & (arbiter0_grant == 1'd1));
assign interface0_interface_err = (spiflash_core_litespimmap_bus_err & (arbiter0_grant == 1'd0));
assign interface2_interface_err = (spiflash_core_litespimmap_bus_err & (arbiter0_grant == 1'd1));
assign arbiter0_request = {interface2_interface_cyc, interface0_interface_cyc};
assign main_ram_bus_adr = array_muxed8;
assign main_ram_bus_dat_w = array_muxed9;
assign main_ram_bus_sel = array_muxed10;
assign main_ram_bus_cyc = array_muxed11;
assign main_ram_bus_stb = array_muxed12;
assign main_ram_bus_we = array_muxed13;
assign main_ram_bus_cti = array_muxed14;
assign main_ram_bus_bte = array_muxed15;
assign interface1_interface_dat_r = main_ram_bus_dat_r;
assign interface3_interface_dat_r = main_ram_bus_dat_r;
assign interface1_interface_ack = (main_ram_bus_ack & (arbiter1_grant == 1'd0));
assign interface3_interface_ack = (main_ram_bus_ack & (arbiter1_grant == 1'd1));
assign interface1_interface_err = (main_ram_bus_err & (arbiter1_grant == 1'd0));
assign interface3_interface_err = (main_ram_bus_err & (arbiter1_grant == 1'd1));
assign arbiter1_request = {interface3_interface_cyc, interface1_interface_cyc};
assign port_bus_adr = array_muxed16;
assign port_bus_dat_w = array_muxed17;
assign port_bus_sel = array_muxed18;
assign port_bus_cyc = array_muxed19;
assign port_bus_stb = array_muxed20;
assign port_bus_we = array_muxed21;
assign port_bus_cti = array_muxed22;
assign port_bus_bte = array_muxed23;
assign interface4_interface_dat_r = port_bus_dat_r;
assign interface4_interface_ack = (port_bus_ack & (arbiter2_grant == 1'd0));
assign interface4_interface_err = (port_bus_err & (arbiter2_grant == 1'd0));
assign arbiter2_request = {interface4_interface_cyc};
assign arbiter2_grant = 1'd0;
assign interface0_adr = array_muxed24;
assign interface0_dat_w = array_muxed25;
assign interface0_sel = array_muxed26;
assign interface0_cyc = array_muxed27;
assign interface0_stb = array_muxed28;
assign interface0_we = array_muxed29;
assign interface0_cti = array_muxed30;
assign interface0_bte = array_muxed31;
assign interface5_interface_dat_r = interface0_dat_r;
assign interface5_interface_ack = (interface0_ack & (arbiter3_grant == 1'd0));
assign interface5_interface_err = (interface0_err & (arbiter3_grant == 1'd0));
assign arbiter3_request = {interface5_interface_cyc};
assign arbiter3_grant = 1'd0;
assign bus_errors_status = bus_errors;
always @(*) begin
    rs232phytx_next_state <= 1'd0;
    serial_tx_rs232phytx_next_value1 <= 1'd0;
    serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    tx_count_rs232phytx_next_value0 <= 4'd0;
    tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    tx_data_rs232phytx_next_value2 <= 8'd0;
    tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    tx_enable <= 1'd0;
    tx_sink_ready <= 1'd0;
    rs232phytx_next_state <= rs232phytx_state;
    case (rs232phytx_state)
        1'd1: begin
            tx_enable <= 1'd1;
            if (tx_tick) begin
                serial_tx_rs232phytx_next_value1 <= tx_data;
                serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
                tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((tx_count == 4'd9)) begin
                    tx_sink_ready <= 1'd1;
                    rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            tx_count_rs232phytx_next_value0 <= 1'd0;
            tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            serial_tx_rs232phytx_next_value1 <= 1'd1;
            serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (tx_sink_valid) begin
                serial_tx_rs232phytx_next_value1 <= 1'd0;
                serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    rs232phyrx_next_state <= 1'd0;
    rx_count_rs232phyrx_next_value0 <= 4'd0;
    rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    rx_data_rs232phyrx_next_value1 <= 8'd0;
    rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    rx_enable <= 1'd0;
    rx_source_payload_data <= 8'd0;
    rx_source_valid <= 1'd0;
    rs232phyrx_next_state <= rs232phyrx_state;
    case (rs232phyrx_state)
        1'd1: begin
            rx_enable <= 1'd1;
            if (rx_tick) begin
                rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
                rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
                rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((rx_count == 4'd9)) begin
                    rx_source_valid <= (rx_rx == 1'd1);
                    rx_source_payload_data <= rx_data;
                    rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            rx_count_rs232phyrx_next_value0 <= 1'd0;
            rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
                rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
    uart_tx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[0])) begin
        uart_tx_clear <= 1'd1;
    end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
    uart_rx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[1])) begin
        uart_rx_clear <= 1'd1;
    end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
    uart_tx_fifo_wrport_adr <= 4'd0;
    if (uart_tx_fifo_replace) begin
        uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
    end else begin
        uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
    end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
    uart_rx_fifo_wrport_adr <= 4'd0;
    if (uart_rx_fifo_replace) begin
        uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
    end else begin
        uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
    end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
    timer_zero_clear <= 1'd0;
    if ((timer_pending_re & timer_pending_r)) begin
        timer_zero_clear <= 1'd1;
    end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign litespisdrphycore_div = litespisdrphycore_spi_clk_divisor;
assign litespisdrphycore_sample_cnt = 1'd1;
assign litespisdrphycore_update_cnt = 1'd1;
assign litespisdrphycore_wait = litespisdrphycore_cs;
assign litespisdrphycore_cs_enable = litespisdrphycore_done;
assign spiflash4x_cs_n = (~litespisdrphycore_cs_enable);
assign litespisdrphycore_dq_oe = litespisdrphycore_sink_payload_mask;
always @(*) begin
    litespisdrphycore_dq_o <= 4'd0;
    case (litespisdrphycore_sink_payload_width)
        1'd1: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31];
        end
        2'd2: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31:30];
        end
        3'd4: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31:28];
        end
        4'd8: begin
            litespisdrphycore_dq_o <= litespisdrphycore_sr_out[31:24];
        end
    endcase
end
assign litespisdrphycore_source_payload_data = litespisdrphycore_sr_in;
assign litespisdrphycore_spi_clk_divisor = litespisdrphycore_storage;
assign litespisdrphycore_posedge = ((litespisdrphycore_en & (~litespisdrphycore_clk)) & (litespisdrphycore_cnt == litespisdrphycore_div));
assign litespisdrphycore_negedge = ((litespisdrphycore_en & litespisdrphycore_clk) & (litespisdrphycore_cnt == litespisdrphycore_div));
assign litespisdrphycore_sample = (litespisdrphycore_cnt == litespisdrphycore_sample_cnt);
assign litespisdrphycore_update = (litespisdrphycore_cnt == litespisdrphycore_update_cnt);
assign litespisdrphycore_done = (litespisdrphycore_count == 1'd0);
always @(*) begin
    litespiphy_next_state <= 2'd0;
    litespisdrphycore_en <= 1'd0;
    litespisdrphycore_sink_ready <= 1'd0;
    litespisdrphycore_source_last <= 1'd0;
    litespisdrphycore_source_valid <= 1'd0;
    litespisdrphycore_sr_cnt_litespiphy_next_value <= 8'd0;
    litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd0;
    litespisdrphycore_sr_in_shift <= 1'd0;
    litespisdrphycore_sr_out_load <= 1'd0;
    litespisdrphycore_sr_out_shift <= 1'd0;
    litespiphy_next_state <= litespiphy_state;
    case (litespiphy_state)
        1'd1: begin
            litespisdrphycore_en <= 1'd1;
            if (litespisdrphycore_posedge_reg2) begin
                litespisdrphycore_sr_in_shift <= 1'd1;
            end
            if (litespisdrphycore_negedge) begin
                litespisdrphycore_sr_out_shift <= 1'd1;
            end
            if (litespisdrphycore_negedge) begin
                litespisdrphycore_sr_cnt_litespiphy_next_value <= (litespisdrphycore_sr_cnt - litespisdrphycore_sink_payload_width);
                litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
                if ((litespisdrphycore_sr_cnt == 1'd0)) begin
                    litespiphy_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (((litespisdrphycore_spi_clk_divisor > 1'd0) | litespisdrphycore_posedge_reg2)) begin
                litespisdrphycore_sink_ready <= 1'd1;
                litespisdrphycore_sr_in_shift <= (litespisdrphycore_spi_clk_divisor == 1'd0);
                litespiphy_next_state <= 2'd3;
            end
        end
        2'd3: begin
            litespisdrphycore_source_valid <= 1'd1;
            litespisdrphycore_source_last <= 1'd1;
            if (litespisdrphycore_source_ready) begin
                litespiphy_next_state <= 1'd0;
            end
        end
        default: begin
            if ((litespisdrphycore_cs_enable & litespisdrphycore_sink_valid)) begin
                litespisdrphycore_sr_cnt_litespiphy_next_value <= (litespisdrphycore_sink_payload_len - litespisdrphycore_sink_payload_width);
                litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
                litespisdrphycore_sr_out_load <= 1'd1;
                litespiphy_next_state <= 1'd1;
            end
        end
    endcase
end
assign litespisdrphycore_cs = spiflash_core_cs;
assign spiflash_core_litespimmap_sink_valid = spiflash_core_user_port_source_valid;
assign spiflash_core_user_port_source_ready = spiflash_core_litespimmap_sink_ready;
assign spiflash_core_litespimmap_sink_first = spiflash_core_user_port_source_first;
assign spiflash_core_litespimmap_sink_last = spiflash_core_user_port_source_last;
assign spiflash_core_litespimmap_sink_payload_data = spiflash_core_user_port_source_payload_data;
assign spiflash_core_user_port_sink_valid = spiflash_core_litespimmap_source_valid;
assign spiflash_core_litespimmap_source_ready = spiflash_core_user_port_sink_ready;
assign spiflash_core_user_port_sink_first = spiflash_core_litespimmap_source_first;
assign spiflash_core_user_port_sink_last = spiflash_core_litespimmap_source_last;
assign spiflash_core_user_port_sink_payload_data = spiflash_core_litespimmap_source_payload_data;
assign spiflash_core_user_port_sink_payload_len = spiflash_core_litespimmap_source_payload_len;
assign spiflash_core_user_port_sink_payload_width = spiflash_core_litespimmap_source_payload_width;
assign spiflash_core_user_port_sink_payload_mask = spiflash_core_litespimmap_source_payload_mask;
assign litespisdrphycore_sink_valid = spiflash_core_source_valid;
assign spiflash_core_source_ready = litespisdrphycore_sink_ready;
assign litespisdrphycore_sink_first = spiflash_core_source_first;
assign litespisdrphycore_sink_last = spiflash_core_source_last;
assign litespisdrphycore_sink_payload_data = spiflash_core_source_payload_data;
assign litespisdrphycore_sink_payload_len = spiflash_core_source_payload_len;
assign litespisdrphycore_sink_payload_width = spiflash_core_source_payload_width;
assign litespisdrphycore_sink_payload_mask = spiflash_core_source_payload_mask;
assign spiflash_core_sink_valid = litespisdrphycore_source_valid;
assign litespisdrphycore_source_ready = spiflash_core_sink_ready;
assign spiflash_core_sink_first = litespisdrphycore_source_first;
assign spiflash_core_sink_last = litespisdrphycore_source_last;
assign spiflash_core_sink_payload_data = litespisdrphycore_source_payload_data;
assign spiflash_core_internal_port_sink_valid = spiflash_core_user_port_sink_valid;
assign spiflash_core_user_port_sink_ready = spiflash_core_internal_port_sink_ready;
assign spiflash_core_internal_port_sink_first = spiflash_core_user_port_sink_first;
assign spiflash_core_internal_port_sink_last = spiflash_core_user_port_sink_last;
assign spiflash_core_internal_port_sink_payload_data = spiflash_core_user_port_sink_payload_data;
assign spiflash_core_internal_port_sink_payload_len = spiflash_core_user_port_sink_payload_len;
assign spiflash_core_internal_port_sink_payload_width = spiflash_core_user_port_sink_payload_width;
assign spiflash_core_internal_port_sink_payload_mask = spiflash_core_user_port_sink_payload_mask;
assign spiflash_core_user_port_source_valid = spiflash_core_internal_port_source_valid;
assign spiflash_core_internal_port_source_ready = spiflash_core_user_port_source_ready;
assign spiflash_core_user_port_source_first = spiflash_core_internal_port_source_first;
assign spiflash_core_user_port_source_last = spiflash_core_internal_port_source_last;
assign spiflash_core_user_port_source_payload_data = spiflash_core_internal_port_source_payload_data;
assign spiflash_core_request = spiflash_core_litespimmap_cs;
assign litespi_tx_mux_sink_valid = spiflash_core_internal_port_sink_valid;
assign spiflash_core_internal_port_sink_ready = litespi_tx_mux_sink_ready;
assign litespi_tx_mux_sink_first = spiflash_core_internal_port_sink_first;
assign litespi_tx_mux_sink_last = spiflash_core_internal_port_sink_last;
assign litespi_tx_mux_sink_payload_data = spiflash_core_internal_port_sink_payload_data;
assign litespi_tx_mux_sink_payload_len = spiflash_core_internal_port_sink_payload_len;
assign litespi_tx_mux_sink_payload_width = spiflash_core_internal_port_sink_payload_width;
assign litespi_tx_mux_sink_payload_mask = spiflash_core_internal_port_sink_payload_mask;
assign spiflash_core_internal_port_source_valid = litespi_rx_demux_source_valid;
assign litespi_rx_demux_source_ready = spiflash_core_internal_port_source_ready;
assign spiflash_core_internal_port_source_first = litespi_rx_demux_source_first;
assign spiflash_core_internal_port_source_last = litespi_rx_demux_source_last;
assign spiflash_core_internal_port_source_payload_data = litespi_rx_demux_source_payload_data;
assign litespi_request = {spiflash_core_request};
assign spiflash_core_source_valid = litespi_tx_mux_source_valid;
assign litespi_tx_mux_source_ready = spiflash_core_source_ready;
assign spiflash_core_source_first = litespi_tx_mux_source_first;
assign spiflash_core_source_last = litespi_tx_mux_source_last;
assign spiflash_core_source_payload_data = litespi_tx_mux_source_payload_data;
assign spiflash_core_source_payload_len = litespi_tx_mux_source_payload_len;
assign spiflash_core_source_payload_width = litespi_tx_mux_source_payload_width;
assign spiflash_core_source_payload_mask = litespi_tx_mux_source_payload_mask;
assign litespi_tx_mux_sel = litespi_grant;
assign litespi_rx_demux_sink_valid = spiflash_core_sink_valid;
assign spiflash_core_sink_ready = litespi_rx_demux_sink_ready;
assign litespi_rx_demux_sink_first = spiflash_core_sink_first;
assign litespi_rx_demux_sink_last = spiflash_core_sink_last;
assign litespi_rx_demux_sink_payload_data = spiflash_core_sink_payload_data;
assign litespi_rx_demux_sel = litespi_grant;
always @(*) begin
    spiflash_core_cs <= 1'd0;
    case (litespi_grant)
        1'd0: begin
            spiflash_core_cs <= spiflash_core_litespimmap_cs;
        end
    endcase
end
assign litespi_grant = 1'd0;
always @(*) begin
    litespi_tx_mux_sink_ready <= 1'd0;
    litespi_tx_mux_source_first <= 1'd0;
    litespi_tx_mux_source_last <= 1'd0;
    litespi_tx_mux_source_payload_data <= 32'd0;
    litespi_tx_mux_source_payload_len <= 6'd0;
    litespi_tx_mux_source_payload_mask <= 8'd0;
    litespi_tx_mux_source_payload_width <= 4'd0;
    litespi_tx_mux_source_valid <= 1'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_source_valid <= litespi_tx_mux_sink_valid;
            litespi_tx_mux_sink_ready <= litespi_tx_mux_source_ready;
            litespi_tx_mux_source_first <= litespi_tx_mux_sink_first;
            litespi_tx_mux_source_last <= litespi_tx_mux_sink_last;
            litespi_tx_mux_source_payload_data <= litespi_tx_mux_sink_payload_data;
            litespi_tx_mux_source_payload_len <= litespi_tx_mux_sink_payload_len;
            litespi_tx_mux_source_payload_width <= litespi_tx_mux_sink_payload_width;
            litespi_tx_mux_source_payload_mask <= litespi_tx_mux_sink_payload_mask;
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_sink_ready <= 1'd0;
    litespi_rx_demux_source_first <= 1'd0;
    litespi_rx_demux_source_last <= 1'd0;
    litespi_rx_demux_source_payload_data <= 32'd0;
    litespi_rx_demux_source_valid <= 1'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
            litespi_rx_demux_source_valid <= litespi_rx_demux_sink_valid;
            litespi_rx_demux_sink_ready <= litespi_rx_demux_source_ready;
            litespi_rx_demux_source_first <= litespi_rx_demux_sink_first;
            litespi_rx_demux_source_last <= litespi_rx_demux_sink_last;
            litespi_rx_demux_source_payload_data <= litespi_rx_demux_sink_payload_data;
        end
    endcase
end
assign spiflash_core_litespimmap_spi_dummy_bits = spiflash_core_litespimmap_storage;
assign spiflash_core_litespimmap_write_enabled = 1'd0;
assign spiflash_core_litespimmap_done = (spiflash_core_litespimmap_count == 1'd0);
always @(*) begin
    litespi_next_state <= 4'd0;
    spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= 30'd0;
    spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd0;
    spiflash_core_litespimmap_burst_cs_litespi_next_value <= 1'd0;
    spiflash_core_litespimmap_burst_cs_litespi_next_value_ce <= 1'd0;
    spiflash_core_litespimmap_bus_ack <= 1'd0;
    spiflash_core_litespimmap_bus_dat_r <= 32'd0;
    spiflash_core_litespimmap_byte_count_litespi_t_next_value <= 2'd0;
    spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd0;
    spiflash_core_litespimmap_cs <= 1'd0;
    spiflash_core_litespimmap_data_write_litespi_t_f_next_value1 <= 32'd0;
    spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd0;
    spiflash_core_litespimmap_sink_ready <= 1'd0;
    spiflash_core_litespimmap_source_last <= 1'd0;
    spiflash_core_litespimmap_source_payload_data <= 32'd0;
    spiflash_core_litespimmap_source_payload_len <= 6'd0;
    spiflash_core_litespimmap_source_payload_mask <= 8'd0;
    spiflash_core_litespimmap_source_payload_width <= 4'd0;
    spiflash_core_litespimmap_source_valid <= 1'd0;
    spiflash_core_litespimmap_wait <= 1'd0;
    spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd0;
    spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd0;
    spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 <= 4'd0;
    spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd0;
    litespi_next_state <= litespi_state;
    case (litespi_state)
        1'd1: begin
            spiflash_core_litespimmap_cs <= 1'd0;
            if (spiflash_core_litespimmap_write_mask[0]) begin
                litespi_next_state <= 2'd2;
                spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd1;
                spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
            end else begin
                if ((spiflash_core_litespimmap_byte_count == 2'd3)) begin
                    spiflash_core_litespimmap_bus_ack <= 1'd1;
                    spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= (spiflash_core_litespimmap_burst_adr + 1'd1);
                    spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                    litespi_next_state <= 1'd0;
                    spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd0;
                    spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                end else begin
                    spiflash_core_litespimmap_byte_count_litespi_t_next_value <= (spiflash_core_litespimmap_byte_count + 1'd1);
                    spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                    spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 <= {spiflash_core_litespimmap0, spiflash_core_litespimmap_write_mask[3:1]};
                    spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_source_valid <= 1'd1;
            if ((spiflash_core_litespimmap_write_enabled & spiflash_core_litespimmap_write)) begin
                spiflash_core_litespimmap_source_payload_data <= 2'd2;
            end else begin
                spiflash_core_litespimmap_source_payload_data <= 7'd107;
            end
            spiflash_core_litespimmap_source_payload_len <= 4'd8;
            spiflash_core_litespimmap_source_payload_width <= 1'd1;
            spiflash_core_litespimmap_source_payload_mask <= 1'd1;
            spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= spiflash_core_litespimmap_bus_adr;
            spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
            if (spiflash_core_litespimmap_source_ready) begin
                litespi_next_state <= 2'd3;
            end
        end
        2'd3: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_sink_ready <= 1'd1;
            if (spiflash_core_litespimmap_sink_valid) begin
                litespi_next_state <= 3'd4;
            end
        end
        3'd4: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_source_valid <= 1'd1;
            spiflash_core_litespimmap_source_payload_width <= 1'd1;
            spiflash_core_litespimmap_source_payload_mask <= 1'd1;
            spiflash_core_litespimmap_source_payload_data <= {(spiflash_core_litespimmap_bus_adr - spiflash_core_litespimmap_offset), spiflash_core_litespimmap_byte_count};
            spiflash_core_litespimmap_source_payload_len <= 5'd24;
            spiflash_core_litespimmap_burst_cs_litespi_next_value <= 1'd1;
            spiflash_core_litespimmap_burst_cs_litespi_next_value_ce <= 1'd1;
            spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= spiflash_core_litespimmap_bus_adr;
            spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
            if (spiflash_core_litespimmap_source_ready) begin
                litespi_next_state <= 3'd5;
            end
        end
        3'd5: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_sink_ready <= 1'd1;
            if (spiflash_core_litespimmap_sink_valid) begin
                if ((spiflash_core_litespimmap_write_enabled & spiflash_core_litespimmap_write)) begin
                    litespi_next_state <= 4'd10;
                end else begin
                    if ((spiflash_core_litespimmap_spi_dummy_bits == 1'd0)) begin
                        litespi_next_state <= 4'd8;
                    end else begin
                        litespi_next_state <= 3'd6;
                    end
                end
            end
        end
        3'd6: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_source_valid <= 1'd1;
            spiflash_core_litespimmap_source_payload_width <= 1'd1;
            spiflash_core_litespimmap_source_payload_mask <= 1'd0;
            spiflash_core_litespimmap_source_payload_data <= spiflash_core_litespimmap_dummy;
            spiflash_core_litespimmap_source_payload_len <= spiflash_core_litespimmap_spi_dummy_bits;
            if (spiflash_core_litespimmap_source_ready) begin
                litespi_next_state <= 3'd7;
            end
        end
        3'd7: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_sink_ready <= 1'd1;
            if (spiflash_core_litespimmap_sink_valid) begin
                litespi_next_state <= 4'd8;
            end
        end
        4'd8: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_source_valid <= 1'd1;
            spiflash_core_litespimmap_source_last <= 1'd1;
            spiflash_core_litespimmap_source_payload_width <= 3'd4;
            spiflash_core_litespimmap_source_payload_len <= 6'd32;
            spiflash_core_litespimmap_source_payload_mask <= 1'd0;
            if (spiflash_core_litespimmap_source_ready) begin
                litespi_next_state <= 4'd9;
            end
        end
        4'd9: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_sink_ready <= 1'd1;
            spiflash_core_litespimmap_bus_dat_r <= {spiflash_core_litespimmap_sink_payload_data[7:0], spiflash_core_litespimmap_sink_payload_data[15:8], spiflash_core_litespimmap_sink_payload_data[23:16], spiflash_core_litespimmap_sink_payload_data[31:24]};
            if (spiflash_core_litespimmap_sink_valid) begin
                spiflash_core_litespimmap_bus_ack <= 1'd1;
                spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= (spiflash_core_litespimmap_burst_adr + 1'd1);
                spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                litespi_next_state <= 1'd0;
            end
        end
        4'd10: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_source_valid <= 1'd1;
            spiflash_core_litespimmap_source_payload_width <= 1'd1;
            spiflash_core_litespimmap_source_payload_mask <= 4'd15;
            spiflash_core_litespimmap_source_payload_data <= spiflash_core_litespimmap_data_write;
            spiflash_core_litespimmap_source_payload_len <= 4'd8;
            if (spiflash_core_litespimmap_source_ready) begin
                litespi_next_state <= 4'd11;
            end
        end
        4'd11: begin
            spiflash_core_litespimmap_cs <= 1'd1;
            spiflash_core_litespimmap_sink_ready <= 1'd1;
            if (spiflash_core_litespimmap_sink_valid) begin
                if ((spiflash_core_litespimmap_byte_count != 2'd3)) begin
                    spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 <= {spiflash_core_litespimmap1, spiflash_core_litespimmap_write_mask[3:1]};
                    spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                    spiflash_core_litespimmap_byte_count_litespi_t_next_value <= (spiflash_core_litespimmap_byte_count + 1'd1);
                    spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                    spiflash_core_litespimmap_data_write_litespi_t_f_next_value1 <= (spiflash_core_litespimmap_data_write >>> 4'd8);
                    spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd1;
                    if (spiflash_core_litespimmap_write_mask[1]) begin
                        litespi_next_state <= 4'd10;
                    end else begin
                        spiflash_core_litespimmap_cs <= 1'd0;
                        spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd0;
                        spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                        litespi_next_state <= 1'd1;
                    end
                end else begin
                    spiflash_core_litespimmap_bus_ack <= 1'd1;
                    spiflash_core_litespimmap_burst_adr_litespi_f_next_value <= (spiflash_core_litespimmap_burst_adr + 1'd1);
                    spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                    litespi_next_state <= 1'd0;
                end
            end
        end
        default: begin
            spiflash_core_litespimmap_wait <= 1'd1;
            spiflash_core_litespimmap_burst_cs_litespi_next_value <= (spiflash_core_litespimmap_burst_cs & (~spiflash_core_litespimmap_done));
            spiflash_core_litespimmap_burst_cs_litespi_next_value_ce <= 1'd1;
            spiflash_core_litespimmap_cs <= spiflash_core_litespimmap_burst_cs;
            if ((spiflash_core_litespimmap_bus_cyc & spiflash_core_litespimmap_bus_stb)) begin
                spiflash_core_litespimmap_byte_count_litespi_t_next_value <= 1'd0;
                spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                if ((~spiflash_core_litespimmap_bus_we)) begin
                    if (((spiflash_core_litespimmap_burst_cs & (spiflash_core_litespimmap_bus_adr == spiflash_core_litespimmap_burst_adr)) & ((~spiflash_core_litespimmap_write_enabled) | (~spiflash_core_litespimmap_write)))) begin
                        litespi_next_state <= 4'd8;
                    end else begin
                        spiflash_core_litespimmap_cs <= 1'd0;
                        litespi_next_state <= 2'd2;
                    end
                    spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd0;
                    spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                end else begin
                    if (spiflash_core_litespimmap_write_enabled) begin
                        spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0 <= spiflash_core_litespimmap_bus_sel;
                        spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                        spiflash_core_litespimmap_data_write_litespi_t_f_next_value1 <= spiflash_core_litespimmap_bus_dat_w;
                        spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd1;
                        if ((((spiflash_core_litespimmap_burst_cs & (spiflash_core_litespimmap_bus_adr == spiflash_core_litespimmap_burst_adr)) & spiflash_core_litespimmap_bus_sel[0]) & spiflash_core_litespimmap_write)) begin
                            litespi_next_state <= 4'd10;
                        end else begin
                            spiflash_core_litespimmap_cs <= 1'd0;
                            litespi_next_state <= 1'd1;
                        end
                        spiflash_core_litespimmap_write_litespi_t_t_next_value <= 1'd1;
                        spiflash_core_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                    end
                end
            end
        end
    endcase
end
assign main_ram_datain = main_ram_bus_dat_w[31:0];
always @(*) begin
    main_ram_bus_dat_r <= 32'd0;
    main_ram_cs <= 1'd0;
    main_ram_wren <= 1'd0;
    if ((main_ram_bus_adr[14] == 1'd0)) begin
        main_ram_cs <= 1'd1;
        main_ram_wren <= ((main_ram_bus_we & main_ram_bus_stb) & main_ram_bus_cyc);
        main_ram_bus_dat_r[31:0] <= main_ram_dataout;
    end
end
assign wishbone0_adr = port_bus_adr;
assign wishbone0_dat_w = port_bus_dat_w;
assign port_bus_dat_r = wishbone0_dat_r;
assign wishbone0_sel = port_bus_sel;
assign wishbone0_cyc = port_bus_cyc;
assign wishbone0_stb = port_bus_stb;
assign port_bus_ack = wishbone0_ack;
assign wishbone0_we = port_bus_we;
assign wishbone0_cti = port_bus_cti;
assign wishbone0_bte = port_bus_bte;
assign port_bus_err = wishbone0_err;
assign usb23_trigger = usb230_irq;
assign usb23_usb0 = usb23_status;
assign usb23_usb1 = usb23_pending;
always @(*) begin
    usb23_clear <= 1'd0;
    if ((usb23_pending_re & usb23_pending_r)) begin
        usb23_clear <= 1'd1;
    end
end
assign usb23_irq = (usb23_pending_status & usb23_enable_storage);
assign usb23_status = usb23_trigger;
assign framectl_trigger = framectl0_irq;
assign framectl_frame0 = framectl_status;
assign framectl_frame1 = framectl_pending;
always @(*) begin
    framectl_clear <= 1'd0;
    if ((framectl_pending_re & framectl_pending_r)) begin
        framectl_clear <= 1'd1;
    end
end
assign framectl_irq = (framectl_pending_status & framectl_enable_storage);
assign framectl_status = framectl_trigger;
always @(*) begin
    interface0_ack <= 1'd0;
    interface0_dat_r <= 32'd0;
    interface1_adr <= 14'd0;
    interface1_dat_w <= 32'd0;
    interface1_re <= 1'd0;
    interface1_we <= 1'd0;
    wishbone2csr_next_state <= 1'd0;
    wishbone2csr_next_state <= wishbone2csr_state;
    case (wishbone2csr_state)
        1'd1: begin
            interface0_ack <= 1'd1;
            interface0_dat_r <= interface1_dat_r;
            wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            interface1_dat_w <= interface0_dat_w;
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr <= interface0_adr[29:0];
                interface1_re <= ((~interface0_we) & (interface0_sel != 1'd0));
                interface1_we <= (interface0_we & (interface0_sel != 1'd0));
                wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank0_reset0_re <= 1'd0;
    csrbank0_reset0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_reset0_re <= interface0_bank_bus_we;
        csrbank0_reset0_we <= interface0_bank_bus_re;
    end
end
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank0_scratch0_re <= 1'd0;
    csrbank0_scratch0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_scratch0_re <= interface0_bank_bus_we;
        csrbank0_scratch0_we <= interface0_bank_bus_re;
    end
end
assign csrbank0_bus_errors_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank0_bus_errors_re <= 1'd0;
    csrbank0_bus_errors_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank0_bus_errors_re <= interface0_bank_bus_we;
        csrbank0_bus_errors_we <= interface0_bank_bus_re;
    end
end
always @(*) begin
    soc_rst <= 1'd0;
    if (reset_re) begin
        soc_rst <= reset_storage[0];
    end
end
assign cpu_rst = reset_storage[1];
assign csrbank0_reset0_w = reset_storage[1:0];
assign csrbank0_scratch0_w = scratch_storage[31:0];
assign csrbank0_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csrbank0_bus_errors_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_ev_status_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_ev_status_re <= 1'd0;
    csrbank1_ev_status_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_ev_status_re <= interface1_bank_bus_we;
        csrbank1_ev_status_we <= interface1_bank_bus_re;
    end
end
assign csrbank1_ev_pending_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_ev_pending_re <= 1'd0;
    csrbank1_ev_pending_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_ev_pending_re <= interface1_bank_bus_we;
        csrbank1_ev_pending_we <= interface1_bank_bus_re;
    end
end
assign csrbank1_ev_enable0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_ev_enable0_re <= 1'd0;
    csrbank1_ev_enable0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank1_ev_enable0_re <= interface1_bank_bus_we;
        csrbank1_ev_enable0_we <= interface1_bank_bus_re;
    end
end
always @(*) begin
    framectl_status_status <= 1'd0;
    framectl_status_status <= framectl_frame0;
end
assign csrbank1_ev_status_w = framectl_status_status;
assign framectl_status_we = csrbank1_ev_status_we;
always @(*) begin
    framectl_pending_status <= 1'd0;
    framectl_pending_status <= framectl_frame1;
end
assign csrbank1_ev_pending_w = framectl_pending_status;
assign framectl_pending_we = csrbank1_ev_pending_we;
assign framectl_frame2 = framectl_enable_storage;
assign csrbank1_ev_enable0_w = framectl_enable_storage;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 4'd10);
assign csrbank2_w0_r = interface2_bank_bus_dat_w[2:0];
always @(*) begin
    csrbank2_w0_re <= 1'd0;
    csrbank2_w0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_w0_re <= interface2_bank_bus_we;
        csrbank2_w0_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_r_r = interface2_bank_bus_dat_w[0];
always @(*) begin
    csrbank2_r_re <= 1'd0;
    csrbank2_r_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank2_r_re <= interface2_bank_bus_we;
        csrbank2_r_we <= interface2_bank_bus_re;
    end
end
assign scl = _w_storage[0];
assign oe = _w_storage[1];
assign sda0 = _w_storage[2];
assign csrbank2_w0_w = _w_storage[2:0];
always @(*) begin
    _r_status <= 1'd0;
    _r_status <= sda1;
end
assign csrbank2_r_w = _r_status;
assign _r_we = csrbank2_r_we;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 2'd2);
assign csrbank3_mmap_dummy_bits0_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank3_mmap_dummy_bits0_re <= 1'd0;
    csrbank3_mmap_dummy_bits0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank3_mmap_dummy_bits0_re <= interface3_bank_bus_we;
        csrbank3_mmap_dummy_bits0_we <= interface3_bank_bus_re;
    end
end
assign csrbank3_mmap_dummy_bits0_w = spiflash_core_litespimmap_storage[7:0];
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 4'd8);
assign csrbank4_clk_divisor0_r = interface4_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank4_clk_divisor0_re <= 1'd0;
    csrbank4_clk_divisor0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank4_clk_divisor0_re <= interface4_bank_bus_we;
        csrbank4_clk_divisor0_we <= interface4_bank_bus_re;
    end
end
assign csrbank4_clk_divisor0_w = litespisdrphycore_storage[7:0];
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 3'd5);
assign csrbank5_load0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_load0_re <= 1'd0;
    csrbank5_load0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank5_load0_re <= interface5_bank_bus_we;
        csrbank5_load0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_reload0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_reload0_re <= 1'd0;
    csrbank5_reload0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank5_reload0_re <= interface5_bank_bus_we;
        csrbank5_reload0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_en0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_en0_re <= 1'd0;
    csrbank5_en0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank5_en0_re <= interface5_bank_bus_we;
        csrbank5_en0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_update_value0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_update_value0_re <= 1'd0;
    csrbank5_update_value0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank5_update_value0_re <= interface5_bank_bus_we;
        csrbank5_update_value0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_value_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_value_re <= 1'd0;
    csrbank5_value_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank5_value_re <= interface5_bank_bus_we;
        csrbank5_value_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_ev_status_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_ev_status_re <= 1'd0;
    csrbank5_ev_status_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank5_ev_status_re <= interface5_bank_bus_we;
        csrbank5_ev_status_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_ev_pending_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_ev_pending_re <= 1'd0;
    csrbank5_ev_pending_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank5_ev_pending_re <= interface5_bank_bus_we;
        csrbank5_ev_pending_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_ev_enable0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_ev_enable0_re <= 1'd0;
    csrbank5_ev_enable0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank5_ev_enable0_re <= interface5_bank_bus_we;
        csrbank5_ev_enable0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_uptime_latch0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_uptime_latch0_re <= 1'd0;
    csrbank5_uptime_latch0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 4'd8))) begin
        csrbank5_uptime_latch0_re <= interface5_bank_bus_we;
        csrbank5_uptime_latch0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_uptime_cycles1_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_uptime_cycles1_re <= 1'd0;
    csrbank5_uptime_cycles1_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 4'd9))) begin
        csrbank5_uptime_cycles1_re <= interface5_bank_bus_we;
        csrbank5_uptime_cycles1_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_uptime_cycles0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank5_uptime_cycles0_re <= 1'd0;
    csrbank5_uptime_cycles0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 4'd10))) begin
        csrbank5_uptime_cycles0_re <= interface5_bank_bus_we;
        csrbank5_uptime_cycles0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_load0_w = timer_load_storage[31:0];
assign csrbank5_reload0_w = timer_reload_storage[31:0];
assign csrbank5_en0_w = timer_en_storage;
assign csrbank5_update_value0_w = timer_update_value_storage;
assign csrbank5_value_w = timer_value_status[31:0];
assign timer_value_we = csrbank5_value_we;
always @(*) begin
    timer_status_status <= 1'd0;
    timer_status_status <= timer_zero0;
end
assign csrbank5_ev_status_w = timer_status_status;
assign timer_status_we = csrbank5_ev_status_we;
always @(*) begin
    timer_pending_status <= 1'd0;
    timer_pending_status <= timer_zero1;
end
assign csrbank5_ev_pending_w = timer_pending_status;
assign timer_pending_we = csrbank5_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csrbank5_ev_enable0_w = timer_enable_storage;
assign csrbank5_uptime_latch0_w = uptime_latch_storage;
assign csrbank5_uptime_cycles1_w = uptime_cycles_status[63:32];
assign csrbank5_uptime_cycles0_w = uptime_cycles_status[31:0];
assign uptime_cycles_we = csrbank5_uptime_cycles0_we;
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 2'd3);
assign uart_rxtx_r = interface6_bank_bus_dat_w[7:0];
always @(*) begin
    uart_rxtx_re <= 1'd0;
    uart_rxtx_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_re <= interface6_bank_bus_we;
        uart_rxtx_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_txfull_r = interface6_bank_bus_dat_w[0];
always @(*) begin
    csrbank6_txfull_re <= 1'd0;
    csrbank6_txfull_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank6_txfull_re <= interface6_bank_bus_we;
        csrbank6_txfull_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_rxempty_r = interface6_bank_bus_dat_w[0];
always @(*) begin
    csrbank6_rxempty_re <= 1'd0;
    csrbank6_rxempty_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank6_rxempty_re <= interface6_bank_bus_we;
        csrbank6_rxempty_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_ev_status_r = interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank6_ev_status_re <= 1'd0;
    csrbank6_ev_status_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank6_ev_status_re <= interface6_bank_bus_we;
        csrbank6_ev_status_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_ev_pending_r = interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank6_ev_pending_re <= 1'd0;
    csrbank6_ev_pending_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank6_ev_pending_re <= interface6_bank_bus_we;
        csrbank6_ev_pending_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_ev_enable0_r = interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank6_ev_enable0_re <= 1'd0;
    csrbank6_ev_enable0_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank6_ev_enable0_re <= interface6_bank_bus_we;
        csrbank6_ev_enable0_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_txempty_r = interface6_bank_bus_dat_w[0];
always @(*) begin
    csrbank6_txempty_re <= 1'd0;
    csrbank6_txempty_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank6_txempty_re <= interface6_bank_bus_we;
        csrbank6_txempty_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_rxfull_r = interface6_bank_bus_dat_w[0];
always @(*) begin
    csrbank6_rxfull_re <= 1'd0;
    csrbank6_rxfull_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank6_rxfull_re <= interface6_bank_bus_we;
        csrbank6_rxfull_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_txfull_w = uart_txfull_status;
assign uart_txfull_we = csrbank6_txfull_we;
assign csrbank6_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csrbank6_rxempty_we;
always @(*) begin
    uart_status_status <= 2'd0;
    uart_status_status[0] <= uart_tx0;
    uart_status_status[1] <= uart_rx0;
end
assign csrbank6_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csrbank6_ev_status_we;
always @(*) begin
    uart_pending_status <= 2'd0;
    uart_pending_status[0] <= uart_tx1;
    uart_pending_status[1] <= uart_rx1;
end
assign csrbank6_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csrbank6_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csrbank6_ev_enable0_w = uart_enable_storage[1:0];
assign csrbank6_txempty_w = uart_txempty_status;
assign uart_txempty_we = csrbank6_txempty_we;
assign csrbank6_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csrbank6_rxfull_we;
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 4'd11);
assign csrbank7_ev_status_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_ev_status_re <= 1'd0;
    csrbank7_ev_status_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank7_ev_status_re <= interface7_bank_bus_we;
        csrbank7_ev_status_we <= interface7_bank_bus_re;
    end
end
assign csrbank7_ev_pending_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_ev_pending_re <= 1'd0;
    csrbank7_ev_pending_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank7_ev_pending_re <= interface7_bank_bus_we;
        csrbank7_ev_pending_we <= interface7_bank_bus_re;
    end
end
assign csrbank7_ev_enable0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_ev_enable0_re <= 1'd0;
    csrbank7_ev_enable0_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank7_ev_enable0_re <= interface7_bank_bus_we;
        csrbank7_ev_enable0_we <= interface7_bank_bus_re;
    end
end
always @(*) begin
    usb23_status_status <= 1'd0;
    usb23_status_status <= usb23_usb0;
end
assign csrbank7_ev_status_w = usb23_status_status;
assign usb23_status_we = csrbank7_ev_status_we;
always @(*) begin
    usb23_pending_status <= 1'd0;
    usb23_pending_status <= usb23_usb1;
end
assign csrbank7_ev_pending_w = usb23_pending_status;
assign usb23_pending_we = csrbank7_ev_pending_we;
assign usb23_usb2 = usb23_enable_storage;
assign csrbank7_ev_enable0_w = usb23_enable_storage;
assign adr = interface1_adr;
assign re = interface1_re;
assign we = interface1_we;
assign dat_w = interface1_dat_w;
assign interface1_dat_r = dat_r;
assign interface0_bank_bus_adr = adr;
assign interface1_bank_bus_adr = adr;
assign interface2_bank_bus_adr = adr;
assign interface3_bank_bus_adr = adr;
assign interface4_bank_bus_adr = adr;
assign interface5_bank_bus_adr = adr;
assign interface6_bank_bus_adr = adr;
assign interface7_bank_bus_adr = adr;
assign interface0_bank_bus_re = re;
assign interface1_bank_bus_re = re;
assign interface2_bank_bus_re = re;
assign interface3_bank_bus_re = re;
assign interface4_bank_bus_re = re;
assign interface5_bank_bus_re = re;
assign interface6_bank_bus_re = re;
assign interface7_bank_bus_re = re;
assign interface0_bank_bus_we = we;
assign interface1_bank_bus_we = we;
assign interface2_bank_bus_we = we;
assign interface3_bank_bus_we = we;
assign interface4_bank_bus_we = we;
assign interface5_bank_bus_we = we;
assign interface6_bank_bus_we = we;
assign interface7_bank_bus_we = we;
assign interface0_bank_bus_dat_w = dat_w;
assign interface1_bank_bus_dat_w = dat_w;
assign interface2_bank_bus_dat_w = dat_w;
assign interface3_bank_bus_dat_w = dat_w;
assign interface4_bank_bus_dat_w = dat_w;
assign interface5_bank_bus_dat_w = dat_w;
assign interface6_bank_bus_dat_w = dat_w;
assign interface7_bank_bus_dat_w = dat_w;
assign dat_r = (((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r);
always @(*) begin
    array_muxed0 <= 30'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed0 <= interface0_interface_adr;
        end
        default: begin
            array_muxed0 <= interface2_interface_adr;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 32'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed1 <= interface0_interface_dat_w;
        end
        default: begin
            array_muxed1 <= interface2_interface_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 4'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed2 <= interface0_interface_sel;
        end
        default: begin
            array_muxed2 <= interface2_interface_sel;
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 1'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed3 <= interface0_interface_cyc;
        end
        default: begin
            array_muxed3 <= interface2_interface_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 1'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed4 <= interface0_interface_stb;
        end
        default: begin
            array_muxed4 <= interface2_interface_stb;
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 1'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed5 <= interface0_interface_we;
        end
        default: begin
            array_muxed5 <= interface2_interface_we;
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 3'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed6 <= interface0_interface_cti;
        end
        default: begin
            array_muxed6 <= interface2_interface_cti;
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 2'd0;
    case (arbiter0_grant)
        1'd0: begin
            array_muxed7 <= interface0_interface_bte;
        end
        default: begin
            array_muxed7 <= interface2_interface_bte;
        end
    endcase
end
always @(*) begin
    array_muxed8 <= 30'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed8 <= interface1_interface_adr;
        end
        default: begin
            array_muxed8 <= interface3_interface_adr;
        end
    endcase
end
always @(*) begin
    array_muxed9 <= 32'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed9 <= interface1_interface_dat_w;
        end
        default: begin
            array_muxed9 <= interface3_interface_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed10 <= 4'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed10 <= interface1_interface_sel;
        end
        default: begin
            array_muxed10 <= interface3_interface_sel;
        end
    endcase
end
always @(*) begin
    array_muxed11 <= 1'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed11 <= interface1_interface_cyc;
        end
        default: begin
            array_muxed11 <= interface3_interface_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed12 <= 1'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed12 <= interface1_interface_stb;
        end
        default: begin
            array_muxed12 <= interface3_interface_stb;
        end
    endcase
end
always @(*) begin
    array_muxed13 <= 1'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed13 <= interface1_interface_we;
        end
        default: begin
            array_muxed13 <= interface3_interface_we;
        end
    endcase
end
always @(*) begin
    array_muxed14 <= 3'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed14 <= interface1_interface_cti;
        end
        default: begin
            array_muxed14 <= interface3_interface_cti;
        end
    endcase
end
always @(*) begin
    array_muxed15 <= 2'd0;
    case (arbiter1_grant)
        1'd0: begin
            array_muxed15 <= interface1_interface_bte;
        end
        default: begin
            array_muxed15 <= interface3_interface_bte;
        end
    endcase
end
always @(*) begin
    array_muxed16 <= 30'd0;
    case (arbiter2_grant)
        default: begin
            array_muxed16 <= interface4_interface_adr;
        end
    endcase
end
always @(*) begin
    array_muxed17 <= 32'd0;
    case (arbiter2_grant)
        default: begin
            array_muxed17 <= interface4_interface_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed18 <= 4'd0;
    case (arbiter2_grant)
        default: begin
            array_muxed18 <= interface4_interface_sel;
        end
    endcase
end
always @(*) begin
    array_muxed19 <= 1'd0;
    case (arbiter2_grant)
        default: begin
            array_muxed19 <= interface4_interface_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed20 <= 1'd0;
    case (arbiter2_grant)
        default: begin
            array_muxed20 <= interface4_interface_stb;
        end
    endcase
end
always @(*) begin
    array_muxed21 <= 1'd0;
    case (arbiter2_grant)
        default: begin
            array_muxed21 <= interface4_interface_we;
        end
    endcase
end
always @(*) begin
    array_muxed22 <= 3'd0;
    case (arbiter2_grant)
        default: begin
            array_muxed22 <= interface4_interface_cti;
        end
    endcase
end
always @(*) begin
    array_muxed23 <= 2'd0;
    case (arbiter2_grant)
        default: begin
            array_muxed23 <= interface4_interface_bte;
        end
    endcase
end
always @(*) begin
    array_muxed24 <= 30'd0;
    case (arbiter3_grant)
        default: begin
            array_muxed24 <= interface5_interface_adr;
        end
    endcase
end
always @(*) begin
    array_muxed25 <= 32'd0;
    case (arbiter3_grant)
        default: begin
            array_muxed25 <= interface5_interface_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed26 <= 4'd0;
    case (arbiter3_grant)
        default: begin
            array_muxed26 <= interface5_interface_sel;
        end
    endcase
end
always @(*) begin
    array_muxed27 <= 1'd0;
    case (arbiter3_grant)
        default: begin
            array_muxed27 <= interface5_interface_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed28 <= 1'd0;
    case (arbiter3_grant)
        default: begin
            array_muxed28 <= interface5_interface_stb;
        end
    endcase
end
always @(*) begin
    array_muxed29 <= 1'd0;
    case (arbiter3_grant)
        default: begin
            array_muxed29 <= interface5_interface_we;
        end
    endcase
end
always @(*) begin
    array_muxed30 <= 3'd0;
    case (arbiter3_grant)
        default: begin
            array_muxed30 <= interface5_interface_cti;
        end
    endcase
end
always @(*) begin
    array_muxed31 <= 2'd0;
    case (arbiter3_grant)
        default: begin
            array_muxed31 <= interface5_interface_bte;
        end
    endcase
end
assign rx_rx = regs1;
assign sdrio_clk_10 = sys_clk_1;
assign sdrio_clk_11 = sys_clk_1;
assign sdrio_clk_12 = sys_clk_1;
assign sdrio_clk = sys_clk_1;
assign sdrio_clk_1 = sys_clk_1;
assign sdrio_clk_2 = sys_clk_1;
assign sdrio_clk_3 = sys_clk_1;
assign sdrio_clk_4 = sys_clk_1;
assign sdrio_clk_5 = sys_clk_1;
assign sdrio_clk_6 = sys_clk_1;
assign sdrio_clk_9 = sys_clk_1;
assign sdrio_clk_7 = sys_clk_1;
assign sdrio_clk_8 = sys_clk_1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= sys_rst;
end

always @(posedge sdrio_clk_10) begin
    spiflash4x_clk <= litespisdrphycore_clk;
    inferedsdrtristate0_oe <= litespisdrphycore_dq_oe[0];
    inferedsdrtristate1_oe <= litespisdrphycore_dq_oe[1];
    inferedsdrtristate2_oe <= litespisdrphycore_dq_oe[2];
    inferedsdrtristate3_oe <= litespisdrphycore_dq_oe[3];
    inferedsdrtristate0__o <= litespisdrphycore_dq_o[0];
    litespisdrphycore_dq_i[0] <= inferedsdrtristate0__i;
    inferedsdrtristate1__o <= litespisdrphycore_dq_o[1];
    litespisdrphycore_dq_i[1] <= inferedsdrtristate1__i;
    inferedsdrtristate2__o <= litespisdrphycore_dq_o[2];
    litespisdrphycore_dq_i[2] <= inferedsdrtristate2__i;
    inferedsdrtristate3__o <= litespisdrphycore_dq_o[3];
    litespisdrphycore_dq_i[3] <= inferedsdrtristate3__i;
end

always @(posedge sys_clk_1) begin
    decoder0_slave_sel_r <= decoder0_slave_sel;
    if (timeout0_wait) begin
        if ((~timeout0_done)) begin
            timeout0_count <= (timeout0_count - 1'd1);
        end
    end else begin
        timeout0_count <= 20'd1000000;
    end
    decoder1_slave_sel_r <= decoder1_slave_sel;
    if (timeout1_wait) begin
        if ((~timeout1_done)) begin
            timeout1_count <= (timeout1_count - 1'd1);
        end
    end else begin
        timeout1_count <= 20'd1000000;
    end
    case (arbiter0_grant)
        1'd0: begin
            if ((~arbiter0_request[0])) begin
                if (arbiter0_request[1]) begin
                    arbiter0_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~arbiter0_request[1])) begin
                if (arbiter0_request[0]) begin
                    arbiter0_grant <= 1'd0;
                end
            end
        end
    endcase
    case (arbiter1_grant)
        1'd0: begin
            if ((~arbiter1_request[0])) begin
                if (arbiter1_request[1]) begin
                    arbiter1_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~arbiter1_request[1])) begin
                if (arbiter1_request[0]) begin
                    arbiter1_grant <= 1'd0;
                end
            end
        end
    endcase
    if ((bus_errors != 32'd4294967295)) begin
        if (bus_error) begin
            bus_errors <= (bus_errors + 1'd1);
        end
    end
    {tx_tick, tx_phase} <= 23'd8246337;
    if (tx_enable) begin
        {tx_tick, tx_phase} <= (tx_phase + 23'd8246337);
    end
    rs232phytx_state <= rs232phytx_next_state;
    if (tx_count_rs232phytx_next_value_ce0) begin
        tx_count <= tx_count_rs232phytx_next_value0;
    end
    if (serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= serial_tx_rs232phytx_next_value1;
    end
    if (tx_data_rs232phytx_next_value_ce2) begin
        tx_data <= tx_data_rs232phytx_next_value2;
    end
    rx_rx_d <= rx_rx;
    {rx_tick, rx_phase} <= 32'd2147483648;
    if (rx_enable) begin
        {rx_tick, rx_phase} <= (rx_phase + 23'd8246337);
    end
    rs232phyrx_state <= rs232phyrx_next_state;
    if (rx_count_rs232phyrx_next_value_ce0) begin
        rx_count <= rx_count_rs232phyrx_next_value0;
    end
    if (rx_data_rs232phyrx_next_value_ce1) begin
        rx_data <= rx_data_rs232phyrx_next_value1;
    end
    if (uart_tx_clear) begin
        uart_tx_pending <= 1'd0;
    end
    uart_tx_trigger_d <= uart_tx_trigger;
    if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
        uart_tx_pending <= 1'd1;
    end
    if (uart_rx_clear) begin
        uart_rx_pending <= 1'd0;
    end
    uart_rx_trigger_d <= uart_rx_trigger;
    if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
        uart_rx_pending <= 1'd1;
    end
    if (uart_tx_fifo_syncfifo_re) begin
        uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (uart_tx_fifo_re) begin
            uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
    end
    if (uart_tx_fifo_do_read) begin
        uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        if ((~uart_tx_fifo_do_read)) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_tx_fifo_do_read) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (uart_rx_fifo_syncfifo_re) begin
        uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (uart_rx_fifo_re) begin
            uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
    end
    if (uart_rx_fifo_do_read) begin
        uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        if ((~uart_rx_fifo_do_read)) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_rx_fifo_do_read) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (timer_en_storage) begin
        if ((timer_value == 1'd0)) begin
            timer_value <= timer_reload_storage;
        end else begin
            timer_value <= (timer_value - 1'd1);
        end
    end else begin
        timer_value <= timer_load_storage;
    end
    if (timer_update_value_re) begin
        timer_value_status <= timer_value;
    end
    uptime_cycles <= (uptime_cycles + 1'd1);
    if (uptime_latch_re) begin
        uptime_cycles_status <= uptime_cycles;
    end
    if (timer_zero_clear) begin
        timer_zero_pending <= 1'd0;
    end
    timer_zero_trigger_d <= timer_zero_trigger;
    if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
        timer_zero_pending <= 1'd1;
    end
    if (litespisdrphycore_sr_out_load) begin
        litespisdrphycore_sr_out <= (litespisdrphycore_sink_payload_data <<< (6'd32 - litespisdrphycore_sink_payload_len));
    end
    if (litespisdrphycore_sr_out_shift) begin
        case (litespisdrphycore_sink_payload_width)
            1'd1: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore0};
            end
            2'd2: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore1};
            end
            3'd4: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore2};
            end
            4'd8: begin
                litespisdrphycore_sr_out <= {litespisdrphycore_sr_out, litespisdrphycore3};
            end
        endcase
    end
    if (litespisdrphycore_sr_in_shift) begin
        case (litespisdrphycore_sink_payload_width)
            1'd1: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1]};
            end
            2'd2: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[1:0]};
            end
            3'd4: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[3:0]};
            end
            4'd8: begin
                litespisdrphycore_sr_in <= {litespisdrphycore_sr_in, litespisdrphycore_dq_i[3:0]};
            end
        endcase
    end
    litespisdrphycore_posedge_reg <= litespisdrphycore_posedge;
    litespisdrphycore_posedge_reg2 <= litespisdrphycore_posedge_reg;
    if ((litespisdrphycore_en | litespisdrphycore_en_int)) begin
        if ((litespisdrphycore_cnt < litespisdrphycore_div)) begin
            litespisdrphycore_cnt <= (litespisdrphycore_cnt + 1'd1);
        end else begin
            litespisdrphycore_cnt <= 1'd0;
            litespisdrphycore_clk <= (~litespisdrphycore_clk);
        end
    end else begin
        litespisdrphycore_clk <= 1'd0;
        litespisdrphycore_cnt <= 1'd0;
    end
    if (litespisdrphycore_wait) begin
        if ((~litespisdrphycore_done)) begin
            litespisdrphycore_count <= (litespisdrphycore_count - 1'd1);
        end
    end else begin
        litespisdrphycore_count <= 4'd11;
    end
    litespiphy_state <= litespiphy_next_state;
    if (litespisdrphycore_sr_cnt_litespiphy_next_value_ce) begin
        litespisdrphycore_sr_cnt <= litespisdrphycore_sr_cnt_litespiphy_next_value;
    end
    if (spiflash_core_litespimmap_wait) begin
        if ((~spiflash_core_litespimmap_done)) begin
            spiflash_core_litespimmap_count <= (spiflash_core_litespimmap_count - 1'd1);
        end
    end else begin
        spiflash_core_litespimmap_count <= 9'd256;
    end
    litespi_state <= litespi_next_state;
    if (spiflash_core_litespimmap_burst_cs_litespi_next_value_ce) begin
        spiflash_core_litespimmap_burst_cs <= spiflash_core_litespimmap_burst_cs_litespi_next_value;
    end
    if (spiflash_core_litespimmap_byte_count_litespi_t_next_value_ce) begin
        spiflash_core_litespimmap_byte_count <= spiflash_core_litespimmap_byte_count_litespi_t_next_value;
    end
    if (spiflash_core_litespimmap_write_litespi_t_t_next_value_ce) begin
        spiflash_core_litespimmap_write <= spiflash_core_litespimmap_write_litespi_t_t_next_value;
    end
    if (spiflash_core_litespimmap_write_mask_litespi_t_f_next_value_ce0) begin
        spiflash_core_litespimmap_write_mask <= spiflash_core_litespimmap_write_mask_litespi_t_f_next_value0;
    end
    if (spiflash_core_litespimmap_data_write_litespi_t_f_next_value_ce1) begin
        spiflash_core_litespimmap_data_write <= spiflash_core_litespimmap_data_write_litespi_t_f_next_value1;
    end
    if (spiflash_core_litespimmap_burst_adr_litespi_f_next_value_ce) begin
        spiflash_core_litespimmap_burst_adr <= spiflash_core_litespimmap_burst_adr_litespi_f_next_value;
    end
    main_ram_bus_ack <= ((main_ram_bus_stb & main_ram_bus_cyc) & (~main_ram_bus_ack));
    if (usb23_clear) begin
        usb23_pending <= 1'd0;
    end
    usb23_trigger_d <= usb23_trigger;
    if ((usb23_trigger & (~usb23_trigger_d))) begin
        usb23_pending <= 1'd1;
    end
    if (framectl_clear) begin
        framectl_pending <= 1'd0;
    end
    framectl_trigger_d <= framectl_trigger;
    if ((framectl_trigger & (~framectl_trigger_d))) begin
        framectl_pending <= 1'd1;
    end
    wishbone2csr_state <= wishbone2csr_next_state;
    interface0_bank_bus_dat_r <= 1'd0;
    if (csrbank0_sel) begin
        case (interface0_bank_bus_adr[8:0])
            1'd0: begin
                interface0_bank_bus_dat_r <= csrbank0_reset0_w;
            end
            1'd1: begin
                interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
            end
            2'd2: begin
                interface0_bank_bus_dat_r <= csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csrbank0_reset0_re) begin
        reset_storage[1:0] <= csrbank0_reset0_r;
    end
    reset_re <= csrbank0_reset0_re;
    if (csrbank0_scratch0_re) begin
        scratch_storage[31:0] <= csrbank0_scratch0_r;
    end
    scratch_re <= csrbank0_scratch0_re;
    bus_errors_re <= csrbank0_bus_errors_re;
    interface1_bank_bus_dat_r <= 1'd0;
    if (csrbank1_sel) begin
        case (interface1_bank_bus_adr[8:0])
            1'd0: begin
                interface1_bank_bus_dat_r <= csrbank1_ev_status_w;
            end
            1'd1: begin
                interface1_bank_bus_dat_r <= csrbank1_ev_pending_w;
            end
            2'd2: begin
                interface1_bank_bus_dat_r <= csrbank1_ev_enable0_w;
            end
        endcase
    end
    framectl_status_re <= csrbank1_ev_status_re;
    if (csrbank1_ev_pending_re) begin
        framectl_pending_r <= csrbank1_ev_pending_r;
    end
    framectl_pending_re <= csrbank1_ev_pending_re;
    if (csrbank1_ev_enable0_re) begin
        framectl_enable_storage <= csrbank1_ev_enable0_r;
    end
    framectl_enable_re <= csrbank1_ev_enable0_re;
    interface2_bank_bus_dat_r <= 1'd0;
    if (csrbank2_sel) begin
        case (interface2_bank_bus_adr[8:0])
            1'd0: begin
                interface2_bank_bus_dat_r <= csrbank2_w0_w;
            end
            1'd1: begin
                interface2_bank_bus_dat_r <= csrbank2_r_w;
            end
        endcase
    end
    if (csrbank2_w0_re) begin
        _w_storage[2:0] <= csrbank2_w0_r;
    end
    _w_re <= csrbank2_w0_re;
    _r_re <= csrbank2_r_re;
    interface3_bank_bus_dat_r <= 1'd0;
    if (csrbank3_sel) begin
        case (interface3_bank_bus_adr[8:0])
            1'd0: begin
                interface3_bank_bus_dat_r <= csrbank3_mmap_dummy_bits0_w;
            end
        endcase
    end
    if (csrbank3_mmap_dummy_bits0_re) begin
        spiflash_core_litespimmap_storage[7:0] <= csrbank3_mmap_dummy_bits0_r;
    end
    spiflash_core_litespimmap_re <= csrbank3_mmap_dummy_bits0_re;
    interface4_bank_bus_dat_r <= 1'd0;
    if (csrbank4_sel) begin
        case (interface4_bank_bus_adr[8:0])
            1'd0: begin
                interface4_bank_bus_dat_r <= csrbank4_clk_divisor0_w;
            end
        endcase
    end
    if (csrbank4_clk_divisor0_re) begin
        litespisdrphycore_storage[7:0] <= csrbank4_clk_divisor0_r;
    end
    litespisdrphycore_re <= csrbank4_clk_divisor0_re;
    interface5_bank_bus_dat_r <= 1'd0;
    if (csrbank5_sel) begin
        case (interface5_bank_bus_adr[8:0])
            1'd0: begin
                interface5_bank_bus_dat_r <= csrbank5_load0_w;
            end
            1'd1: begin
                interface5_bank_bus_dat_r <= csrbank5_reload0_w;
            end
            2'd2: begin
                interface5_bank_bus_dat_r <= csrbank5_en0_w;
            end
            2'd3: begin
                interface5_bank_bus_dat_r <= csrbank5_update_value0_w;
            end
            3'd4: begin
                interface5_bank_bus_dat_r <= csrbank5_value_w;
            end
            3'd5: begin
                interface5_bank_bus_dat_r <= csrbank5_ev_status_w;
            end
            3'd6: begin
                interface5_bank_bus_dat_r <= csrbank5_ev_pending_w;
            end
            3'd7: begin
                interface5_bank_bus_dat_r <= csrbank5_ev_enable0_w;
            end
            4'd8: begin
                interface5_bank_bus_dat_r <= csrbank5_uptime_latch0_w;
            end
            4'd9: begin
                interface5_bank_bus_dat_r <= csrbank5_uptime_cycles1_w;
            end
            4'd10: begin
                interface5_bank_bus_dat_r <= csrbank5_uptime_cycles0_w;
            end
        endcase
    end
    if (csrbank5_load0_re) begin
        timer_load_storage[31:0] <= csrbank5_load0_r;
    end
    timer_load_re <= csrbank5_load0_re;
    if (csrbank5_reload0_re) begin
        timer_reload_storage[31:0] <= csrbank5_reload0_r;
    end
    timer_reload_re <= csrbank5_reload0_re;
    if (csrbank5_en0_re) begin
        timer_en_storage <= csrbank5_en0_r;
    end
    timer_en_re <= csrbank5_en0_re;
    if (csrbank5_update_value0_re) begin
        timer_update_value_storage <= csrbank5_update_value0_r;
    end
    timer_update_value_re <= csrbank5_update_value0_re;
    timer_value_re <= csrbank5_value_re;
    timer_status_re <= csrbank5_ev_status_re;
    if (csrbank5_ev_pending_re) begin
        timer_pending_r <= csrbank5_ev_pending_r;
    end
    timer_pending_re <= csrbank5_ev_pending_re;
    if (csrbank5_ev_enable0_re) begin
        timer_enable_storage <= csrbank5_ev_enable0_r;
    end
    timer_enable_re <= csrbank5_ev_enable0_re;
    if (csrbank5_uptime_latch0_re) begin
        uptime_latch_storage <= csrbank5_uptime_latch0_r;
    end
    uptime_latch_re <= csrbank5_uptime_latch0_re;
    uptime_cycles_re <= csrbank5_uptime_cycles0_re;
    interface6_bank_bus_dat_r <= 1'd0;
    if (csrbank6_sel) begin
        case (interface6_bank_bus_adr[8:0])
            1'd0: begin
                interface6_bank_bus_dat_r <= uart_rxtx_w;
            end
            1'd1: begin
                interface6_bank_bus_dat_r <= csrbank6_txfull_w;
            end
            2'd2: begin
                interface6_bank_bus_dat_r <= csrbank6_rxempty_w;
            end
            2'd3: begin
                interface6_bank_bus_dat_r <= csrbank6_ev_status_w;
            end
            3'd4: begin
                interface6_bank_bus_dat_r <= csrbank6_ev_pending_w;
            end
            3'd5: begin
                interface6_bank_bus_dat_r <= csrbank6_ev_enable0_w;
            end
            3'd6: begin
                interface6_bank_bus_dat_r <= csrbank6_txempty_w;
            end
            3'd7: begin
                interface6_bank_bus_dat_r <= csrbank6_rxfull_w;
            end
        endcase
    end
    uart_txfull_re <= csrbank6_txfull_re;
    uart_rxempty_re <= csrbank6_rxempty_re;
    uart_status_re <= csrbank6_ev_status_re;
    if (csrbank6_ev_pending_re) begin
        uart_pending_r[1:0] <= csrbank6_ev_pending_r;
    end
    uart_pending_re <= csrbank6_ev_pending_re;
    if (csrbank6_ev_enable0_re) begin
        uart_enable_storage[1:0] <= csrbank6_ev_enable0_r;
    end
    uart_enable_re <= csrbank6_ev_enable0_re;
    uart_txempty_re <= csrbank6_txempty_re;
    uart_rxfull_re <= csrbank6_rxfull_re;
    interface7_bank_bus_dat_r <= 1'd0;
    if (csrbank7_sel) begin
        case (interface7_bank_bus_adr[8:0])
            1'd0: begin
                interface7_bank_bus_dat_r <= csrbank7_ev_status_w;
            end
            1'd1: begin
                interface7_bank_bus_dat_r <= csrbank7_ev_pending_w;
            end
            2'd2: begin
                interface7_bank_bus_dat_r <= csrbank7_ev_enable0_w;
            end
        endcase
    end
    usb23_status_re <= csrbank7_ev_status_re;
    if (csrbank7_ev_pending_re) begin
        usb23_pending_r <= csrbank7_ev_pending_r;
    end
    usb23_pending_re <= csrbank7_ev_pending_re;
    if (csrbank7_ev_enable0_re) begin
        usb23_enable_storage <= csrbank7_ev_enable0_r;
    end
    usb23_enable_re <= csrbank7_ev_enable0_re;
    if (sys_rst_1) begin
        reset_storage <= 2'd0;
        reset_re <= 1'd0;
        scratch_storage <= 32'd305419896;
        scratch_re <= 1'd0;
        bus_errors_re <= 1'd0;
        bus_errors <= 32'd0;
        serial_tx <= 1'd1;
        tx_tick <= 1'd0;
        rx_tick <= 1'd0;
        rx_rx_d <= 1'd0;
        uart_txfull_re <= 1'd0;
        uart_rxempty_re <= 1'd0;
        uart_tx_pending <= 1'd0;
        uart_tx_trigger_d <= 1'd0;
        uart_rx_pending <= 1'd0;
        uart_rx_trigger_d <= 1'd0;
        uart_status_re <= 1'd0;
        uart_pending_re <= 1'd0;
        uart_pending_r <= 2'd0;
        uart_enable_storage <= 2'd0;
        uart_enable_re <= 1'd0;
        uart_txempty_re <= 1'd0;
        uart_rxfull_re <= 1'd0;
        uart_tx_fifo_readable <= 1'd0;
        uart_tx_fifo_level0 <= 5'd0;
        uart_tx_fifo_produce <= 4'd0;
        uart_tx_fifo_consume <= 4'd0;
        uart_rx_fifo_readable <= 1'd0;
        uart_rx_fifo_level0 <= 5'd0;
        uart_rx_fifo_produce <= 4'd0;
        uart_rx_fifo_consume <= 4'd0;
        timer_load_storage <= 32'd0;
        timer_load_re <= 1'd0;
        timer_reload_storage <= 32'd0;
        timer_reload_re <= 1'd0;
        timer_en_storage <= 1'd0;
        timer_en_re <= 1'd0;
        timer_update_value_storage <= 1'd0;
        timer_update_value_re <= 1'd0;
        timer_value_status <= 32'd0;
        timer_value_re <= 1'd0;
        timer_zero_pending <= 1'd0;
        timer_zero_trigger_d <= 1'd0;
        timer_status_re <= 1'd0;
        timer_pending_re <= 1'd0;
        timer_pending_r <= 1'd0;
        timer_enable_storage <= 1'd0;
        timer_enable_re <= 1'd0;
        timer_value <= 32'd0;
        uptime_latch_storage <= 1'd0;
        uptime_latch_re <= 1'd0;
        uptime_cycles_status <= 64'd0;
        uptime_cycles_re <= 1'd0;
        _w_storage <= 3'd5;
        _w_re <= 1'd0;
        _r_re <= 1'd0;
        litespisdrphycore_storage <= 8'd0;
        litespisdrphycore_re <= 1'd0;
        litespisdrphycore_cnt <= 8'd0;
        litespisdrphycore_clk <= 1'd0;
        litespisdrphycore_posedge_reg <= 1'd0;
        litespisdrphycore_posedge_reg2 <= 1'd0;
        litespisdrphycore_count <= 4'd11;
        spiflash_core_litespimmap_burst_cs <= 1'd0;
        spiflash_core_litespimmap_count <= 9'd256;
        spiflash_core_litespimmap_write <= 1'd0;
        spiflash_core_litespimmap_write_mask <= 4'd0;
        spiflash_core_litespimmap_storage <= 8'd8;
        spiflash_core_litespimmap_re <= 1'd0;
        spiflash_core_litespimmap_data_write <= 32'd0;
        main_ram_bus_ack <= 1'd0;
        usb23_pending <= 1'd0;
        usb23_trigger_d <= 1'd0;
        usb23_status_re <= 1'd0;
        usb23_pending_re <= 1'd0;
        usb23_pending_r <= 1'd0;
        usb23_enable_storage <= 1'd0;
        usb23_enable_re <= 1'd0;
        framectl_pending <= 1'd0;
        framectl_trigger_d <= 1'd0;
        framectl_status_re <= 1'd0;
        framectl_pending_re <= 1'd0;
        framectl_pending_r <= 1'd0;
        framectl_enable_storage <= 1'd0;
        framectl_enable_re <= 1'd0;
        decoder0_slave_sel_r <= 2'd0;
        timeout0_count <= 20'd1000000;
        decoder1_slave_sel_r <= 4'd0;
        timeout1_count <= 20'd1000000;
        arbiter0_grant <= 1'd0;
        arbiter1_grant <= 1'd0;
        rs232phytx_state <= 1'd0;
        rs232phyrx_state <= 1'd0;
        litespiphy_state <= 2'd0;
        litespi_state <= 4'd0;
        wishbone2csr_state <= 1'd0;
    end
    regs0 <= serial_rx;
    regs1 <= regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


assign i2c0_scl = (~scl) ? 1'd0 : 1'bz;

assign i2c0_sda = (oe & (~sda0)) ? 1'd0 : 1'bz;
assign sda1 = i2c0_sda;

//------------------------------------------------------------------------------
// Instance SP512K of SP512K Module.
//------------------------------------------------------------------------------
SP512K #(
	// Parameters.
	.ECC_BYTE_SEL ("BYTE_EN")
) SP512K (
	// Inputs.
	.AD       (main_ram_bus_adr[13:0]),
	.BYTEEN_N ((~main_ram_bus_sel[3:0])),
	.CE       (1'd1),
	.CEOUT    (1'd0),
	.CLK      (sys_clk_1),
	.CS       (main_ram_cs),
	.DI       (main_ram_datain),
	.RSTOUT   (1'd0),
	.WE       (main_ram_wren),

	// Outputs.
	.DO       (main_ram_dataout)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk_1),
	.dBusWishbone_ACK       (dbus_ack),
	.dBusWishbone_DAT_MISO  (dbus_dat_r),
	.dBusWishbone_ERR       (dbus_err),
	.debugReset             (jtag_reset),
	.externalInterruptArray (interrupt),
	.externalResetVector    (vexriscv),
	.iBusWishbone_ACK       (ibus_ack),
	.iBusWishbone_DAT_MISO  (ibus_dat_r),
	.iBusWishbone_ERR       (ibus_err),
	.jtag_tck               (jtag_tck),
	.jtag_tdi               (jtag_tdi),
	.jtag_tms               (jtag_tms),
	.reset                  ((sys_rst_1 | reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (dbus_adr),
	.dBusWishbone_BTE       (dbus_bte),
	.dBusWishbone_CTI       (dbus_cti),
	.dBusWishbone_CYC       (dbus_cyc),
	.dBusWishbone_DAT_MOSI  (dbus_dat_w),
	.dBusWishbone_SEL       (dbus_sel),
	.dBusWishbone_STB       (dbus_stb),
	.dBusWishbone_WE        (dbus_we),
	.iBusWishbone_ADR       (ibus_adr),
	.iBusWishbone_BTE       (ibus_bte),
	.iBusWishbone_CTI       (ibus_cti),
	.iBusWishbone_CYC       (ibus_cyc),
	.iBusWishbone_DAT_MOSI  (ibus_dat_w),
	.iBusWishbone_SEL       (ibus_sel),
	.iBusWishbone_STB       (ibus_stb),
	.iBusWishbone_WE        (ibus_we),
	.jtag_tdo               (jtag_tdo)
);

assign spiflash4x_dq[0] = inferedsdrtristate0_oe ? inferedsdrtristate0__o : 1'bz;
assign inferedsdrtristate0__i = spiflash4x_dq[0];

assign spiflash4x_dq[1] = inferedsdrtristate1_oe ? inferedsdrtristate1__o : 1'bz;
assign inferedsdrtristate1__i = spiflash4x_dq[1];

assign spiflash4x_dq[2] = inferedsdrtristate2_oe ? inferedsdrtristate2__o : 1'bz;
assign inferedsdrtristate2__i = spiflash4x_dq[2];

assign spiflash4x_dq[3] = inferedsdrtristate3_oe ? inferedsdrtristate3__o : 1'bz;
assign inferedsdrtristate3__i = spiflash4x_dq[3];

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-08-26 16:40:06.
//------------------------------------------------------------------------------
